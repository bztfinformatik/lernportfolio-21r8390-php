{"config":{"indexing":"full","lang":["de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Startseite # Dies ist die Dokumentation \u00fcber PHP, in welcher die Grundschritte und wichtige Methoden beschrieben werden. Inhaltsverzeichnis # Diese Seite enth\u00e4lt ein Inhaltsverzeichnis , welche die Seiten kategorisiert. Das Verzeichnis hilft zur schnellen Navigation, da gewisse Aufgaben zusammen genommen wurden. Notenverteilung # LB Description LB1 (Fallstudie) 65% LB2 (Concept-Map) 20% LB3 (Lernportfolio) 15%","title":"Startseite"},{"location":"#startseite","text":"Dies ist die Dokumentation \u00fcber PHP, in welcher die Grundschritte und wichtige Methoden beschrieben werden.","title":"Startseite "},{"location":"#inhaltsverzeichnis","text":"Diese Seite enth\u00e4lt ein Inhaltsverzeichnis , welche die Seiten kategorisiert. Das Verzeichnis hilft zur schnellen Navigation, da gewisse Aufgaben zusammen genommen wurden.","title":"Inhaltsverzeichnis"},{"location":"#notenverteilung","text":"LB Description LB1 (Fallstudie) 65% LB2 (Concept-Map) 20% LB3 (Lernportfolio) 15%","title":"Notenverteilung"},{"location":"Changelog/","text":"Changelog # 1. Woche # Struktur der Dokumentation erstellt GitHub Pages PHP Basics PHP Installation Docker Einleitung 1. Woche in Journal 2. Woche # PHP Rechnen PHP Arrays PHP Array Funktionen PHP HTTP Parameter Quicksort Docker Whalesay & MySQL 2. Woche in Journal 3. Woche # Doku Strukturiert Datentypen Vergleiche Schleifen Formular 3. Woche in Journal 4. Woche # 1. Abgabe der Doku SSR vs CSR Dateien Do and Donts CSR Projekt + Erweiterung CSR Projekt mit Dateien 4. Woche in Journal 5. Woche # OOP MVC Entwicklung vs Produktion Projekt 5. Woche in Journal 6. Woche # Framework Aufbau Hinzuf\u00fcgen Klassendiagramm Sequenzdiagramm 6. Woche in Journal 7. Woche # Twig \u00dcbersicht Twig Installation Twig Design Twig Logik 7. Woche in Journal 8. Woche # LB \u00dcbersicht Concept Map MVC Konzept Twig Konzept Use-Cases 8. Woche in Journal 9. Woche # Validierung Mockup Anwendungsf\u00e4lle Testszenarios Daten Validierung 9. Woche in Journal 10. Woche # 10. Woche in Journal Struktur Error Seiten Landing Page Klassen ELK-Stack Tailwind CSS 11. Woche # 11. Woche in Journal User Seiten Sign In Sign Up Profile Projekt Erstellen Bearbeiten Dashboard Regex 12. Woche # 12. Woche in Journal Datenbank Datei Viewer 13. Woche # 13. Woche in Journal Services Download SendGrid 14. Woche # 14. Woche in Journal Sessions Cookies 15. Woche # 15. Woche in Journal Benutzer Counter Login refactoring 16. Woche # 16. Woche in Journal Redis Testf\u00e4lle 17. Woche # 17. Woche in Journal","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#1-woche","text":"Struktur der Dokumentation erstellt GitHub Pages PHP Basics PHP Installation Docker Einleitung 1. Woche in Journal","title":"1. Woche"},{"location":"Changelog/#2-woche","text":"PHP Rechnen PHP Arrays PHP Array Funktionen PHP HTTP Parameter Quicksort Docker Whalesay & MySQL 2. Woche in Journal","title":"2. Woche"},{"location":"Changelog/#3-woche","text":"Doku Strukturiert Datentypen Vergleiche Schleifen Formular 3. Woche in Journal","title":"3. Woche"},{"location":"Changelog/#4-woche","text":"1. Abgabe der Doku SSR vs CSR Dateien Do and Donts CSR Projekt + Erweiterung CSR Projekt mit Dateien 4. Woche in Journal","title":"4. Woche"},{"location":"Changelog/#5-woche","text":"OOP MVC Entwicklung vs Produktion Projekt 5. Woche in Journal","title":"5. Woche"},{"location":"Changelog/#6-woche","text":"Framework Aufbau Hinzuf\u00fcgen Klassendiagramm Sequenzdiagramm 6. Woche in Journal","title":"6. Woche"},{"location":"Changelog/#7-woche","text":"Twig \u00dcbersicht Twig Installation Twig Design Twig Logik 7. Woche in Journal","title":"7. Woche"},{"location":"Changelog/#8-woche","text":"LB \u00dcbersicht Concept Map MVC Konzept Twig Konzept Use-Cases 8. Woche in Journal","title":"8. Woche"},{"location":"Changelog/#9-woche","text":"Validierung Mockup Anwendungsf\u00e4lle Testszenarios Daten Validierung 9. Woche in Journal","title":"9. Woche"},{"location":"Changelog/#10-woche","text":"10. Woche in Journal Struktur Error Seiten Landing Page Klassen ELK-Stack Tailwind CSS","title":"10. Woche"},{"location":"Changelog/#11-woche","text":"11. Woche in Journal User Seiten Sign In Sign Up Profile Projekt Erstellen Bearbeiten Dashboard Regex","title":"11. Woche"},{"location":"Changelog/#12-woche","text":"12. Woche in Journal Datenbank Datei Viewer","title":"12. Woche"},{"location":"Changelog/#13-woche","text":"13. Woche in Journal Services Download SendGrid","title":"13. Woche"},{"location":"Changelog/#14-woche","text":"14. Woche in Journal Sessions Cookies","title":"14. Woche"},{"location":"Changelog/#15-woche","text":"15. Woche in Journal Benutzer Counter Login refactoring","title":"15. Woche"},{"location":"Changelog/#16-woche","text":"16. Woche in Journal Redis Testf\u00e4lle","title":"16. Woche"},{"location":"Changelog/#17-woche","text":"17. Woche in Journal","title":"17. Woche"},{"location":"Tags/","text":"Tags # Diese Webseite verf\u00fcgt \u00fcber folgende Tags: Anforderung # Akteure Daten Funktionale Testszenario Use Cases Anleitung # GitHub Pages Installation Installation Aufgaben # OOP Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Beispiele # Aufgaben Basics Anwendung Cheatsheet # Array Funktionen PHP-Cheatsheet Do's and Don'ts Regex Concept Map # 1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map Datenbank # Adminer Init-Scripts Prepared-Statements \u00dcbersicht Docker # Aufgaben \u00dcbersicht Framework # Aufbau Hinzuf\u00fcgen Validation Konzept # MVC-Konzept Mockup Twig-Konzept LB1 # Adminer Init-Scripts Prepared-Statements \u00dcbersicht \u00dcbersicht Akteure Daten Funktionale Testszenario Use Cases MVC-Konzept Mockup Twig-Konzept MVC Rendering Twig LB2 # 1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map Nicht zugeteilt # Struktur PHP # Sicherheit Twig Basics Installation OOP \u00dcbersicht Array Funktionen PHP-Cheatsheet Datentypen Do's and Don'ts Regex Sortieren Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Aufbau Hinzuf\u00fcgen Validation Anwendung Cookies Sessions Design Installation Logik Reflexion # 1. Woche 2. Woche 3. Woche 4. Woche 5. Woche 6. Woche 7. Woche 8. Woche 9. Woche 10. Woche 11. Woche 12. Woche 13. Woche 14. Woche 15. Woche 16. Woche 17. Woche Sessions & Cookies # Anwendung Cookies Sessions Twig # Twig Design Installation Logik","title":"Tags"},{"location":"Tags/#tags","text":"Diese Webseite verf\u00fcgt \u00fcber folgende Tags:","title":"Tags"},{"location":"Tags/#anforderung","text":"Akteure Daten Funktionale Testszenario Use Cases","title":"Anforderung"},{"location":"Tags/#anleitung","text":"GitHub Pages Installation Installation","title":"Anleitung"},{"location":"Tags/#aufgaben","text":"OOP Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche","title":"Aufgaben"},{"location":"Tags/#beispiele","text":"Aufgaben Basics Anwendung","title":"Beispiele"},{"location":"Tags/#cheatsheet","text":"Array Funktionen PHP-Cheatsheet Do's and Don'ts Regex","title":"Cheatsheet"},{"location":"Tags/#concept-map","text":"1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map","title":"Concept Map"},{"location":"Tags/#datenbank","text":"Adminer Init-Scripts Prepared-Statements \u00dcbersicht","title":"Datenbank"},{"location":"Tags/#docker","text":"Aufgaben \u00dcbersicht","title":"Docker"},{"location":"Tags/#framework","text":"Aufbau Hinzuf\u00fcgen Validation","title":"Framework"},{"location":"Tags/#konzept","text":"MVC-Konzept Mockup Twig-Konzept","title":"Konzept"},{"location":"Tags/#lb1","text":"Adminer Init-Scripts Prepared-Statements \u00dcbersicht \u00dcbersicht Akteure Daten Funktionale Testszenario Use Cases MVC-Konzept Mockup Twig-Konzept MVC Rendering Twig","title":"LB1"},{"location":"Tags/#lb2","text":"1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map","title":"LB2"},{"location":"Tags/#nicht-zugeteilt","text":"Struktur","title":"Nicht zugeteilt"},{"location":"Tags/#php","text":"Sicherheit Twig Basics Installation OOP \u00dcbersicht Array Funktionen PHP-Cheatsheet Datentypen Do's and Don'ts Regex Sortieren Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Aufbau Hinzuf\u00fcgen Validation Anwendung Cookies Sessions Design Installation Logik","title":"PHP"},{"location":"Tags/#reflexion","text":"1. Woche 2. Woche 3. Woche 4. Woche 5. Woche 6. Woche 7. Woche 8. Woche 9. Woche 10. Woche 11. Woche 12. Woche 13. Woche 14. Woche 15. Woche 16. Woche 17. Woche","title":"Reflexion"},{"location":"Tags/#sessions-cookies","text":"Anwendung Cookies Sessions","title":"Sessions &amp; Cookies"},{"location":"Tags/#twig","text":"Twig Design Installation Logik","title":"Twig"},{"location":"Appendix/Sicherheit/","tags":["PHP"],"text":"Sicherheit # Die Informationen f\u00fcr die folgenden Abschnitte wurden zum Teil aus dem PHP-Einfach genommen. Besonders hilfreich waren folgende zwei YouTuber , welche verst\u00e4ndliche und kurze Videos erstellen: Diese Seite ist noch in Arbeit und wird laufend erg\u00e4nzt. Die bereits aufgelisteten Inhalte werden noch geschrieben oder \u00fcberarbeitet. CSRF # Cross-Site-Request-Forgery ist das Verfahren um eine unbefugte Aktion auf einer anderen Seite auszuf\u00fchren. Dabei wird die aktive Session eines Benutzers ausgenutzt um ungewollte Aktionen auszuf\u00fchren. Wenn CSRF verhindert werden m\u00f6chte, dann muss ein One-Time-Token generiert werden. Nur wenn dieser korrekt ist, darf die Abfrage bet\u00e4tigt werden. Siehe Moodle: < input type = \"hidden\" name = \"logintoken\" value = \"Ul2oCaELs11l24264ekksYhNtgR9AMcc\" /> XSS # Cross-Site-Scripting ist das Verfahren um JavaScript in eine Webseite einzubinden. Dies kann zum Beispiel dazu verwendet werden, um einen Cookie zu stehlen. Da JavaScript auf dem Client ausgef\u00fchrt wird, kann der Angriff bei alleinigem Betrachten der Webseite erfolgen. Um dies zu verhindern, muss der HTML-Code escaped werden, was mit htmlspecialchars() m\u00f6glich ist. < script > alert ( document . cookie ); </ script > SQL-Injection # Daten, welche ein Benutzer eingibt, werden fast immer in einer Datenbank gespeichert. Normales SQL-Statement INSERT INTO texte VALUE ( 'eingabe' ); Durch eine gezielte Eingabe kann jedoch aus diesem Statement ausgebrochen werden: Als eingabe wird dieser Text verwendet: Gef\u00e4hrliche Eingabe ' ); DROP DATABASE ; -- Ausgef\u00fchrte Ausgabe INSERT INTO texte VALUE ( '' ); DROP DATABASE ; -- Session-Hijacking # Wenn eine Session gestartet wird, wird ein Session-ID generiert. Diese wird dann in einem Cookie gespeichert. Wenn ein Angreifer nun die Session-ID aus dem Cookie stiehlt, kann er sich als der Benutzer ausgeben. Die Auswirkung ist, dass der Angreifer Zugriff auf die vollen Daten des Benutzers hat und keine bis minimale Spuren hinterl\u00e4sst.","title":"Sicherheit"},{"location":"Appendix/Sicherheit/#sicherheit","text":"Die Informationen f\u00fcr die folgenden Abschnitte wurden zum Teil aus dem PHP-Einfach genommen. Besonders hilfreich waren folgende zwei YouTuber , welche verst\u00e4ndliche und kurze Videos erstellen: Diese Seite ist noch in Arbeit und wird laufend erg\u00e4nzt. Die bereits aufgelisteten Inhalte werden noch geschrieben oder \u00fcberarbeitet.","title":"Sicherheit"},{"location":"Appendix/Sicherheit/#csrf","text":"Cross-Site-Request-Forgery ist das Verfahren um eine unbefugte Aktion auf einer anderen Seite auszuf\u00fchren. Dabei wird die aktive Session eines Benutzers ausgenutzt um ungewollte Aktionen auszuf\u00fchren. Wenn CSRF verhindert werden m\u00f6chte, dann muss ein One-Time-Token generiert werden. Nur wenn dieser korrekt ist, darf die Abfrage bet\u00e4tigt werden. Siehe Moodle: < input type = \"hidden\" name = \"logintoken\" value = \"Ul2oCaELs11l24264ekksYhNtgR9AMcc\" />","title":"CSRF"},{"location":"Appendix/Sicherheit/#xss","text":"Cross-Site-Scripting ist das Verfahren um JavaScript in eine Webseite einzubinden. Dies kann zum Beispiel dazu verwendet werden, um einen Cookie zu stehlen. Da JavaScript auf dem Client ausgef\u00fchrt wird, kann der Angriff bei alleinigem Betrachten der Webseite erfolgen. Um dies zu verhindern, muss der HTML-Code escaped werden, was mit htmlspecialchars() m\u00f6glich ist. < script > alert ( document . cookie ); </ script >","title":"XSS"},{"location":"Appendix/Sicherheit/#sql-injection","text":"Daten, welche ein Benutzer eingibt, werden fast immer in einer Datenbank gespeichert. Normales SQL-Statement INSERT INTO texte VALUE ( 'eingabe' ); Durch eine gezielte Eingabe kann jedoch aus diesem Statement ausgebrochen werden: Als eingabe wird dieser Text verwendet: Gef\u00e4hrliche Eingabe ' ); DROP DATABASE ; -- Ausgef\u00fchrte Ausgabe INSERT INTO texte VALUE ( '' ); DROP DATABASE ; --","title":"SQL-Injection"},{"location":"Appendix/Sicherheit/#session-hijacking","text":"Wenn eine Session gestartet wird, wird ein Session-ID generiert. Diese wird dann in einem Cookie gespeichert. Wenn ein Angreifer nun die Session-ID aus dem Cookie stiehlt, kann er sich als der Benutzer ausgeben. Die Auswirkung ist, dass der Angreifer Zugriff auf die vollen Daten des Benutzers hat und keine bis minimale Spuren hinterl\u00e4sst.","title":"Session-Hijacking"},{"location":"Appendix/GitHubPages/Einrichten/","tags":["Anleitung"],"text":"GitHub Pages Einrichten # Mithilfe dieser Anleitung kann GitHub Page eingerichtet werden. GitHub Pages ist ein Hosting-Service f\u00fcr statische Webseiten, der HTML-, CSS- und JavaScript-Dateien direkt aus einem Repository auf GitHub \u00fcbernimmt, die Dateien optional durch einen Build-Prozess f\u00fchrt und eine Website ver\u00f6ffentlicht. Um GitHub Pages zu aktivieren, muss man Administratorrechte besitzen. Wenn diese vorhanden sind, dann sollte in der Taskleiste als letzte Option Settings zu sehen sein. Nach dem \u00d6ffnen der Einstellungen sollte unter dem linken Men\u00fcpunkt Code and automation die Option Pages auffindbar sein. Die einfachste Methode ist, unter Build and deployment die Option Deploy from a branch auszuw\u00e4hlen. Folglich muss daraufhin der Branche ausgew\u00e4hlt werden, in welcher sich die Dokumentation befindet. Normalerweise befindet sich die Dokumentation in einem Unterordner ( /docs ), weswegen dort der dementsprechende Pfad angegeben werden muss. Nach dem Speichern kann es 5 - 10 Minuten dauern, bis die Webseite aufrufbar ist. Auch nach einem Commit dauert es einige Zeit, bis die \u00c4nderungen angezeigt werden. Die URL zur Seite erscheint nach der Wartezeit unter der im Bild gezeigten Seite. Zus\u00e4tzlich wird eine Action erstellt, mit welcher der Status der Seite angezeigt werden kann.","title":"GitHub Pages"},{"location":"Appendix/GitHubPages/Einrichten/#github-pages-einrichten","text":"Mithilfe dieser Anleitung kann GitHub Page eingerichtet werden. GitHub Pages ist ein Hosting-Service f\u00fcr statische Webseiten, der HTML-, CSS- und JavaScript-Dateien direkt aus einem Repository auf GitHub \u00fcbernimmt, die Dateien optional durch einen Build-Prozess f\u00fchrt und eine Website ver\u00f6ffentlicht. Um GitHub Pages zu aktivieren, muss man Administratorrechte besitzen. Wenn diese vorhanden sind, dann sollte in der Taskleiste als letzte Option Settings zu sehen sein. Nach dem \u00d6ffnen der Einstellungen sollte unter dem linken Men\u00fcpunkt Code and automation die Option Pages auffindbar sein. Die einfachste Methode ist, unter Build and deployment die Option Deploy from a branch auszuw\u00e4hlen. Folglich muss daraufhin der Branche ausgew\u00e4hlt werden, in welcher sich die Dokumentation befindet. Normalerweise befindet sich die Dokumentation in einem Unterordner ( /docs ), weswegen dort der dementsprechende Pfad angegeben werden muss. Nach dem Speichern kann es 5 - 10 Minuten dauern, bis die Webseite aufrufbar ist. Auch nach einem Commit dauert es einige Zeit, bis die \u00c4nderungen angezeigt werden. Die URL zur Seite erscheint nach der Wartezeit unter der im Bild gezeigten Seite. Zus\u00e4tzlich wird eine Action erstellt, mit welcher der Status der Seite angezeigt werden kann.","title":"GitHub Pages Einrichten"},{"location":"Appendix/Struktur/Struktur/","tags":["Nicht zugeteilt"],"text":"Projekt Struktur # Dieses Dokument beschreibt die Struktur der Projektvorlage . Compose-File # Das Compose-File ist in der Datei docker-compose.yml zu finden. Es enth\u00e4lt die Definition der Container und deren Abh\u00e4ngigkeiten . \u2026ein Container ist eine in sich geschlossene Einheit, die idealerweise nur \u201ceinen\u201d Aufrag hat \u2026wir m\u00fcssen mehrere solche Container untereinder \u00fcber IP kommunizieren lassen (virtuelle Netze, SDN, uswusf.) \u2026wir wollen lokalen Storage (lokales Filesystem) in den Container mounten k\u00f6nnen Die Verwaltung ist sehr schwierig, deshalb befinden sich alle Konfigurationen in einer Datei. File # In unserem Beispiel sieht die Datei wie folgt aus: Docker Compose docker-compose.yml version : \"3\" volumes : mysqldata : mysqlinit : app : services : php : build : ./php ports : - 8000:80 volumes : - ./app:/var/www/html mysql : image : mysql:8 ports : - 3306:3306 command : --default-authentication-plugin=mysql_native_password environment : MYSQL_ROOT_PASSWORD : root MYSQL_USER : user MYSQL_PASSWORD : userpass MYSQL_DATABASE : testdb volumes : - ./mysql/initscripts:/docker-entrypoint-initdb.d - ./mysql/mysqldata:/var/lib/mysql/ adminer : image : adminer ports : - 8085:8080 Datenbank # Als Datenbank wird MySQL verwendet, da das Setup \u00fcber Docker sehr einfach ist und PHP eine hervorragende Kompatibilit\u00e4t bietet. Die Datenbank wird in einem eigenen Container gestartet und kann \u00fcber den Port 3306 angesprochen werden. Unter mysqldata wird der Datenbank-Ordner abgelegt, der beim Neustart des Containers erhalten bleibt. Das sind die Bin\u00e4rdateien f\u00fcr den MySQL-Server. Unter initscripts werden die SQL-Dateien abgelegt, die beim Start des Containers ausgef\u00fchrt werden. Das sind die SQL-Dateien, die die Datenbankstruktur und die Testdaten beinhalten. Die SQL-Dateien werden in der Reihenfolge ausgef\u00fchrt, in der sie im Ordner liegen, also Alphabetisch. Adminer # Adminer ist eine alternative zu phpMyAdmin . Es ist eine Webanwendung , die die Datenbankverwaltung \u00fcber den Browser erm\u00f6glicht. Adminer wird in einem eigenen Container gestartet und kann \u00fcber den Port 8085 angesprochen werden. Der Vorteil von Adminer ist, dass es sehr klein ist und keine zus\u00e4tzlichen Abh\u00e4ngigkeiten hat. Der Nachteil ist, dass es nicht so viele Funktionen wie phpMyAdmin hat. Einen Vergleich zwischen den beiden Plattformen ist hier zu finden. PHP # Das Projekt ist nat\u00fcrlich mit PHP versehen. PHP wird in einem eigenen Container gestartet und kann \u00fcber den Port 8000 angesprochen werden. Unter app wird der Web-Ordner abgelegt. Das sind die PHP-Dateien, die die Webanwendung beinhalten. In diesen Ordner werden alle PHP-Dateien gelegt, die \u00fcber den Browser aufgerufen werden k\u00f6nnen. Beim Aufrufen der Webseite wird nur dieser Bereich des Containers verwendet. Der Rest des Containers ist nicht zugreifbar. Unter css werden die CSS-Dateien abgelegt. Das sind die Dateien, die die Formatierung der Webseite beinhalten. Die JavaScript-Dateien werden unter js abgelegt. Diese Dateien beinhalten die Logik der Webseite. Controller, welche nur Daten auswerten und ausgeben, sollten unter api gespeichert werden.","title":"Struktur"},{"location":"Appendix/Struktur/Struktur/#projekt-struktur","text":"Dieses Dokument beschreibt die Struktur der Projektvorlage .","title":"Projekt Struktur"},{"location":"Appendix/Struktur/Struktur/#compose-file","text":"Das Compose-File ist in der Datei docker-compose.yml zu finden. Es enth\u00e4lt die Definition der Container und deren Abh\u00e4ngigkeiten . \u2026ein Container ist eine in sich geschlossene Einheit, die idealerweise nur \u201ceinen\u201d Aufrag hat \u2026wir m\u00fcssen mehrere solche Container untereinder \u00fcber IP kommunizieren lassen (virtuelle Netze, SDN, uswusf.) \u2026wir wollen lokalen Storage (lokales Filesystem) in den Container mounten k\u00f6nnen Die Verwaltung ist sehr schwierig, deshalb befinden sich alle Konfigurationen in einer Datei.","title":"Compose-File"},{"location":"Appendix/Struktur/Struktur/#file","text":"In unserem Beispiel sieht die Datei wie folgt aus: Docker Compose docker-compose.yml version : \"3\" volumes : mysqldata : mysqlinit : app : services : php : build : ./php ports : - 8000:80 volumes : - ./app:/var/www/html mysql : image : mysql:8 ports : - 3306:3306 command : --default-authentication-plugin=mysql_native_password environment : MYSQL_ROOT_PASSWORD : root MYSQL_USER : user MYSQL_PASSWORD : userpass MYSQL_DATABASE : testdb volumes : - ./mysql/initscripts:/docker-entrypoint-initdb.d - ./mysql/mysqldata:/var/lib/mysql/ adminer : image : adminer ports : - 8085:8080","title":"File"},{"location":"Appendix/Struktur/Struktur/#datenbank","text":"Als Datenbank wird MySQL verwendet, da das Setup \u00fcber Docker sehr einfach ist und PHP eine hervorragende Kompatibilit\u00e4t bietet. Die Datenbank wird in einem eigenen Container gestartet und kann \u00fcber den Port 3306 angesprochen werden. Unter mysqldata wird der Datenbank-Ordner abgelegt, der beim Neustart des Containers erhalten bleibt. Das sind die Bin\u00e4rdateien f\u00fcr den MySQL-Server. Unter initscripts werden die SQL-Dateien abgelegt, die beim Start des Containers ausgef\u00fchrt werden. Das sind die SQL-Dateien, die die Datenbankstruktur und die Testdaten beinhalten. Die SQL-Dateien werden in der Reihenfolge ausgef\u00fchrt, in der sie im Ordner liegen, also Alphabetisch.","title":"Datenbank"},{"location":"Appendix/Struktur/Struktur/#adminer","text":"Adminer ist eine alternative zu phpMyAdmin . Es ist eine Webanwendung , die die Datenbankverwaltung \u00fcber den Browser erm\u00f6glicht. Adminer wird in einem eigenen Container gestartet und kann \u00fcber den Port 8085 angesprochen werden. Der Vorteil von Adminer ist, dass es sehr klein ist und keine zus\u00e4tzlichen Abh\u00e4ngigkeiten hat. Der Nachteil ist, dass es nicht so viele Funktionen wie phpMyAdmin hat. Einen Vergleich zwischen den beiden Plattformen ist hier zu finden.","title":"Adminer"},{"location":"Appendix/Struktur/Struktur/#php","text":"Das Projekt ist nat\u00fcrlich mit PHP versehen. PHP wird in einem eigenen Container gestartet und kann \u00fcber den Port 8000 angesprochen werden. Unter app wird der Web-Ordner abgelegt. Das sind die PHP-Dateien, die die Webanwendung beinhalten. In diesen Ordner werden alle PHP-Dateien gelegt, die \u00fcber den Browser aufgerufen werden k\u00f6nnen. Beim Aufrufen der Webseite wird nur dieser Bereich des Containers verwendet. Der Rest des Containers ist nicht zugreifbar. Unter css werden die CSS-Dateien abgelegt. Das sind die Dateien, die die Formatierung der Webseite beinhalten. Die JavaScript-Dateien werden unter js abgelegt. Diese Dateien beinhalten die Logik der Webseite. Controller, welche nur Daten auswerten und ausgeben, sollten unter api gespeichert werden.","title":"PHP"},{"location":"Datenbank/Adminer/","tags":["LB1","Datenbank"],"text":"Adminer # Adminer ist eine Datenbankverwaltung, die in PHP geschrieben ist. Sie ist eine Alternative zu phpMyAdmin , da es sehr einfach zu bedienen ist und mit mehreren Datenbanken kompatibel ist. Es wird jedoch gleich als Webanwendung verwendet. Adminer ist eine Single-File-Anwendung, die keine Datenbank ben\u00f6tigt. Sie kann auf einem beliebigen Webserver installiert werden und ist daher sehr flexibel einsetzbar. Adminer ist Open Source und steht unter der Apache 2.0 Lizenz . Der Vorteil von Adminer ist, dass es ohne Probleme erweitert werden kann. So k\u00f6nnen eigene Themes oder Plugins hinzugef\u00fcgt werden. Installation # Gleich wie die Datenbank kann Adminer \u00fcber einen Container installiert werden. Dazu wird folgender Code in der docker-compose.yml Datei eingef\u00fcgt: Adminer Container adminer : image : adminer restart : unless-stopped ports : - 8080:8080 depends_on : - mariadb # (1)! volumes : # Optional erweitern (2) - ./mariadb/adminer/theme.css:/var/www/html/adminer.css Der Adminer Container h\u00e4ngt vom MariaDB Container ab, da er auf die Datenbank zugreifen muss. Wenn der MariaDB Container nicht l\u00e4uft, kann der Adminer Container nicht gestartet werden. Aus diesem Grund wird der MariaDB Container als Abh\u00e4ngigkeit angegeben. Dieser Schritt ist optional ! Der Adminer Container verwendet ein Theme ( Hydra ). Dieses Theme wird in den Ordner ./mariadb/adminer kopiert. Der Ordner wird dann in den Container gemountet. Verwendung # Adminer kann \u00fcber den Browser unter http://localhost:8080 aufgerufen werden. Es \u00f6ffnet sich ein Fenster, in dem die Datenbankverbindung konfiguriert werden kann. Die Datenbankverbindung wird \u00fcber die IP Adresse des MariaDB Containers hergestellt. Da die Container im selben Netzwerk sind kann auch einfach der Name des Containers verwendet werden. In diesem Fall ist der Name mariadb . Danach muss nur noch der Benutzername und das Password eingegeben werden. Das Passwort ist in der docker-compose.yml Datei zu finden. Auf der Schaltfl\u00e4che kann dann das Schema erstellt und exportiert werden. Es k\u00f6nnen auch SQL Befehle ausgef\u00fchrt werden. Es ist m\u00f6glich die ganze Datenbank \u00fcber die Oberfl\u00e4che zu verwalten . Die Schaltfl\u00e4che sieht in etwa so aus:","title":"Adminer"},{"location":"Datenbank/Adminer/#adminer","text":"Adminer ist eine Datenbankverwaltung, die in PHP geschrieben ist. Sie ist eine Alternative zu phpMyAdmin , da es sehr einfach zu bedienen ist und mit mehreren Datenbanken kompatibel ist. Es wird jedoch gleich als Webanwendung verwendet. Adminer ist eine Single-File-Anwendung, die keine Datenbank ben\u00f6tigt. Sie kann auf einem beliebigen Webserver installiert werden und ist daher sehr flexibel einsetzbar. Adminer ist Open Source und steht unter der Apache 2.0 Lizenz . Der Vorteil von Adminer ist, dass es ohne Probleme erweitert werden kann. So k\u00f6nnen eigene Themes oder Plugins hinzugef\u00fcgt werden.","title":"Adminer"},{"location":"Datenbank/Adminer/#installation","text":"Gleich wie die Datenbank kann Adminer \u00fcber einen Container installiert werden. Dazu wird folgender Code in der docker-compose.yml Datei eingef\u00fcgt: Adminer Container adminer : image : adminer restart : unless-stopped ports : - 8080:8080 depends_on : - mariadb # (1)! volumes : # Optional erweitern (2) - ./mariadb/adminer/theme.css:/var/www/html/adminer.css Der Adminer Container h\u00e4ngt vom MariaDB Container ab, da er auf die Datenbank zugreifen muss. Wenn der MariaDB Container nicht l\u00e4uft, kann der Adminer Container nicht gestartet werden. Aus diesem Grund wird der MariaDB Container als Abh\u00e4ngigkeit angegeben. Dieser Schritt ist optional ! Der Adminer Container verwendet ein Theme ( Hydra ). Dieses Theme wird in den Ordner ./mariadb/adminer kopiert. Der Ordner wird dann in den Container gemountet.","title":"Installation"},{"location":"Datenbank/Adminer/#verwendung","text":"Adminer kann \u00fcber den Browser unter http://localhost:8080 aufgerufen werden. Es \u00f6ffnet sich ein Fenster, in dem die Datenbankverbindung konfiguriert werden kann. Die Datenbankverbindung wird \u00fcber die IP Adresse des MariaDB Containers hergestellt. Da die Container im selben Netzwerk sind kann auch einfach der Name des Containers verwendet werden. In diesem Fall ist der Name mariadb . Danach muss nur noch der Benutzername und das Password eingegeben werden. Das Passwort ist in der docker-compose.yml Datei zu finden. Auf der Schaltfl\u00e4che kann dann das Schema erstellt und exportiert werden. Es k\u00f6nnen auch SQL Befehle ausgef\u00fchrt werden. Es ist m\u00f6glich die ganze Datenbank \u00fcber die Oberfl\u00e4che zu verwalten . Die Schaltfl\u00e4che sieht in etwa so aus:","title":"Verwendung"},{"location":"Datenbank/Initscripts/","tags":["LB1","Datenbank"],"text":"Init-Scripts # Init-Scripts sind SQL-Scripts , die beim Starten des Containers ausgef\u00fchrt werden. Sie sind daf\u00fcr gedacht, dass die Datenbank beim Starten des Containers mit Daten bef\u00fcllt wird. Initscripts werden nur einmal beim Starten des Containers ausgef\u00fchrt. Wenn Sie die Datenbank neu starten, werden die Initscripts nicht erneut ausgef\u00fchrt. Ordnerstruktur # Um eine \u00fcbersichtliche Ordnerstruktur zu haben, wurden die SQLScripts im Ordner ./mariadb/initscripts abgelegt. Beim Starten des Containers werden die Scripts in den Ordner /docker-entrypoint-initdb.d kopiert. Dieser Ordner wird beim Starten des Containers automatisch von MariaDB ausgef\u00fchrt. Ordnerstruktur mariadb \u2502 README . md //(1)! \u251c\u2500\u2500\u2500 adminer //(3)! \u2502 theme . css \u251c\u2500\u2500\u2500 initscripts \u2502 200 _User . sql \u2502 220 _Project . sql \u2502 300 _User . sql \u2502 320 _Project . sql \u2514\u2500\u2500\u2500 sysdata Im README wird nochmlas kruz erkl\u00e4rt, was die Ordnerstruktur ist. Der Ordner ./mariadb/adminer wird f\u00fcr das Theme verwendet. Dieses Thema wird im Adminer Kapitel erkl\u00e4rt. Reihenfolge # Gewisse Aufgaben m\u00fcssen vor anderen Passieren. Deshalb ist es wichtig, dass die Initscripts in der richtigen Reihenfolge ausgef\u00fchrt werden. Die Skripte werden in der alphabetischen Reihenfolge ausgef\u00fchrt, in der sie im Ordner aufgelistet sind. Mithilfe der Benennung kann die Reihenfolge der Ausf\u00fchrung der Skripte festlegen. Schlau ist es z.B. die Skripte mit einer Nummer zu versehen, die die Reihenfolge angibt. Aufteilung # F\u00fcr die Benennung der Dateien bin ich nach folgendem Schema gegangen: Nummer Definition 100 Konfigurationen & Administratives 200 Erstellt die Tabellen 300 F\u00fcgt die Daten in die Tabellen ein So ist die Reihenfolge der Ausf\u00fchrung der Skripte: Reihenfolge 1. (100) Konfigurationen & Administratives 1. Gibt es aktuell noch keine 2. (200) Erstellen der Tabellen 1. 200_User.sql 2. 220_Project.sql 3. (300) F\u00fcllen der Tabellen mit Daten 1. 300_User.sql 2. 320_Project.sql Benennung # Auch bei der Benennung der Dateien wurde sich Gedanken gemacht. Die erste Zahl gibt an, in welcher Reihenfolge die Datei ausgef\u00fchrt wird. Die zweite Zahl gibt an, f\u00fcr welche Tabelle die Datei zust\u00e4ndig ist. Somit ist klar ersichtlich, dass 220 und 320 f\u00fcr die Tabelle Project zust\u00e4ndig sind. Zudem haben beide als Endung den Tabellennamen , damit auch von aussen klar ist, f\u00fcr welche Tabelle gedacht ist. Sysdata # Damit die Daten auch beim beenden des Containers nicht verloren gehen, werden die Daten in den Ordner sysdata gespeichert. Dieser Ordner wird beim Starten des Containers wieder eingelesen. Der Ordner beinhaltet das ganze Verzeichnis, welches von MariaDB verwendet wird und ist somit st\u00e4ndig synchronisiert . Wenn die Init-Scripts erneut ausgef\u00fchrt werden sollten, dann muss dieser Ordner gel\u00f6scht werden. Dieser Ordner wird nicht automatisch gel\u00f6scht, da er auch f\u00fcr die Datenbank nicht ben\u00f6tigt wird.","title":"Init-Scripts"},{"location":"Datenbank/Initscripts/#init-scripts","text":"Init-Scripts sind SQL-Scripts , die beim Starten des Containers ausgef\u00fchrt werden. Sie sind daf\u00fcr gedacht, dass die Datenbank beim Starten des Containers mit Daten bef\u00fcllt wird. Initscripts werden nur einmal beim Starten des Containers ausgef\u00fchrt. Wenn Sie die Datenbank neu starten, werden die Initscripts nicht erneut ausgef\u00fchrt.","title":"Init-Scripts"},{"location":"Datenbank/Initscripts/#ordnerstruktur","text":"Um eine \u00fcbersichtliche Ordnerstruktur zu haben, wurden die SQLScripts im Ordner ./mariadb/initscripts abgelegt. Beim Starten des Containers werden die Scripts in den Ordner /docker-entrypoint-initdb.d kopiert. Dieser Ordner wird beim Starten des Containers automatisch von MariaDB ausgef\u00fchrt. Ordnerstruktur mariadb \u2502 README . md //(1)! \u251c\u2500\u2500\u2500 adminer //(3)! \u2502 theme . css \u251c\u2500\u2500\u2500 initscripts \u2502 200 _User . sql \u2502 220 _Project . sql \u2502 300 _User . sql \u2502 320 _Project . sql \u2514\u2500\u2500\u2500 sysdata Im README wird nochmlas kruz erkl\u00e4rt, was die Ordnerstruktur ist. Der Ordner ./mariadb/adminer wird f\u00fcr das Theme verwendet. Dieses Thema wird im Adminer Kapitel erkl\u00e4rt.","title":"Ordnerstruktur"},{"location":"Datenbank/Initscripts/#reihenfolge","text":"Gewisse Aufgaben m\u00fcssen vor anderen Passieren. Deshalb ist es wichtig, dass die Initscripts in der richtigen Reihenfolge ausgef\u00fchrt werden. Die Skripte werden in der alphabetischen Reihenfolge ausgef\u00fchrt, in der sie im Ordner aufgelistet sind. Mithilfe der Benennung kann die Reihenfolge der Ausf\u00fchrung der Skripte festlegen. Schlau ist es z.B. die Skripte mit einer Nummer zu versehen, die die Reihenfolge angibt.","title":"Reihenfolge"},{"location":"Datenbank/Initscripts/#aufteilung","text":"F\u00fcr die Benennung der Dateien bin ich nach folgendem Schema gegangen: Nummer Definition 100 Konfigurationen & Administratives 200 Erstellt die Tabellen 300 F\u00fcgt die Daten in die Tabellen ein So ist die Reihenfolge der Ausf\u00fchrung der Skripte: Reihenfolge 1. (100) Konfigurationen & Administratives 1. Gibt es aktuell noch keine 2. (200) Erstellen der Tabellen 1. 200_User.sql 2. 220_Project.sql 3. (300) F\u00fcllen der Tabellen mit Daten 1. 300_User.sql 2. 320_Project.sql","title":"Aufteilung"},{"location":"Datenbank/Initscripts/#benennung","text":"Auch bei der Benennung der Dateien wurde sich Gedanken gemacht. Die erste Zahl gibt an, in welcher Reihenfolge die Datei ausgef\u00fchrt wird. Die zweite Zahl gibt an, f\u00fcr welche Tabelle die Datei zust\u00e4ndig ist. Somit ist klar ersichtlich, dass 220 und 320 f\u00fcr die Tabelle Project zust\u00e4ndig sind. Zudem haben beide als Endung den Tabellennamen , damit auch von aussen klar ist, f\u00fcr welche Tabelle gedacht ist.","title":"Benennung"},{"location":"Datenbank/Initscripts/#sysdata","text":"Damit die Daten auch beim beenden des Containers nicht verloren gehen, werden die Daten in den Ordner sysdata gespeichert. Dieser Ordner wird beim Starten des Containers wieder eingelesen. Der Ordner beinhaltet das ganze Verzeichnis, welches von MariaDB verwendet wird und ist somit st\u00e4ndig synchronisiert . Wenn die Init-Scripts erneut ausgef\u00fchrt werden sollten, dann muss dieser Ordner gel\u00f6scht werden. Dieser Ordner wird nicht automatisch gel\u00f6scht, da er auch f\u00fcr die Datenbank nicht ben\u00f6tigt wird.","title":"Sysdata"},{"location":"Datenbank/PreparedStatements/","tags":["LB1","Datenbank"],"text":"Prepared-Statements # Prepared-Statements sind eine M\u00f6glichkeit, um SQL-Injections zu verhindern. Sie werden verwendet, um SQL-Statements vorzubereiten und dann auszuf\u00fchren. Dabei werden die Parametern validiert und escaped , bevor sie an die Datenbank gesendet werden. Diese Aufgabe \u00fcbernimmt meist PDO . Was ist PDO? # PDO ist eine Abstraktionsschicht f\u00fcr Datenbanken. Es ist eine Schnittstelle, die es erm\u00f6glicht, mit verschiedenen Datenbanken zu kommunizieren. PDO ist eine Erweiterung f\u00fcr PHP, die es erm\u00f6glicht, mit einer Datenbank zu kommunizieren. Sie wird verwendet, um eine Verbindung aufzubauen und SQL Befehle auszuf\u00fchren. Zudem \u00fcbernimmt es die Datensicherheit , dass b\u00f6sartiger Code keine SQL-Injections ausf\u00fchren kann. Wie funktionieren Prepared-Statements? # Prepared-Statements werden in 3 Schritten erstellt: Das Statement wird vorbereitet Die Parameter werden gebunden Das Statement wird ausgef\u00fchrt Das Ergebnis ausgegeben Dies k\u00f6nnte im Code so aussehen: Prepared-Statement Beispiel <?php // Verbindung mit PDO herstellen $pdo = new PDO ( 'mysql:host=localhost;dbname=test' , 'username' , 'password' ); // 1. Statement vorbereiten $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = :id\" ); // 2. Parameter binden $stmt -> bindParam ( ':id' , $id ); // 3. Statement ausf\u00fchren $stmt -> execute (); // 4. Ergebnis auslesen $result = $stmt -> fetchAll (); Die Parameter k\u00f6nnen auch unbenannt \u00fcbergeben werden, was jedoch die Lesbarkeit des Codes beeintr\u00e4chtigt: Unbekannte Parameter Beispiel <?php $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = ?\" ); $stmt -> execute ([ $id ]); Prepared vs Traditional Statement # Der Unterschied zwischen einem Prepared-Statement und einem Traditional-Statement ist, dass bei einem Prepared-Statement die Parameter validiert und escaped werden, bevor sie an die Datenbank gesendet werden. Dies verhindert SQL-Injections. Prepared-Statement vs Traditional-Statement <?php // Prepared-Statement $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = :id\" ); $stmt -> bindParam ( ':id' , $id ); $stmt -> execute (); // Traditional-Statement $stmt = $pdo -> query ( \"SELECT * FROM users WHERE id = $id \" ); SQL-Injection Beispiel # Dies l\u00e4sst sich am besten anhand dieses Beispiels verdeutlichen: SQL-Injection Beispiel id = \"1; DROP TABLE users --\" ; Beim Prepared-Statement wird der Parameter validiert und escaped und somit die SQL-Injection verhindert: Ausgef\u00fchrtes SQL SELECT * FROM users WHERE id = \"1; DROP TABLE users --\" ; Beim Traditional-Statement wird der Parameter nicht validiert und escaped und somit die SQL-Injection ausgef\u00fchrt: Ausgef\u00fchrtes SQL SELECT * FROM users WHERE id = 1 ; DROP TABLE users --; Anhand der farblichen Unterschiede l\u00e4sst sich gut erkennen, dass der Parameter beim Prepared-Statement escaped wurde und beim Traditional-Statement nicht.","title":"Prepared-Statements"},{"location":"Datenbank/PreparedStatements/#prepared-statements","text":"Prepared-Statements sind eine M\u00f6glichkeit, um SQL-Injections zu verhindern. Sie werden verwendet, um SQL-Statements vorzubereiten und dann auszuf\u00fchren. Dabei werden die Parametern validiert und escaped , bevor sie an die Datenbank gesendet werden. Diese Aufgabe \u00fcbernimmt meist PDO .","title":"Prepared-Statements"},{"location":"Datenbank/PreparedStatements/#was-ist-pdo","text":"PDO ist eine Abstraktionsschicht f\u00fcr Datenbanken. Es ist eine Schnittstelle, die es erm\u00f6glicht, mit verschiedenen Datenbanken zu kommunizieren. PDO ist eine Erweiterung f\u00fcr PHP, die es erm\u00f6glicht, mit einer Datenbank zu kommunizieren. Sie wird verwendet, um eine Verbindung aufzubauen und SQL Befehle auszuf\u00fchren. Zudem \u00fcbernimmt es die Datensicherheit , dass b\u00f6sartiger Code keine SQL-Injections ausf\u00fchren kann.","title":"Was ist PDO?"},{"location":"Datenbank/PreparedStatements/#wie-funktionieren-prepared-statements","text":"Prepared-Statements werden in 3 Schritten erstellt: Das Statement wird vorbereitet Die Parameter werden gebunden Das Statement wird ausgef\u00fchrt Das Ergebnis ausgegeben Dies k\u00f6nnte im Code so aussehen: Prepared-Statement Beispiel <?php // Verbindung mit PDO herstellen $pdo = new PDO ( 'mysql:host=localhost;dbname=test' , 'username' , 'password' ); // 1. Statement vorbereiten $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = :id\" ); // 2. Parameter binden $stmt -> bindParam ( ':id' , $id ); // 3. Statement ausf\u00fchren $stmt -> execute (); // 4. Ergebnis auslesen $result = $stmt -> fetchAll (); Die Parameter k\u00f6nnen auch unbenannt \u00fcbergeben werden, was jedoch die Lesbarkeit des Codes beeintr\u00e4chtigt: Unbekannte Parameter Beispiel <?php $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = ?\" ); $stmt -> execute ([ $id ]);","title":"Wie funktionieren Prepared-Statements?"},{"location":"Datenbank/PreparedStatements/#prepared-vs-traditional-statement","text":"Der Unterschied zwischen einem Prepared-Statement und einem Traditional-Statement ist, dass bei einem Prepared-Statement die Parameter validiert und escaped werden, bevor sie an die Datenbank gesendet werden. Dies verhindert SQL-Injections. Prepared-Statement vs Traditional-Statement <?php // Prepared-Statement $stmt = $pdo -> prepare ( \"SELECT * FROM users WHERE id = :id\" ); $stmt -> bindParam ( ':id' , $id ); $stmt -> execute (); // Traditional-Statement $stmt = $pdo -> query ( \"SELECT * FROM users WHERE id = $id \" );","title":"Prepared vs Traditional Statement"},{"location":"Datenbank/PreparedStatements/#sql-injection-beispiel","text":"Dies l\u00e4sst sich am besten anhand dieses Beispiels verdeutlichen: SQL-Injection Beispiel id = \"1; DROP TABLE users --\" ; Beim Prepared-Statement wird der Parameter validiert und escaped und somit die SQL-Injection verhindert: Ausgef\u00fchrtes SQL SELECT * FROM users WHERE id = \"1; DROP TABLE users --\" ; Beim Traditional-Statement wird der Parameter nicht validiert und escaped und somit die SQL-Injection ausgef\u00fchrt: Ausgef\u00fchrtes SQL SELECT * FROM users WHERE id = 1 ; DROP TABLE users --; Anhand der farblichen Unterschiede l\u00e4sst sich gut erkennen, dass der Parameter beim Prepared-Statement escaped wurde und beim Traditional-Statement nicht.","title":"SQL-Injection Beispiel"},{"location":"Datenbank/Start/","tags":["LB1","Datenbank"],"text":"Datenbank # Eine Datenbank ist f\u00fcr die Persistenz der Daten zust\u00e4ndig. Sie speichert die Daten und stellt sie bei Bedarf wieder zur Verf\u00fcgung. Die Datenbank ist ein zentraler Bestandteil eines jeden Systems. Ohne Datenbank w\u00e4re es nicht m\u00f6glich, Daten zu speichern und wieder abzurufen. In diesem Projekt wird die Datenbank f\u00fcr das Speichern von den Benutzern und Vorlagen verwendet. Provider # Es gibt viele verschiedene Datenbankentypen , welche unterschiedliche Vor- und Nachteile besitzen. F\u00fcr strukturierte Daten lohnt sich eine relationale Datenbank, da diese Verkn\u00fcpfungen und Abh\u00e4ngigkeiten zwischen den Daten speichern kann. F\u00fcr unstrukturierte Daten ist eine relationale Datenbank nicht geeignet, da diese Daten nicht in Tabellen gespeichert werden k\u00f6nnen. F\u00fcr unstrukturierte Daten eignet sich eine NoSQL Datenbank . Diese Datenbanken speichern die Daten in einem JSON oder Document Format. Es gibt noch viele weitere Datenbanktypen, welche diese zwei Typen nicht abdecken. Diese Datenbanken werden in diesem Projekt nicht verwendet. Maria DB # F\u00fcr dieses Projekt wird MariaDB verwendet, da ich es pers\u00f6nlich \u00fcber MySQL pr\u00e4feriere. MariaDB ist ein von der Gemeinschaft entwickelter Fork des relationalen Datenbankmanagementsystems MySQL , der unter der GNU GPL frei bleiben soll. MariaDB wird von Webanwendungen als Datenbankserver verwendet und wird auch von vielen gro\u00dfen Websites, darunter Facebook, Google und Wikipedia, als Datenbankserver genutzt. Der Vorteil von MariaDB ist, dass es eine vollst\u00e4ndige Abw\u00e4rtskompatibilit\u00e4t zu MySQL bietet, aber auch einige neue Funktionen und Verbesserungen enth\u00e4lt. Zudem ist es Open Source und unter der GNU GPL lizenziert, was bedeutet, dass es kostenlos und frei verf\u00fcgbar ist. Container # Damit die Datenbank auf jedem System sich gleich verh\u00e4lt wird sie \u00fcber einen Docker Container verwaltet. Mithilfe von Umgebungsvariablen wird die Datenbank konfiguriert. So kann die Datenbank auf jedem System gleich konfiguriert werden. Der Container wird mit dem Docker Compose gestartet. MariaDB Container mariadb : image : mariadb restart : unless-stopped command : --default-authentication-plugin=mysql_native_password environment : MYSQL_DATABASE : ${DB_NAME} MYSQL_ROOT_PASSWORD : ${DB_ROOT_PASSWORD} MYSQL_USER : ${DB_USER} MYSQL_PASSWORD : ${DB_PASSWORD} volumes : - ./mariadb/initscripts:/docker-entrypoint-initdb.d # (1)! - ./mariadb/sysdata:/var/lib/mysql/ # (2)! Der MariaDB Container verwendet Init Scripts . Dieses Script wird beim Start des Containers ausgef\u00fchrt. In diesem Fall wird das Datenbank Schema erstellt. Damit die Datenbank auch nach einem Neustart des Containers noch vorhanden ist, werden die Daten in einem Ordner gespeichert. Ansonsten w\u00fcrden die Daten nach einem Neustart des Containers gel\u00f6scht werden. Umgebungsvariablen # Da in der Composer Datei noch weitere Container mit eigenen Umgebungsvariablen definiert sind, werden diese in einer .env Datei gespeichert. Dies f\u00f6rder die \u00dcbersichtlichkeit und vereinfacht das \u00c4ndern der Umgebungsvariablen. Zudem ist es so nicht m\u00f6glich, dass abh\u00e4ngige Werte unterschiedlich sind. Beim Starten werden dann die Platzhalter (z.B. ${DB_NAME} ) durch die eigentlichen Werte ersetzt. .env Konfiguration # Database settings DB_NAME = mksimple //(1)! DB_ROOT_PASSWORD = SuperSecretPassword //(2)! DB_USER = mkdocs_user //(3)! DB_PASSWORD = mkdocs_password //(4)! Der Name der Datenbank, welche erstellt werden soll. Das Passwort des Root Benutzers. Dieser Benutzer hat vollst\u00e4ndige Zugriffsrechte auf die Datenbank und sollte nur f\u00fcr die Erstellung der Datenbank verwendet. Der Name des Benutzers , welcher die Datenbank verwenden soll. \u00dcber diesen sollte die Applikation mit der Datenbank sprechen. Dieser Benutzer hat nur Lese- und Schreibrechte auf die Datenbank. Das Passwort des Benutzers . Dieses Passwort sollte nicht das gleiche wie das des Root Benutzers sein.","title":"\u00dcbersicht"},{"location":"Datenbank/Start/#datenbank","text":"Eine Datenbank ist f\u00fcr die Persistenz der Daten zust\u00e4ndig. Sie speichert die Daten und stellt sie bei Bedarf wieder zur Verf\u00fcgung. Die Datenbank ist ein zentraler Bestandteil eines jeden Systems. Ohne Datenbank w\u00e4re es nicht m\u00f6glich, Daten zu speichern und wieder abzurufen. In diesem Projekt wird die Datenbank f\u00fcr das Speichern von den Benutzern und Vorlagen verwendet.","title":"Datenbank "},{"location":"Datenbank/Start/#provider","text":"Es gibt viele verschiedene Datenbankentypen , welche unterschiedliche Vor- und Nachteile besitzen. F\u00fcr strukturierte Daten lohnt sich eine relationale Datenbank, da diese Verkn\u00fcpfungen und Abh\u00e4ngigkeiten zwischen den Daten speichern kann. F\u00fcr unstrukturierte Daten ist eine relationale Datenbank nicht geeignet, da diese Daten nicht in Tabellen gespeichert werden k\u00f6nnen. F\u00fcr unstrukturierte Daten eignet sich eine NoSQL Datenbank . Diese Datenbanken speichern die Daten in einem JSON oder Document Format. Es gibt noch viele weitere Datenbanktypen, welche diese zwei Typen nicht abdecken. Diese Datenbanken werden in diesem Projekt nicht verwendet.","title":"Provider"},{"location":"Datenbank/Start/#maria-db","text":"F\u00fcr dieses Projekt wird MariaDB verwendet, da ich es pers\u00f6nlich \u00fcber MySQL pr\u00e4feriere. MariaDB ist ein von der Gemeinschaft entwickelter Fork des relationalen Datenbankmanagementsystems MySQL , der unter der GNU GPL frei bleiben soll. MariaDB wird von Webanwendungen als Datenbankserver verwendet und wird auch von vielen gro\u00dfen Websites, darunter Facebook, Google und Wikipedia, als Datenbankserver genutzt. Der Vorteil von MariaDB ist, dass es eine vollst\u00e4ndige Abw\u00e4rtskompatibilit\u00e4t zu MySQL bietet, aber auch einige neue Funktionen und Verbesserungen enth\u00e4lt. Zudem ist es Open Source und unter der GNU GPL lizenziert, was bedeutet, dass es kostenlos und frei verf\u00fcgbar ist.","title":"Maria DB"},{"location":"Datenbank/Start/#container","text":"Damit die Datenbank auf jedem System sich gleich verh\u00e4lt wird sie \u00fcber einen Docker Container verwaltet. Mithilfe von Umgebungsvariablen wird die Datenbank konfiguriert. So kann die Datenbank auf jedem System gleich konfiguriert werden. Der Container wird mit dem Docker Compose gestartet. MariaDB Container mariadb : image : mariadb restart : unless-stopped command : --default-authentication-plugin=mysql_native_password environment : MYSQL_DATABASE : ${DB_NAME} MYSQL_ROOT_PASSWORD : ${DB_ROOT_PASSWORD} MYSQL_USER : ${DB_USER} MYSQL_PASSWORD : ${DB_PASSWORD} volumes : - ./mariadb/initscripts:/docker-entrypoint-initdb.d # (1)! - ./mariadb/sysdata:/var/lib/mysql/ # (2)! Der MariaDB Container verwendet Init Scripts . Dieses Script wird beim Start des Containers ausgef\u00fchrt. In diesem Fall wird das Datenbank Schema erstellt. Damit die Datenbank auch nach einem Neustart des Containers noch vorhanden ist, werden die Daten in einem Ordner gespeichert. Ansonsten w\u00fcrden die Daten nach einem Neustart des Containers gel\u00f6scht werden.","title":"Container"},{"location":"Datenbank/Start/#umgebungsvariablen","text":"Da in der Composer Datei noch weitere Container mit eigenen Umgebungsvariablen definiert sind, werden diese in einer .env Datei gespeichert. Dies f\u00f6rder die \u00dcbersichtlichkeit und vereinfacht das \u00c4ndern der Umgebungsvariablen. Zudem ist es so nicht m\u00f6glich, dass abh\u00e4ngige Werte unterschiedlich sind. Beim Starten werden dann die Platzhalter (z.B. ${DB_NAME} ) durch die eigentlichen Werte ersetzt. .env Konfiguration # Database settings DB_NAME = mksimple //(1)! DB_ROOT_PASSWORD = SuperSecretPassword //(2)! DB_USER = mkdocs_user //(3)! DB_PASSWORD = mkdocs_password //(4)! Der Name der Datenbank, welche erstellt werden soll. Das Passwort des Root Benutzers. Dieser Benutzer hat vollst\u00e4ndige Zugriffsrechte auf die Datenbank und sollte nur f\u00fcr die Erstellung der Datenbank verwendet. Der Name des Benutzers , welcher die Datenbank verwenden soll. \u00dcber diesen sollte die Applikation mit der Datenbank sprechen. Dieser Benutzer hat nur Lese- und Schreibrechte auf die Datenbank. Das Passwort des Benutzers . Dieses Passwort sollte nicht das gleiche wie das des Root Benutzers sein.","title":"Umgebungsvariablen"},{"location":"Docker/Aufgaben/","tags":["Docker","Beispiele"],"text":"Docker-Aufgaben # Das hier ist eine Sammlung von verschiedenen Docker Beispielen . Sie sollten zum lernen und verstehen von Docker behilflich sein. Whalesay # Cowsay ist ein Linux Spiel , welches eine Kuh auf dem Bildschirm ausgibt. Diese Kuh kann einen Text sagen. Das Spiel ist sehr beliebt und wird in vielen Linux Distributionen mitgeliefert. Es gibt auch eine Docker Image f\u00fcr Whalesay. Dieses Image ist eine Modifizierung von Cowsay, welche einen Wal ausgibt. Whalesay ausf\u00fchren Ausgabe Der letzte Parameter ist der Text, welcher ausgegeben wird docker run docker/whalesay cowsay \"Hey! Gef\u00e4llt dir diese Doku?\" ______________________________ < Hey! Gef\u00e4llt dir diese Doku? > ------------------------------ \\ \\ \\ ## . ## ## ## == ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ === ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~ \\______ o __/ \\ \\ __/ \\____\\______/ MySQL # MySQL ist eine Datenbank, welche in vielen Projekten verwendet wird. Es gibt ein Docker Image f\u00fcr MySQL. Dieses Image kann verwendet werden, um eine MySQL Datenbank zu starten. Wie die meisten Docker Images kann das Neuste mit dem Tag latest verwendet werden. So ist sichergestellt, dass immer die neuste und sicherste Version verwendet wird. Mithilfe von Umgebungsvariablen wird MySQL konfiguriert. Mithilfe von -e K\u00f6nnen diese Variablen gesetzt werden. Wenn nicht gen\u00fcgend gesetzt sind, dann wird ein Fehler ausgegeben. Der Parameter --name besagt wie der Container heissen soll. \u00dcber diesen Namen kann dann auch darauf zugegriffen werden. Damit der Container richtig l\u00e4uft braucht es ein Passwort. Dieses kann \u00fcber -e MYSQL_ROOT_PASSWORD= gesetzt werden. Mit MYSQL_DATABASE kann eine Datenbank erstellt werden. MYSQL_USER und MYSQL_PASSWORD sind f\u00fcr das erstellen eines Standardbenutzers zust\u00e4ndig. \u00dcber MYSQL_RANDOM_ROOT_PASSWORD kann ein zuf\u00e4lliges Passwort gesetzt werden, welches in der Konsole dargestellt wird. MySQL Container starten docker run --name some-mysql -e MYSQL_ROOT_PASSWORD = my-secret-pw -d mysql:latest Der Container l\u00e4uft im Hintergrund, da -d ( --detach ) als Parameter hinterlegt wurde. Um den Status des Containers zu \u00fcberpr\u00fcfen, kann docker ps verwendet werden. Dieser Befehl zeigt alle laufenden Container an. Mit docker logs kann der Log des Containers ausgegeben werden. Dieser Befehl kann auch mit dem Namen des Containers verwendet werden. Um sich mit dme Container zu verbinden kann dieser Befehl verwendet werden: Mit Container verbinden docker exec -it some-mysql mysql -pmy-secret-pw SQL-Skripts k\u00f6nnen entweder beim Starten des Containers oder nachtr\u00e4glich ausgef\u00fchrt werden. Alle Skripts, die sich im Laufwerk docker-entrypoint-initdb.d befinden, werden beim Starten ausgef\u00fchrt. F\u00fcr das sp\u00e4tere hinzuf\u00fcgen kann das Skript in den Container kopiert werden. Dies kann mit folgendem Befehl geschehen: Datei importieren docker exec -it some-mysql mysql -pmy-secret-pw database_name < path-to-file.sql","title":"Aufgaben"},{"location":"Docker/Aufgaben/#docker-aufgaben","text":"Das hier ist eine Sammlung von verschiedenen Docker Beispielen . Sie sollten zum lernen und verstehen von Docker behilflich sein.","title":"Docker-Aufgaben"},{"location":"Docker/Aufgaben/#whalesay","text":"Cowsay ist ein Linux Spiel , welches eine Kuh auf dem Bildschirm ausgibt. Diese Kuh kann einen Text sagen. Das Spiel ist sehr beliebt und wird in vielen Linux Distributionen mitgeliefert. Es gibt auch eine Docker Image f\u00fcr Whalesay. Dieses Image ist eine Modifizierung von Cowsay, welche einen Wal ausgibt. Whalesay ausf\u00fchren Ausgabe Der letzte Parameter ist der Text, welcher ausgegeben wird docker run docker/whalesay cowsay \"Hey! Gef\u00e4llt dir diese Doku?\" ______________________________ < Hey! Gef\u00e4llt dir diese Doku? > ------------------------------ \\ \\ \\ ## . ## ## ## == ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ === ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~ \\______ o __/ \\ \\ __/ \\____\\______/","title":"Whalesay"},{"location":"Docker/Aufgaben/#mysql","text":"MySQL ist eine Datenbank, welche in vielen Projekten verwendet wird. Es gibt ein Docker Image f\u00fcr MySQL. Dieses Image kann verwendet werden, um eine MySQL Datenbank zu starten. Wie die meisten Docker Images kann das Neuste mit dem Tag latest verwendet werden. So ist sichergestellt, dass immer die neuste und sicherste Version verwendet wird. Mithilfe von Umgebungsvariablen wird MySQL konfiguriert. Mithilfe von -e K\u00f6nnen diese Variablen gesetzt werden. Wenn nicht gen\u00fcgend gesetzt sind, dann wird ein Fehler ausgegeben. Der Parameter --name besagt wie der Container heissen soll. \u00dcber diesen Namen kann dann auch darauf zugegriffen werden. Damit der Container richtig l\u00e4uft braucht es ein Passwort. Dieses kann \u00fcber -e MYSQL_ROOT_PASSWORD= gesetzt werden. Mit MYSQL_DATABASE kann eine Datenbank erstellt werden. MYSQL_USER und MYSQL_PASSWORD sind f\u00fcr das erstellen eines Standardbenutzers zust\u00e4ndig. \u00dcber MYSQL_RANDOM_ROOT_PASSWORD kann ein zuf\u00e4lliges Passwort gesetzt werden, welches in der Konsole dargestellt wird. MySQL Container starten docker run --name some-mysql -e MYSQL_ROOT_PASSWORD = my-secret-pw -d mysql:latest Der Container l\u00e4uft im Hintergrund, da -d ( --detach ) als Parameter hinterlegt wurde. Um den Status des Containers zu \u00fcberpr\u00fcfen, kann docker ps verwendet werden. Dieser Befehl zeigt alle laufenden Container an. Mit docker logs kann der Log des Containers ausgegeben werden. Dieser Befehl kann auch mit dem Namen des Containers verwendet werden. Um sich mit dme Container zu verbinden kann dieser Befehl verwendet werden: Mit Container verbinden docker exec -it some-mysql mysql -pmy-secret-pw SQL-Skripts k\u00f6nnen entweder beim Starten des Containers oder nachtr\u00e4glich ausgef\u00fchrt werden. Alle Skripts, die sich im Laufwerk docker-entrypoint-initdb.d befinden, werden beim Starten ausgef\u00fchrt. F\u00fcr das sp\u00e4tere hinzuf\u00fcgen kann das Skript in den Container kopiert werden. Dies kann mit folgendem Befehl geschehen: Datei importieren docker exec -it some-mysql mysql -pmy-secret-pw database_name < path-to-file.sql","title":"MySQL"},{"location":"Docker/Start/","tags":["Docker"],"text":"Docker # Docker macht die Entwicklung effizient und vorhersehbar. Es nimmt repetitive, banale Konfigurationsaufgaben ab und wird w\u00e4hrend des gesamten Entwicklungslebenszyklus f\u00fcr eine schnelle, einfache, portable und isolierte Entwicklungsumgebung eingesetzt - auf dem Desktop und in der Cloud. Die umfassende End-to-End-Plattform von Docker umfasst Benutzeroberfl\u00e4chen, Befehlszeilen (CLIs), APIs und Sicherheitsfunktionen, die so konzipiert sind, dass sie \u00fcber den gesamten Lebenszyklus der Entwicklungsumgebung hinweg zusammenarbeiten. Durch die vielen Vorteile von Docker ist es m\u00f6glich, eine Entwicklungsumgebung zu erstellen, die sich auf einem Desktop und einem Server gleich verhaltet. Originaltext von Docker Docker File # Docker kann Images automatisch erstellen, indem es die Anweisungen aus einem Dockerfile einliest. Ein Dockerfile enth\u00e4lt Befehle, die ein Nutzer auf der Befehlszeile aufrufen k\u00f6nnte, um ein Image zusammenzustellen. Es ist somit ein Bauplan f\u00fcr ein Docker Image. \u00dcber den Befehl docker build . wird ein Image zusammengebaut. Beispiel Dockerfile FROM php:7.0-apache COPY public/ /var/www/html/ COPY guiadmin/ /var/www/html/guiadmin RUN docker-php-ext-install pdo pdo_mysql Docker Compose # Docker Compose ist die CLI , mit welcher eine einfache Konfiguration f\u00fcr Docker erstellt werden kann. Sie enth\u00e4lt eine Liste von Docker-Komponenten, die in einem Docker-Container ausgef\u00fchrt werden. Eine Docker-Komponente ist ein Docker-Image, welches eine Anwendung enth\u00e4lt. Die Konfigurationsdatei ist in yaml geschrieben und k\u00f6nnte wie folgt aussehen: Docker Compose Beispiel Konfiguration version : \"3.x\" # (1) services : # (2) php : # (3) build : ./php # (4) restart : always # (5) ports : # (6) - 8008:80 mysql : image : mysql:8 # (7) ports : - 3306:3306 command : \"start\" \"/c\" \"internet.exe\" # (8) environment : # (9) MYSQL_USER : user volumes : # (10) - ./app:/var/www/html Zu Beginn sollte die Version von Docker Compose angegeben werden. Ansonsten kann es bei Versionsunterschiede zu unterschiedlichen Ergebnissen kommen. Unter services werden die unterschiedlichen Aufgaben angegeben. Hier kann der Name des Containers angegeben werden. Dieser wird zum Identifizieren des Containers verwendet. Gleichzeitig ist der Servicename auch der Hostname . Unter dieser Option kann der Pfad zum Dockerfile angegeben werden. (Optional) Mit dieser Option kann festgelegt werden, wie der Container gestartet werden soll und was bei einem Absturz geschehen sollte. M\u00f6gliche Werte sind no , on-failure , always und unless-stopped . Interne Ports m\u00fcssen mit dem Host verkn\u00fcpft werden. Dies geschieht mit dem Syntax host:container . Der Host ist der Port auf dem Hostsystem, der Container ist der Port im Container. Docker Files m\u00fcssen nicht von Hand geschrieben werden. Es gibt bereits vorgegebene Images , welche voll funktionsf\u00e4hig sind. Manchmal ist es n\u00f6tig einen Befehl beim starten eines Containers auszuf\u00fchren. Mithilfe von Environment Variablen k\u00f6nnen Konfigurationen und Werte gesetzt werden. Mit dieser Option k\u00f6nnen Daten zwischen Host und Container geteilt werden. Der Pfad auf dem Hostsystem muss mit dem Pfad im Container angegeben werden. Dies geschieht mit der Syntax host:container . Befehle # Die Container k\u00f6nnen anhand dieser Konfiguration \u00fcber den Befehl docker compose up gestartet werden. Mit dem Befehl docker compose down k\u00f6nnen die Container wieder heruntergefahren werden. Wenn der Container \u00fcber Ctrl + C gestoppt wird, dann wird der aktuelle Stand gespeichert. Laufende Images k\u00f6nnen \u00fcber den Befehl docker compose images ausgeben werden. Dort sieht man den Namen und die Id des Containers. \u00dcber die ID k\u00f6nnen dann weitere Werte ausgeben werden. Mit dem Befehl docker compose ps k\u00f6nnen die Laufwerke, Ports und Service der laufenden Container ausgegeben werden. Alle installierten Images k\u00f6nnen mit docker images aufgelistet werden. YAML # YAML ist ein Dateiformat, welches strukturiert Daten speichert. Es ist ein Markup Language , welches in der Regel f\u00fcr Konfigurationsdateien verwendet wird. YAML ist ein Indentation Based Markup Language. Das bedeutet, dass die Einr\u00fcckung der Zeilen eine Rolle spielt. Die Einr\u00fcckung wird mit Leerzeichen oder Tabs gemacht. Die Einr\u00fcckung kann beliebig sein, solange sie konsistent ist. Es wird nach einem Objektorientierten-Key-Value-Prinzip gearbeitet. Eingegebene Werte k\u00f6nnen gleich beim Schreiben validiert werden. Container-Virtualisierung # Das Verlangen nach einer effizienten und sicheren Entwicklungsumgebung , welche betriebssystemunabh\u00e4ngig und ohne Probleme konfigurierbar ist, sollte mit Docker behoben werden. Mithilfe von Virtualisierung wird eine virtuelle Maschine erstellt, welche eine eigene Hardwareumgebung besitzt. Diese Umgebung kann mit einem Betriebssystem und einer Anwendung konfiguriert werden. Docker ist eine Alternative zu Virtualisierung . Es ist eine Software, welche die Anwendung in einen Container packt und diese Container auf einem Hostsystem ausf\u00fchrt. Docker ist somit eine Art Virtualisierung, jedoch ohne Hardwarevirtualisierung .","title":"\u00dcbersicht"},{"location":"Docker/Start/#docker","text":"Docker macht die Entwicklung effizient und vorhersehbar. Es nimmt repetitive, banale Konfigurationsaufgaben ab und wird w\u00e4hrend des gesamten Entwicklungslebenszyklus f\u00fcr eine schnelle, einfache, portable und isolierte Entwicklungsumgebung eingesetzt - auf dem Desktop und in der Cloud. Die umfassende End-to-End-Plattform von Docker umfasst Benutzeroberfl\u00e4chen, Befehlszeilen (CLIs), APIs und Sicherheitsfunktionen, die so konzipiert sind, dass sie \u00fcber den gesamten Lebenszyklus der Entwicklungsumgebung hinweg zusammenarbeiten. Durch die vielen Vorteile von Docker ist es m\u00f6glich, eine Entwicklungsumgebung zu erstellen, die sich auf einem Desktop und einem Server gleich verhaltet. Originaltext von Docker","title":"Docker "},{"location":"Docker/Start/#docker-file","text":"Docker kann Images automatisch erstellen, indem es die Anweisungen aus einem Dockerfile einliest. Ein Dockerfile enth\u00e4lt Befehle, die ein Nutzer auf der Befehlszeile aufrufen k\u00f6nnte, um ein Image zusammenzustellen. Es ist somit ein Bauplan f\u00fcr ein Docker Image. \u00dcber den Befehl docker build . wird ein Image zusammengebaut. Beispiel Dockerfile FROM php:7.0-apache COPY public/ /var/www/html/ COPY guiadmin/ /var/www/html/guiadmin RUN docker-php-ext-install pdo pdo_mysql","title":"Docker File"},{"location":"Docker/Start/#docker-compose","text":"Docker Compose ist die CLI , mit welcher eine einfache Konfiguration f\u00fcr Docker erstellt werden kann. Sie enth\u00e4lt eine Liste von Docker-Komponenten, die in einem Docker-Container ausgef\u00fchrt werden. Eine Docker-Komponente ist ein Docker-Image, welches eine Anwendung enth\u00e4lt. Die Konfigurationsdatei ist in yaml geschrieben und k\u00f6nnte wie folgt aussehen: Docker Compose Beispiel Konfiguration version : \"3.x\" # (1) services : # (2) php : # (3) build : ./php # (4) restart : always # (5) ports : # (6) - 8008:80 mysql : image : mysql:8 # (7) ports : - 3306:3306 command : \"start\" \"/c\" \"internet.exe\" # (8) environment : # (9) MYSQL_USER : user volumes : # (10) - ./app:/var/www/html Zu Beginn sollte die Version von Docker Compose angegeben werden. Ansonsten kann es bei Versionsunterschiede zu unterschiedlichen Ergebnissen kommen. Unter services werden die unterschiedlichen Aufgaben angegeben. Hier kann der Name des Containers angegeben werden. Dieser wird zum Identifizieren des Containers verwendet. Gleichzeitig ist der Servicename auch der Hostname . Unter dieser Option kann der Pfad zum Dockerfile angegeben werden. (Optional) Mit dieser Option kann festgelegt werden, wie der Container gestartet werden soll und was bei einem Absturz geschehen sollte. M\u00f6gliche Werte sind no , on-failure , always und unless-stopped . Interne Ports m\u00fcssen mit dem Host verkn\u00fcpft werden. Dies geschieht mit dem Syntax host:container . Der Host ist der Port auf dem Hostsystem, der Container ist der Port im Container. Docker Files m\u00fcssen nicht von Hand geschrieben werden. Es gibt bereits vorgegebene Images , welche voll funktionsf\u00e4hig sind. Manchmal ist es n\u00f6tig einen Befehl beim starten eines Containers auszuf\u00fchren. Mithilfe von Environment Variablen k\u00f6nnen Konfigurationen und Werte gesetzt werden. Mit dieser Option k\u00f6nnen Daten zwischen Host und Container geteilt werden. Der Pfad auf dem Hostsystem muss mit dem Pfad im Container angegeben werden. Dies geschieht mit der Syntax host:container .","title":"Docker Compose"},{"location":"Docker/Start/#befehle","text":"Die Container k\u00f6nnen anhand dieser Konfiguration \u00fcber den Befehl docker compose up gestartet werden. Mit dem Befehl docker compose down k\u00f6nnen die Container wieder heruntergefahren werden. Wenn der Container \u00fcber Ctrl + C gestoppt wird, dann wird der aktuelle Stand gespeichert. Laufende Images k\u00f6nnen \u00fcber den Befehl docker compose images ausgeben werden. Dort sieht man den Namen und die Id des Containers. \u00dcber die ID k\u00f6nnen dann weitere Werte ausgeben werden. Mit dem Befehl docker compose ps k\u00f6nnen die Laufwerke, Ports und Service der laufenden Container ausgegeben werden. Alle installierten Images k\u00f6nnen mit docker images aufgelistet werden.","title":"Befehle"},{"location":"Docker/Start/#yaml","text":"YAML ist ein Dateiformat, welches strukturiert Daten speichert. Es ist ein Markup Language , welches in der Regel f\u00fcr Konfigurationsdateien verwendet wird. YAML ist ein Indentation Based Markup Language. Das bedeutet, dass die Einr\u00fcckung der Zeilen eine Rolle spielt. Die Einr\u00fcckung wird mit Leerzeichen oder Tabs gemacht. Die Einr\u00fcckung kann beliebig sein, solange sie konsistent ist. Es wird nach einem Objektorientierten-Key-Value-Prinzip gearbeitet. Eingegebene Werte k\u00f6nnen gleich beim Schreiben validiert werden.","title":"YAML"},{"location":"Docker/Start/#container-virtualisierung","text":"Das Verlangen nach einer effizienten und sicheren Entwicklungsumgebung , welche betriebssystemunabh\u00e4ngig und ohne Probleme konfigurierbar ist, sollte mit Docker behoben werden. Mithilfe von Virtualisierung wird eine virtuelle Maschine erstellt, welche eine eigene Hardwareumgebung besitzt. Diese Umgebung kann mit einem Betriebssystem und einer Anwendung konfiguriert werden. Docker ist eine Alternative zu Virtualisierung . Es ist eine Software, welche die Anwendung in einen Container packt und diese Container auf einem Hostsystem ausf\u00fchrt. Docker ist somit eine Art Virtualisierung, jedoch ohne Hardwarevirtualisierung .","title":"Container-Virtualisierung"},{"location":"LB1/Testprotokoll/","text":"Testf\u00e4lle # Ein Testfall beschreibt eine elementare Funktionalit\u00e4t , welche getestet werden soll. Er hat eine Beschreibung und eine Voraussetzung. Die Voraussetzung ist eine Bedingung, die erf\u00fcllt sein muss, damit der Testfall ausgef\u00fchrt werden kann. Die Schritte zum Ausf\u00fchren werden auch mitgegeben, damit es zu keinen Missverst\u00e4ndnissen kommt. Aus diesem Grund m\u00fcssen diese Schritte exakt ausgef\u00fchrt werden. Hier werden alle Testf\u00e4lle, welche in diesem Projekt getestet werden m\u00fcssen, festgehalten. Am Ende der Seite befindet sich ein Protokoll der Resultate. Ich habe versucht End-To-End-Tests zu schreiben, jedoch ist dies mit Containern schwieriger und viel aufw\u00e4ndiger als ich dachte. Aus diesem Grund wird dies nicht mehr Teil der Abgabe sein, jedoch werde ich es in den Ferien noch versuchen. Ich habe bereits ein paar Tests geschrieben, welche aber nicht funktionieren. Alle Testf\u00e4lle # Routing # ID/Bezeichnung R-001 Beschreibung Der Benutzer wird zur Startseite weitergeleitet, wenn er das Dashboard \u00f6ffnet Testvoraussetzung Nicht angemeldet Testschritte Dashboard ( http://localhost:port/dashboard ) aufrufen Erwartetes Ergebnis Startseite wird angezeigt ID/Bezeichnung R-002 Beschreibung Der Benutzer wird zum Dashboard weitergeleitet, wenn er die Startseite \u00f6ffnet Testvoraussetzung Angemeldet Testschritte Basisurl ( http://localhost:port/ ) aufrufen Erwartetes Ergebnis Dashboard wird angezeigt ID/Bezeichnung R-003 Beschreibung Unbekannter Controller zeigt 404-Seite an Testvoraussetzung Testschritte Unbekannte URL ( http://localhost:port/asdf123 ) aufrufen Erwartetes Ergebnis 404-Seite anzeigen ID/Bezeichnung R-004 Beschreibung Unbekannter Fehler Testvoraussetzung Testschritte Redis / Logstash Container beenden Controller \u00f6ffnen Erwartetes Ergebnis 500-Seite zeigt ohne Meldung an ID/Bezeichnung R-005 Beschreibung Abgefangener Fehler Testvoraussetzung Angemeldet Testschritte Datenbanktabelle l\u00f6schen Dashboard \u00f6ffnen Erwartetes Ergebnis 500-Seite zeigt selbstgeschriebene Meldung an ID/Bezeichnung R-006 Beschreibung Anmeldeseite sollte weiterleiten Testvoraussetzung Angemeldet Testschritte Anmelden Sign In & Sign Up \u00f6ffnen Erwartetes Ergebnis Benutzer wird zu Dashboard weitergeleitet Sign Up # ID/Bezeichnung SU-001 Beschreibung Neuer Account anlegen Testvoraussetzung Benutzer hat kein Account Testschritte Sign Up-Seite \u00f6ffnen Daten eingeben Sign Up-Knopf klicken Erwartetes Ergebnis Account wird angelegt und (SU-002 / SU-003) Popup f\u00fcr die Serifizierungsemail wird angezeigt ID/Bezeichnung SU-002 Beschreibung Bild als Base64-String speichern Testvoraussetzung JavaScript aktiviert & SU-001 Testschritte Account anlegen Bild wird als Base64 an Controller \u00fcbergeben Erwartetes Ergebnis Base64-String ist in Datenbank gespeichert ID/Bezeichnung SU-003 Beschreibung Verifizierung Email Testvoraussetzung SendGrid l\u00e4uft & Limit nicht \u00fcberschritten Testschritte Account anlegen (SU-001) Email empfangen Link klicken Verifizierung wird best\u00e4tigt Erwartetes Ergebnis Email wird versendet Name des Benutzer wird eingef\u00fcgt Verifizierungslink ist hinterlegt Benutzer wird als Verifiziert markiert ID/Bezeichnung SU-004 Beschreibung Ung\u00fcltiger Verifizierungstoken Testvoraussetzung SU-003 Testschritte Zeichen zu Verifizierungstoken hinzuf\u00fcgen Token in Controller einf\u00fcgen Erwartetes Ergebnis Invalid Verification wird angezeigt ID/Bezeichnung SU-005 Beschreibung Email bereits verwendet Testvoraussetzung Benutzer mit Email existiert bereits Testschritte Benutzer mit Email anlegen Abmelden Neuer Benutzer mit selber Email anlegen Erwartetes Ergebnis Validierungsmeldung wird angezeigt ID/Bezeichnung SU-006 Beschreibung Password mit Salt versehen Testvoraussetzung Datenbank l\u00e4uft Testschritte Sign Up-Seite \u00f6ffnen Daten eingeben Speichern In Datenbank nachschauen Erwartetes Ergebnis Password wird mit Salt versehen Salt ist f\u00fcr jeder Benutzer anders Sign In # ID/Bezeichnung SI-001 Beschreibung Anmelden Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Daten eingeben Sign In-Knopf klicken Erwartetes Ergebnis Benutzer wird angemeldet Benutzer wird auf Dashboard weitergeleitet ID/Bezeichnung SI-002 Beschreibung Anmelden mit falschen Daten Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Falsche Daten eingeben Sign In-Knopf klicken Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer wird nicht angemeldet Benutzer wird nicht auf Dashboard weitergeleitet ID/Bezeichnung SI-003 Beschreibung Anmelden mit falschem Password Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Falsches Password eingeben Sign In-Knopf klicken Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer wird nicht angemeldet Benutzer wird nicht auf Dashboard weitergeleitet Passwortzur\u00fccksetzung wird angezeigt ID/Bezeichnung SI-004 Beschreibung Passwort zur\u00fccksetzen Testvoraussetzung Benutzer hat Account Testschritte Passwort zur\u00fccksetzen Email empfangen Link klicken Neues Passwort eingeben Passwort zur\u00fccksetzen Erwartetes Ergebnis Passwort wird zur\u00fcckgesetzt Benutzer wird zur Anmeldung weitergeleitet Profil bearbeiten # ID/Bezeichnung P-001 Beschreibung Profil bearbeiten Testvoraussetzung Benutzer hat Account & Angemeldet Testschritte Profil bearbeiten Daten \u00e4ndern Speichern Erwartetes Ergebnis Daten werden ge\u00e4ndert ID/Bezeichnung P-002 Beschreibung Benachrichtigungen deaktivieren Testvoraussetzung Benutzer hat Account & Angemeldet Testschritte Profil bearbeiten Benachrichtigungen deaktivieren Speichern Projektstatus \u00e4ndern Erwartetes Ergebnis Benachrichtigungen werden deaktiviert Keine Email wird versendet Projekt anlegen # ID/Bezeichnung PA-001 Beschreibung Projekt anlegen Testvoraussetzung Angemeldet Testschritte Projekt anlegen Generelle Daten eingeben Aussehen konfigurieren Struktur konfigurieren Speichern Erwartetes Ergebnis Projekt wird angelegt Benutzer wird auf Dashboard weitergeleitet Projekt wird auf Dashboard angezeigt Projekt hat den Status in progress ID/Bezeichnung PA-002 Beschreibung Projekt anlegen ohne Titel Testvoraussetzung Angemeldet Testschritte Projekt anlegen Generelle Daten eingeben Titel leer lassen Speichern Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer kann nicht zu n\u00e4chstem Schritt wechseln Benutzer bleibt auf Projekt anlegen ID/Bezeichnung PA-003 Beschreibung Projekttitel mehrmals verwenden Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Neues Projekt mit gleichem Titel verwenden Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer kann nicht zu n\u00e4chstem Schritt wechseln Benutzer bleibt auf Projekt anlegen ID/Bezeichnung PA-004 Beschreibung Projekttitel einzigartig pro Benutzer Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Benutzer wechseln Neues Projekt mit gleichem Titel anlegen Erwartetes Ergebnis Projekt kann angelegt werden ID/Bezeichnung PA-005 Beschreibung Struktur \u00fcber Datei Viewer anlegen Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Ordner anlegen Neuer Datei anlegen Speichern Erwartetes Ergebnis Struktur wird angelegt ID/Bezeichnung PA-006 Beschreibung Datei kann keine Kinder haben Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Datei anlegen Rechtsklick auf Datei Viewer Erwartetes Ergebnis Ordner wird nicht als Auswahl angezeigt ID/Bezeichnung PA-007 Beschreibung Ordnername muss einzigartig sein Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Ordner anlegen Neuer Ordner mit selbem Namen anlegen Erwartetes Ergebnis Ordner kann nicht gespeichert werden ID/Bezeichnung PA-008 Beschreibung Projekt wird auf Dashboard angezeigt Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Dashboard \u00f6ffnen Erwartetes Ergebnis Projekt wird angezeigt ID/Bezeichnung PA-009 Beschreibung Weiter mit Validierungsfehler Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Feld mit zu vielen Zeichen bef\u00fcllen Weiter dr\u00fccken Erwartetes Ergebnis Validierungsfehler werden angezeigt Benutzer bleibt auf gleicher Seite Daten werden nicht gespeichert Projekt bearbeiten # ID/Bezeichnung PB-001 Beschreibung Projekt bearbeiten Testvoraussetzung Angemeldet Testschritte Projekt bearbeiten Titel \u00e4ndern Speichern Erwartetes Ergebnis Projekt wird bearbeitet Projekt hat neuen Titel ID/Bezeichnung PB-002 Beschreibung Status wird zur\u00fcckgesetzt Testvoraussetzung Angemeldet Testschritte Status \u00e4ndern Speichern Projekt bearbeiten Titel \u00e4ndern Speichern Erwartetes Ergebnis Projekt hat Status in progress ID/Bezeichnung PB-003 Beschreibung Schritt zur\u00fcck machen Testvoraussetzung Angemeldet Testschritte Projekt bearbeiten Weiter klicken Zur\u00fcck klicken Erwartetes Ergebnis Letzter Schritt wird angezeigt Wird bei letzter Seite ausgeblendet Daten sind von beiden Seiten eingegeben Projekt l\u00f6schen # ID/Bezeichnung PL-001 Beschreibung Projekt l\u00f6schen best\u00e4tigen Testvoraussetzung Angemeldet Testschritte Projekt l\u00f6schen Best\u00e4tigen Erwartetes Ergebnis Projekt wird gel\u00f6scht Best\u00e4tigungsmeldung wird angezeigt ID/Bezeichnung PL-002 Beschreibung Projekt l\u00f6schen abbrechen Testvoraussetzung Angemeldet Testschritte Projekt l\u00f6schen Ablehnen Erwartetes Ergebnis Projekt bleibt bestehen Best\u00e4tigungsmeldung wird angezeigt ID/Bezeichnung PL-003 Beschreibung Projekt nur von normalen Benutzern l\u00f6schen Testvoraussetzung Angemeldet & Admin Testschritte Dashboard \u00f6ffnen Erwartetes Ergebnis L\u00f6schknopf ist nicht sichtbar Best\u00e4tigen # ID/Bezeichnung B-001 Beschreibung Projekt best\u00e4tigen Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt best\u00e4tigen-Knopf klicken Status zu Akzeptiert \u00e4ndern Speichern Erwartetes Ergebnis Projekt wird best\u00e4tigt Status wird auf accepted ID/Bezeichnung B-002 Beschreibung Projekt ablehnen Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt ablehnen Status zu Abgelehnt Speichern Erwartetes Ergebnis Projekt wird abgelehnt Status wird auf rejected ID/Bezeichnung B-003 Beschreibung Daten k\u00f6nnen nicht bearbeitet werden Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt Best\u00e4tigung \u00f6ffnen Daten bearbeiten Speichern Erwartetes Ergebnis Daten werden nicht gespeichert Felder sind deaktiviert ID/Bezeichnung B-004 Beschreibung Best\u00e4tigung nur f\u00fcr Admins m\u00f6glich Testvoraussetzung Angemeldet und ist kein Admin Testschritte Projekt bearbeiten Best\u00e4tigung \u00f6ffnen Erwartetes Ergebnis Dropdown ist nicht ausw\u00e4hlbar Kommentar kann nicht bearbeitet werden Download # ID/Bezeichnung D-001 Beschreibung Projekt als ZIP herunterladen Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Dashboard \u00f6ffnen Download-Knopf klicken Erwartetes Ergebnis ZIP-Datei wird heruntergeladen ID/Bezeichnung D-002 Beschreibung Projekt wird mit Daten bef\u00fcllt Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Dashboard \u00f6ffnen Download-Knopf klicken Erwartetes Ergebnis ZIP-Datei wird heruntergeladen ZIP-Datei enth\u00e4lt Daten Dateien sind anhand der Vorlage bef\u00fcllt ID/Bezeichnung D-003 Beschreibung Nur im Status accepted herunterladbar Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Status auf rejected setzten (B-002) Dashboard \u00f6ffnen Erwartetes Ergebnis Download-Knopf wird nicht angezeigt Admin Dashboard # ID/Bezeichnung AD-001 Beschreibung Option Kibana wird nur f\u00fcr Admins angezeigt Testvoraussetzung Angemeldet & ist kein Admin Testschritte Dashboard \u00f6ffnen Klick auf Profilbild Erwartetes Ergebnis Option Kibana wird nicht angezeigt ID/Bezeichnung AD-002 Beschreibung Alle Projekte werden angezeigt Testvoraussetzung Account erstellt Testschritte Projekt als normaler Benutzer erstellen Account zu Admin wechseln Dashboard \u00f6ffnen Erwartetes Ergebnis Alle Projekte von allen Benutzern werden angezeigt Allgemeines # ID/Bezeichnung A-001 Beschreibung Logs werden f\u00fcr jede Aktion erstellt Testvoraussetzung Account existiert Testschritte Dashboard \u00f6ffnen Aktion durchf\u00fchren Erwartetes Ergebnis Logs werden erstellt Alle Logs werden in Datei gespeichert Wichtige Logs werden in Elastic-Search gespeichert ID/Bezeichnung A-002 Beschreibung Redis als Session speicher Testvoraussetzung Redis Container l\u00e4uft Testschritte Anmelden Verbindung zu Redisserver \u00f6ffnen Tabellen auslesen Erwartetes Ergebnis Session ist in Redis gespeichert Testprotokoll # Routing # ID Status Testdatum Tester Bemerkung R-001 \u2714\ufe0f 23.12.2022 M. Schumacher Repositories eventuell trotzdem erstellt R-002 \u2714\ufe0f 23.12.2022 M. Schumacher Repositories eventuell trotzdem erstellt R-003 \u2714\ufe0f 23.12.2022 M. Schumacher R-004 \u2714\ufe0f 23.12.2022 M. Schumacher Es wird kein Fehlercode angezeigt R-005 \u2714\ufe0f 23.12.2022 M. Schumacher R-006 \u2714\ufe0f 23.12.2022 M. Schumacher Sign Up # ID Status Testdatum Tester Bemerkung SU-001 \u2714\ufe0f 23.12.2022 M. Schumacher SU-002 \u2714\ufe0f 23.12.2022 M. Schumacher Bild mithilfe von JavaScript umgewandelt SU-003 \u2714\ufe0f 23.12.2022 M. Schumacher SU-004 \u2714\ufe0f 23.12.2022 M. Schumacher SU-005 \u2714\ufe0f 23.12.2022 M. Schumacher SU-006 \u2714\ufe0f 23.12.2022 M. Schumacher Salt musste gek\u00fcrzt werden Sign In # ID Status Testdatum Tester Bemerkung SI-001 \u2714\ufe0f 23.12.2022 M. Schumacher SI-002 \u2714\ufe0f 23.12.2022 M. Schumacher SI-003 \u2714\ufe0f 23.12.2022 M. Schumacher SI-004 \u2714\ufe0f 23.12.2022 M. Schumacher Account mit Email muss existieren Profil bearbeiten # ID Status Testdatum Tester Bemerkung P-001 \u2714\ufe0f 23.12.2022 M. Schumacher P-002 \u2714\ufe0f 23.12.2022 M. Schumacher Projekt anlegen # ID Status Testdatum Tester Bemerkung PA-001 \u2714\ufe0f 23.12.2022 M. Schumacher PA-002 \u2714\ufe0f 23.12.2022 M. Schumacher PA-003 \u2714\ufe0f 23.12.2022 M. Schumacher PA-004 \u2714\ufe0f 23.12.2022 M. Schumacher PA-005 \u2714\ufe0f 23.12.2022 M. Schumacher Datei Viewer wurde mithilfe von jsTree realisiert PA-006 \u2714\ufe0f 23.12.2022 M. Schumacher PA-007 \u2714\ufe0f 23.12.2022 M. Schumacher PA-008 \u2714\ufe0f 23.12.2022 M. Schumacher PA-009 \u2714\ufe0f 23.12.2022 M. Schumacher Projekt bearbeiten # ID Status Testdatum Tester Bemerkung PB-001 \u2714\ufe0f 23.12.2022 M. Schumacher PB-002 \u2714\ufe0f 23.12.2022 M. Schumacher PB-003 \u2714\ufe0f 23.12.2022 M. Schumacher Projekt l\u00f6schen # ID Status Testdatum Tester Bemerkung PL-001 \u2714\ufe0f 23.12.2022 M. Schumacher PL-002 \u2714\ufe0f 23.12.2022 M. Schumacher PL-003 \u2714\ufe0f 23.12.2022 M. Schumacher Best\u00e4tigen # ID Status Testdatum Tester Bemerkung B-001 \u2714\ufe0f 23.12.2022 M. Schumacher Kommentar muss angegeben werden B-002 \u2714\ufe0f 23.12.2022 M. Schumacher Kommentar muss angegeben werden B-003 \u2714\ufe0f 23.12.2022 M. Schumacher B-004 \u2714\ufe0f 23.12.2022 M. Schumacher Dashboard # ID Status Testdatum Tester Bemerkung D-001 \u2714\ufe0f 23.12.2022 M. Schumacher Wenn die Verbindung unterbrochen wird, dann kann das ZIP nicht richtig geladen werden D-002 \u2714\ufe0f 23.12.2022 M. Schumacher D-003 \u2714\ufe0f 23.12.2022 M. Schumacher D-004 \u2714\ufe0f 23.12.2022 M. Schumacher Admin Dashboard # ID Status Testdatum Tester Bemerkung AD-01 \u2714\ufe0f 23.12.2022 M. Schumacher Kibana auf einer externer URL / Container angezeigt AD-02 \u2714\ufe0f 23.12.2022 M. Schumacher Allgemeines # ID Status Testdatum Tester Bemerkung A-001 \u2714\ufe0f 23.12.2022 M. Schumacher Logs werden mit dem aktuellen Datum in Logstash\\Logs gespeichert A-002 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Testprotokoll"},{"location":"LB1/Testprotokoll/#testfalle","text":"Ein Testfall beschreibt eine elementare Funktionalit\u00e4t , welche getestet werden soll. Er hat eine Beschreibung und eine Voraussetzung. Die Voraussetzung ist eine Bedingung, die erf\u00fcllt sein muss, damit der Testfall ausgef\u00fchrt werden kann. Die Schritte zum Ausf\u00fchren werden auch mitgegeben, damit es zu keinen Missverst\u00e4ndnissen kommt. Aus diesem Grund m\u00fcssen diese Schritte exakt ausgef\u00fchrt werden. Hier werden alle Testf\u00e4lle, welche in diesem Projekt getestet werden m\u00fcssen, festgehalten. Am Ende der Seite befindet sich ein Protokoll der Resultate. Ich habe versucht End-To-End-Tests zu schreiben, jedoch ist dies mit Containern schwieriger und viel aufw\u00e4ndiger als ich dachte. Aus diesem Grund wird dies nicht mehr Teil der Abgabe sein, jedoch werde ich es in den Ferien noch versuchen. Ich habe bereits ein paar Tests geschrieben, welche aber nicht funktionieren.","title":"Testf\u00e4lle "},{"location":"LB1/Testprotokoll/#alle-testfalle","text":"","title":"Alle Testf\u00e4lle"},{"location":"LB1/Testprotokoll/#routing","text":"ID/Bezeichnung R-001 Beschreibung Der Benutzer wird zur Startseite weitergeleitet, wenn er das Dashboard \u00f6ffnet Testvoraussetzung Nicht angemeldet Testschritte Dashboard ( http://localhost:port/dashboard ) aufrufen Erwartetes Ergebnis Startseite wird angezeigt ID/Bezeichnung R-002 Beschreibung Der Benutzer wird zum Dashboard weitergeleitet, wenn er die Startseite \u00f6ffnet Testvoraussetzung Angemeldet Testschritte Basisurl ( http://localhost:port/ ) aufrufen Erwartetes Ergebnis Dashboard wird angezeigt ID/Bezeichnung R-003 Beschreibung Unbekannter Controller zeigt 404-Seite an Testvoraussetzung Testschritte Unbekannte URL ( http://localhost:port/asdf123 ) aufrufen Erwartetes Ergebnis 404-Seite anzeigen ID/Bezeichnung R-004 Beschreibung Unbekannter Fehler Testvoraussetzung Testschritte Redis / Logstash Container beenden Controller \u00f6ffnen Erwartetes Ergebnis 500-Seite zeigt ohne Meldung an ID/Bezeichnung R-005 Beschreibung Abgefangener Fehler Testvoraussetzung Angemeldet Testschritte Datenbanktabelle l\u00f6schen Dashboard \u00f6ffnen Erwartetes Ergebnis 500-Seite zeigt selbstgeschriebene Meldung an ID/Bezeichnung R-006 Beschreibung Anmeldeseite sollte weiterleiten Testvoraussetzung Angemeldet Testschritte Anmelden Sign In & Sign Up \u00f6ffnen Erwartetes Ergebnis Benutzer wird zu Dashboard weitergeleitet","title":"Routing"},{"location":"LB1/Testprotokoll/#sign-up","text":"ID/Bezeichnung SU-001 Beschreibung Neuer Account anlegen Testvoraussetzung Benutzer hat kein Account Testschritte Sign Up-Seite \u00f6ffnen Daten eingeben Sign Up-Knopf klicken Erwartetes Ergebnis Account wird angelegt und (SU-002 / SU-003) Popup f\u00fcr die Serifizierungsemail wird angezeigt ID/Bezeichnung SU-002 Beschreibung Bild als Base64-String speichern Testvoraussetzung JavaScript aktiviert & SU-001 Testschritte Account anlegen Bild wird als Base64 an Controller \u00fcbergeben Erwartetes Ergebnis Base64-String ist in Datenbank gespeichert ID/Bezeichnung SU-003 Beschreibung Verifizierung Email Testvoraussetzung SendGrid l\u00e4uft & Limit nicht \u00fcberschritten Testschritte Account anlegen (SU-001) Email empfangen Link klicken Verifizierung wird best\u00e4tigt Erwartetes Ergebnis Email wird versendet Name des Benutzer wird eingef\u00fcgt Verifizierungslink ist hinterlegt Benutzer wird als Verifiziert markiert ID/Bezeichnung SU-004 Beschreibung Ung\u00fcltiger Verifizierungstoken Testvoraussetzung SU-003 Testschritte Zeichen zu Verifizierungstoken hinzuf\u00fcgen Token in Controller einf\u00fcgen Erwartetes Ergebnis Invalid Verification wird angezeigt ID/Bezeichnung SU-005 Beschreibung Email bereits verwendet Testvoraussetzung Benutzer mit Email existiert bereits Testschritte Benutzer mit Email anlegen Abmelden Neuer Benutzer mit selber Email anlegen Erwartetes Ergebnis Validierungsmeldung wird angezeigt ID/Bezeichnung SU-006 Beschreibung Password mit Salt versehen Testvoraussetzung Datenbank l\u00e4uft Testschritte Sign Up-Seite \u00f6ffnen Daten eingeben Speichern In Datenbank nachschauen Erwartetes Ergebnis Password wird mit Salt versehen Salt ist f\u00fcr jeder Benutzer anders","title":"Sign Up"},{"location":"LB1/Testprotokoll/#sign-in","text":"ID/Bezeichnung SI-001 Beschreibung Anmelden Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Daten eingeben Sign In-Knopf klicken Erwartetes Ergebnis Benutzer wird angemeldet Benutzer wird auf Dashboard weitergeleitet ID/Bezeichnung SI-002 Beschreibung Anmelden mit falschen Daten Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Falsche Daten eingeben Sign In-Knopf klicken Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer wird nicht angemeldet Benutzer wird nicht auf Dashboard weitergeleitet ID/Bezeichnung SI-003 Beschreibung Anmelden mit falschem Password Testvoraussetzung Benutzer hat Account Testschritte Sign In-Seite \u00f6ffnen Falsches Password eingeben Sign In-Knopf klicken Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer wird nicht angemeldet Benutzer wird nicht auf Dashboard weitergeleitet Passwortzur\u00fccksetzung wird angezeigt ID/Bezeichnung SI-004 Beschreibung Passwort zur\u00fccksetzen Testvoraussetzung Benutzer hat Account Testschritte Passwort zur\u00fccksetzen Email empfangen Link klicken Neues Passwort eingeben Passwort zur\u00fccksetzen Erwartetes Ergebnis Passwort wird zur\u00fcckgesetzt Benutzer wird zur Anmeldung weitergeleitet","title":"Sign In"},{"location":"LB1/Testprotokoll/#profil-bearbeiten","text":"ID/Bezeichnung P-001 Beschreibung Profil bearbeiten Testvoraussetzung Benutzer hat Account & Angemeldet Testschritte Profil bearbeiten Daten \u00e4ndern Speichern Erwartetes Ergebnis Daten werden ge\u00e4ndert ID/Bezeichnung P-002 Beschreibung Benachrichtigungen deaktivieren Testvoraussetzung Benutzer hat Account & Angemeldet Testschritte Profil bearbeiten Benachrichtigungen deaktivieren Speichern Projektstatus \u00e4ndern Erwartetes Ergebnis Benachrichtigungen werden deaktiviert Keine Email wird versendet","title":"Profil bearbeiten"},{"location":"LB1/Testprotokoll/#projekt-anlegen","text":"ID/Bezeichnung PA-001 Beschreibung Projekt anlegen Testvoraussetzung Angemeldet Testschritte Projekt anlegen Generelle Daten eingeben Aussehen konfigurieren Struktur konfigurieren Speichern Erwartetes Ergebnis Projekt wird angelegt Benutzer wird auf Dashboard weitergeleitet Projekt wird auf Dashboard angezeigt Projekt hat den Status in progress ID/Bezeichnung PA-002 Beschreibung Projekt anlegen ohne Titel Testvoraussetzung Angemeldet Testschritte Projekt anlegen Generelle Daten eingeben Titel leer lassen Speichern Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer kann nicht zu n\u00e4chstem Schritt wechseln Benutzer bleibt auf Projekt anlegen ID/Bezeichnung PA-003 Beschreibung Projekttitel mehrmals verwenden Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Neues Projekt mit gleichem Titel verwenden Erwartetes Ergebnis Validierungsmeldung wird angezeigt Benutzer kann nicht zu n\u00e4chstem Schritt wechseln Benutzer bleibt auf Projekt anlegen ID/Bezeichnung PA-004 Beschreibung Projekttitel einzigartig pro Benutzer Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Benutzer wechseln Neues Projekt mit gleichem Titel anlegen Erwartetes Ergebnis Projekt kann angelegt werden ID/Bezeichnung PA-005 Beschreibung Struktur \u00fcber Datei Viewer anlegen Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Ordner anlegen Neuer Datei anlegen Speichern Erwartetes Ergebnis Struktur wird angelegt ID/Bezeichnung PA-006 Beschreibung Datei kann keine Kinder haben Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Datei anlegen Rechtsklick auf Datei Viewer Erwartetes Ergebnis Ordner wird nicht als Auswahl angezeigt ID/Bezeichnung PA-007 Beschreibung Ordnername muss einzigartig sein Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Rechtsklick auf Datei Viewer Neuer Ordner anlegen Neuer Ordner mit selbem Namen anlegen Erwartetes Ergebnis Ordner kann nicht gespeichert werden ID/Bezeichnung PA-008 Beschreibung Projekt wird auf Dashboard angezeigt Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Dashboard \u00f6ffnen Erwartetes Ergebnis Projekt wird angezeigt ID/Bezeichnung PA-009 Beschreibung Weiter mit Validierungsfehler Testvoraussetzung Angemeldet Testschritte Projekt anlegen (PA-001) Feld mit zu vielen Zeichen bef\u00fcllen Weiter dr\u00fccken Erwartetes Ergebnis Validierungsfehler werden angezeigt Benutzer bleibt auf gleicher Seite Daten werden nicht gespeichert","title":"Projekt anlegen"},{"location":"LB1/Testprotokoll/#projekt-bearbeiten","text":"ID/Bezeichnung PB-001 Beschreibung Projekt bearbeiten Testvoraussetzung Angemeldet Testschritte Projekt bearbeiten Titel \u00e4ndern Speichern Erwartetes Ergebnis Projekt wird bearbeitet Projekt hat neuen Titel ID/Bezeichnung PB-002 Beschreibung Status wird zur\u00fcckgesetzt Testvoraussetzung Angemeldet Testschritte Status \u00e4ndern Speichern Projekt bearbeiten Titel \u00e4ndern Speichern Erwartetes Ergebnis Projekt hat Status in progress ID/Bezeichnung PB-003 Beschreibung Schritt zur\u00fcck machen Testvoraussetzung Angemeldet Testschritte Projekt bearbeiten Weiter klicken Zur\u00fcck klicken Erwartetes Ergebnis Letzter Schritt wird angezeigt Wird bei letzter Seite ausgeblendet Daten sind von beiden Seiten eingegeben","title":"Projekt bearbeiten"},{"location":"LB1/Testprotokoll/#projekt-loschen","text":"ID/Bezeichnung PL-001 Beschreibung Projekt l\u00f6schen best\u00e4tigen Testvoraussetzung Angemeldet Testschritte Projekt l\u00f6schen Best\u00e4tigen Erwartetes Ergebnis Projekt wird gel\u00f6scht Best\u00e4tigungsmeldung wird angezeigt ID/Bezeichnung PL-002 Beschreibung Projekt l\u00f6schen abbrechen Testvoraussetzung Angemeldet Testschritte Projekt l\u00f6schen Ablehnen Erwartetes Ergebnis Projekt bleibt bestehen Best\u00e4tigungsmeldung wird angezeigt ID/Bezeichnung PL-003 Beschreibung Projekt nur von normalen Benutzern l\u00f6schen Testvoraussetzung Angemeldet & Admin Testschritte Dashboard \u00f6ffnen Erwartetes Ergebnis L\u00f6schknopf ist nicht sichtbar","title":"Projekt l\u00f6schen"},{"location":"LB1/Testprotokoll/#bestatigen","text":"ID/Bezeichnung B-001 Beschreibung Projekt best\u00e4tigen Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt best\u00e4tigen-Knopf klicken Status zu Akzeptiert \u00e4ndern Speichern Erwartetes Ergebnis Projekt wird best\u00e4tigt Status wird auf accepted ID/Bezeichnung B-002 Beschreibung Projekt ablehnen Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt ablehnen Status zu Abgelehnt Speichern Erwartetes Ergebnis Projekt wird abgelehnt Status wird auf rejected ID/Bezeichnung B-003 Beschreibung Daten k\u00f6nnen nicht bearbeitet werden Testvoraussetzung Angemeldet und ist Admin Testschritte Projekt Best\u00e4tigung \u00f6ffnen Daten bearbeiten Speichern Erwartetes Ergebnis Daten werden nicht gespeichert Felder sind deaktiviert ID/Bezeichnung B-004 Beschreibung Best\u00e4tigung nur f\u00fcr Admins m\u00f6glich Testvoraussetzung Angemeldet und ist kein Admin Testschritte Projekt bearbeiten Best\u00e4tigung \u00f6ffnen Erwartetes Ergebnis Dropdown ist nicht ausw\u00e4hlbar Kommentar kann nicht bearbeitet werden","title":"Best\u00e4tigen"},{"location":"LB1/Testprotokoll/#download","text":"ID/Bezeichnung D-001 Beschreibung Projekt als ZIP herunterladen Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Dashboard \u00f6ffnen Download-Knopf klicken Erwartetes Ergebnis ZIP-Datei wird heruntergeladen ID/Bezeichnung D-002 Beschreibung Projekt wird mit Daten bef\u00fcllt Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Dashboard \u00f6ffnen Download-Knopf klicken Erwartetes Ergebnis ZIP-Datei wird heruntergeladen ZIP-Datei enth\u00e4lt Daten Dateien sind anhand der Vorlage bef\u00fcllt ID/Bezeichnung D-003 Beschreibung Nur im Status accepted herunterladbar Testvoraussetzung Angemeldet & Projekt anlegen (PA-001) Testschritte Status auf rejected setzten (B-002) Dashboard \u00f6ffnen Erwartetes Ergebnis Download-Knopf wird nicht angezeigt","title":"Download"},{"location":"LB1/Testprotokoll/#admin-dashboard","text":"ID/Bezeichnung AD-001 Beschreibung Option Kibana wird nur f\u00fcr Admins angezeigt Testvoraussetzung Angemeldet & ist kein Admin Testschritte Dashboard \u00f6ffnen Klick auf Profilbild Erwartetes Ergebnis Option Kibana wird nicht angezeigt ID/Bezeichnung AD-002 Beschreibung Alle Projekte werden angezeigt Testvoraussetzung Account erstellt Testschritte Projekt als normaler Benutzer erstellen Account zu Admin wechseln Dashboard \u00f6ffnen Erwartetes Ergebnis Alle Projekte von allen Benutzern werden angezeigt","title":"Admin Dashboard"},{"location":"LB1/Testprotokoll/#allgemeines","text":"ID/Bezeichnung A-001 Beschreibung Logs werden f\u00fcr jede Aktion erstellt Testvoraussetzung Account existiert Testschritte Dashboard \u00f6ffnen Aktion durchf\u00fchren Erwartetes Ergebnis Logs werden erstellt Alle Logs werden in Datei gespeichert Wichtige Logs werden in Elastic-Search gespeichert ID/Bezeichnung A-002 Beschreibung Redis als Session speicher Testvoraussetzung Redis Container l\u00e4uft Testschritte Anmelden Verbindung zu Redisserver \u00f6ffnen Tabellen auslesen Erwartetes Ergebnis Session ist in Redis gespeichert","title":"Allgemeines"},{"location":"LB1/Testprotokoll/#testprotokoll","text":"","title":"Testprotokoll"},{"location":"LB1/Testprotokoll/#routing_1","text":"ID Status Testdatum Tester Bemerkung R-001 \u2714\ufe0f 23.12.2022 M. Schumacher Repositories eventuell trotzdem erstellt R-002 \u2714\ufe0f 23.12.2022 M. Schumacher Repositories eventuell trotzdem erstellt R-003 \u2714\ufe0f 23.12.2022 M. Schumacher R-004 \u2714\ufe0f 23.12.2022 M. Schumacher Es wird kein Fehlercode angezeigt R-005 \u2714\ufe0f 23.12.2022 M. Schumacher R-006 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Routing"},{"location":"LB1/Testprotokoll/#sign-up_1","text":"ID Status Testdatum Tester Bemerkung SU-001 \u2714\ufe0f 23.12.2022 M. Schumacher SU-002 \u2714\ufe0f 23.12.2022 M. Schumacher Bild mithilfe von JavaScript umgewandelt SU-003 \u2714\ufe0f 23.12.2022 M. Schumacher SU-004 \u2714\ufe0f 23.12.2022 M. Schumacher SU-005 \u2714\ufe0f 23.12.2022 M. Schumacher SU-006 \u2714\ufe0f 23.12.2022 M. Schumacher Salt musste gek\u00fcrzt werden","title":"Sign Up"},{"location":"LB1/Testprotokoll/#sign-in_1","text":"ID Status Testdatum Tester Bemerkung SI-001 \u2714\ufe0f 23.12.2022 M. Schumacher SI-002 \u2714\ufe0f 23.12.2022 M. Schumacher SI-003 \u2714\ufe0f 23.12.2022 M. Schumacher SI-004 \u2714\ufe0f 23.12.2022 M. Schumacher Account mit Email muss existieren","title":"Sign In"},{"location":"LB1/Testprotokoll/#profil-bearbeiten_1","text":"ID Status Testdatum Tester Bemerkung P-001 \u2714\ufe0f 23.12.2022 M. Schumacher P-002 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Profil bearbeiten"},{"location":"LB1/Testprotokoll/#projekt-anlegen_1","text":"ID Status Testdatum Tester Bemerkung PA-001 \u2714\ufe0f 23.12.2022 M. Schumacher PA-002 \u2714\ufe0f 23.12.2022 M. Schumacher PA-003 \u2714\ufe0f 23.12.2022 M. Schumacher PA-004 \u2714\ufe0f 23.12.2022 M. Schumacher PA-005 \u2714\ufe0f 23.12.2022 M. Schumacher Datei Viewer wurde mithilfe von jsTree realisiert PA-006 \u2714\ufe0f 23.12.2022 M. Schumacher PA-007 \u2714\ufe0f 23.12.2022 M. Schumacher PA-008 \u2714\ufe0f 23.12.2022 M. Schumacher PA-009 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Projekt anlegen"},{"location":"LB1/Testprotokoll/#projekt-bearbeiten_1","text":"ID Status Testdatum Tester Bemerkung PB-001 \u2714\ufe0f 23.12.2022 M. Schumacher PB-002 \u2714\ufe0f 23.12.2022 M. Schumacher PB-003 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Projekt bearbeiten"},{"location":"LB1/Testprotokoll/#projekt-loschen_1","text":"ID Status Testdatum Tester Bemerkung PL-001 \u2714\ufe0f 23.12.2022 M. Schumacher PL-002 \u2714\ufe0f 23.12.2022 M. Schumacher PL-003 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Projekt l\u00f6schen"},{"location":"LB1/Testprotokoll/#bestatigen_1","text":"ID Status Testdatum Tester Bemerkung B-001 \u2714\ufe0f 23.12.2022 M. Schumacher Kommentar muss angegeben werden B-002 \u2714\ufe0f 23.12.2022 M. Schumacher Kommentar muss angegeben werden B-003 \u2714\ufe0f 23.12.2022 M. Schumacher B-004 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Best\u00e4tigen"},{"location":"LB1/Testprotokoll/#dashboard","text":"ID Status Testdatum Tester Bemerkung D-001 \u2714\ufe0f 23.12.2022 M. Schumacher Wenn die Verbindung unterbrochen wird, dann kann das ZIP nicht richtig geladen werden D-002 \u2714\ufe0f 23.12.2022 M. Schumacher D-003 \u2714\ufe0f 23.12.2022 M. Schumacher D-004 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Dashboard"},{"location":"LB1/Testprotokoll/#admin-dashboard_1","text":"ID Status Testdatum Tester Bemerkung AD-01 \u2714\ufe0f 23.12.2022 M. Schumacher Kibana auf einer externer URL / Container angezeigt AD-02 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Admin Dashboard"},{"location":"LB1/Testprotokoll/#allgemeines_1","text":"ID Status Testdatum Tester Bemerkung A-001 \u2714\ufe0f 23.12.2022 M. Schumacher Logs werden mit dem aktuellen Datum in Logstash\\Logs gespeichert A-002 \u2714\ufe0f 23.12.2022 M. Schumacher","title":"Allgemeines"},{"location":"LB1/Uebersicht/","tags":["LB1"],"text":"\u00dcbersicht # Das Ziel von diesem Projekt ist, dass ein Gesch\u00e4ftsprozess digitalisiert wird. In der Schule und w\u00e4hrend der Arbeit schreibe ich vermehrt Dokumentationen. Diese mithilfe von MkDocs auf zu setzen ist grunds\u00e4tzlich nicht schwer, jedoch eine aufw\u00e4ndige Arbeit. Meist dauert es einen Tag, bis die Doku mit allen Sonderheiten konfiguriert ist. Dieses Projekt soll die Arbeit erleichtern und die Dokumentationen automatisieren, was den Prozess beschleunigt. In einem Formular kann ein Antrag f\u00fcr eine neue Dokumentation erstellt werden. Dieser wird dann von einem Administrator best\u00e4tigt, wenn alle Angaben stimmen. Die Dokumentation wird dann auf einem Webserver abgelegt und kann von jedem mit einem Link aufgerufen werden. Idee # MkDocs \u00fcber Website konfigurieren Konfiguration Ordnerstruktur Dateien Plugins Beispielseite (Alle m\u00f6glichen MkDocs Features mit Beispielen) Tags Farben Fonts GitRepo Name Admin / Lehrer best\u00e4tigen Ablehnen mit R\u00fcckmeldung / Verbesserung Nach Best\u00e4tigung Download verf\u00fcgbar Backend Elastic Stack Cypress XSS / SQL-Injection sicher Sendgrid f\u00fcr Mails / Benachrichtigungen Frontend TailwindCSS Twig","title":"\u00dcbersicht"},{"location":"LB1/Uebersicht/#ubersicht","text":"Das Ziel von diesem Projekt ist, dass ein Gesch\u00e4ftsprozess digitalisiert wird. In der Schule und w\u00e4hrend der Arbeit schreibe ich vermehrt Dokumentationen. Diese mithilfe von MkDocs auf zu setzen ist grunds\u00e4tzlich nicht schwer, jedoch eine aufw\u00e4ndige Arbeit. Meist dauert es einen Tag, bis die Doku mit allen Sonderheiten konfiguriert ist. Dieses Projekt soll die Arbeit erleichtern und die Dokumentationen automatisieren, was den Prozess beschleunigt. In einem Formular kann ein Antrag f\u00fcr eine neue Dokumentation erstellt werden. Dieser wird dann von einem Administrator best\u00e4tigt, wenn alle Angaben stimmen. Die Dokumentation wird dann auf einem Webserver abgelegt und kann von jedem mit einem Link aufgerufen werden.","title":"\u00dcbersicht"},{"location":"LB1/Uebersicht/#idee","text":"MkDocs \u00fcber Website konfigurieren Konfiguration Ordnerstruktur Dateien Plugins Beispielseite (Alle m\u00f6glichen MkDocs Features mit Beispielen) Tags Farben Fonts GitRepo Name Admin / Lehrer best\u00e4tigen Ablehnen mit R\u00fcckmeldung / Verbesserung Nach Best\u00e4tigung Download verf\u00fcgbar Backend Elastic Stack Cypress XSS / SQL-Injection sicher Sendgrid f\u00fcr Mails / Benachrichtigungen Frontend TailwindCSS Twig","title":"Idee"},{"location":"LB1/Anforderung/Akteure/","tags":["LB1","Anforderung"],"text":"Akteure # Akteure sind fiktive, aber realit\u00e4tsnahe Ausf\u00fchrer eines Use Case . Es kann ein Mensch oder ein Ger\u00e4t sein, das mit dem System interagiert. Zudem ist es m\u00f6glich, dass ein Akteur ein anderes System ist, dass wiederum unterschiedlichen Akteuren besitzt. Sie dienen in unterschiedlichen Unternehmensbereichen dazu, das Angebot besser f\u00fcr die tats\u00e4chliche Kundschaft zu gestalten und Abh\u00e4ngigkeiten zu sehen. Das Ziel eines Akteurs ist, dass der Nutzer im Fokus der Entwicklung steht. Statt mit einer abstrakten Vorstellung einer Zielgruppe zu arbeiten, entwickelt man anhand von Interviews und Analysen einen konkreten prototypischen Nutzer. Darauf entsteht ein Nutzerprofil, dass die Eigenschaften des Nutzers beschreibt und eine realistische Biografie enth\u00e4lt. Damit kommt man dem echten Kunden nahe, ohne ihn zu kennen. Ein Akteur hat klare Ziele, Anforderungen und W\u00fcnsche, welche im Vordergrund stehen. TL;DR Abbildung verschiedener Interessen Fokus auf den Nutzer Sinnvolle Abstraktion Nutzer visualisieren und beschreiben Admin # Name Admin Beschreibung Der Admin ist eine Autorit\u00e4tsperson, welche Aufgaben und Projekte dem Lehrling gibt. Beruf Lehrer, Lehrmeister Aufgaben Informationen bereitstellen Dokumentation bewerten Ziele Einheitliches Schema Schnelle Korrektur Lehrling # Name Lehrling Beschreibung Ein Lehrling ist noch in der Ausbildung und hat deswegen wenig Erfahrung. Er hat in der Schule und im Betrieb mehrere Projekte, welche f\u00fcr Aussenstehende verst\u00e4ndlich sein sollten. Beruf Lehrling, Sch\u00fcler Aufgaben Dokumentation schreiben Inhalte suchen Dokumentation ver\u00f6ffentlichen Ziele Schnelle Erstellung Richtiger Aufbau","title":"Akteure"},{"location":"LB1/Anforderung/Akteure/#akteure","text":"Akteure sind fiktive, aber realit\u00e4tsnahe Ausf\u00fchrer eines Use Case . Es kann ein Mensch oder ein Ger\u00e4t sein, das mit dem System interagiert. Zudem ist es m\u00f6glich, dass ein Akteur ein anderes System ist, dass wiederum unterschiedlichen Akteuren besitzt. Sie dienen in unterschiedlichen Unternehmensbereichen dazu, das Angebot besser f\u00fcr die tats\u00e4chliche Kundschaft zu gestalten und Abh\u00e4ngigkeiten zu sehen. Das Ziel eines Akteurs ist, dass der Nutzer im Fokus der Entwicklung steht. Statt mit einer abstrakten Vorstellung einer Zielgruppe zu arbeiten, entwickelt man anhand von Interviews und Analysen einen konkreten prototypischen Nutzer. Darauf entsteht ein Nutzerprofil, dass die Eigenschaften des Nutzers beschreibt und eine realistische Biografie enth\u00e4lt. Damit kommt man dem echten Kunden nahe, ohne ihn zu kennen. Ein Akteur hat klare Ziele, Anforderungen und W\u00fcnsche, welche im Vordergrund stehen. TL;DR Abbildung verschiedener Interessen Fokus auf den Nutzer Sinnvolle Abstraktion Nutzer visualisieren und beschreiben","title":"Akteure"},{"location":"LB1/Anforderung/Akteure/#admin","text":"Name Admin Beschreibung Der Admin ist eine Autorit\u00e4tsperson, welche Aufgaben und Projekte dem Lehrling gibt. Beruf Lehrer, Lehrmeister Aufgaben Informationen bereitstellen Dokumentation bewerten Ziele Einheitliches Schema Schnelle Korrektur","title":"Admin"},{"location":"LB1/Anforderung/Akteure/#lehrling","text":"Name Lehrling Beschreibung Ein Lehrling ist noch in der Ausbildung und hat deswegen wenig Erfahrung. Er hat in der Schule und im Betrieb mehrere Projekte, welche f\u00fcr Aussenstehende verst\u00e4ndlich sein sollten. Beruf Lehrling, Sch\u00fcler Aufgaben Dokumentation schreiben Inhalte suchen Dokumentation ver\u00f6ffentlichen Ziele Schnelle Erstellung Richtiger Aufbau","title":"Lehrling"},{"location":"LB1/Anforderung/Daten/","tags":["LB1","Anforderung"],"text":"Daten # Die Daten, welche \u00fcbertrag werden m\u00fcssen validiert werden. Was f\u00fcr Validation f\u00fcr die einzelnen Daten ben\u00f6tigt sind wird hier beschrieben. Die Felder entsprechen den aus dem Klassendiagramm , welches im Konzept zu finden ist. Selbstverst\u00e4ndlich werden alle Strings gek\u00fcrzt und vor XSS und SQL-Injection gesch\u00fctzt. Dies wurde jedoch zur Steigerung der \u00dcbersicht nicht vermerkt. Es wird nach folgenden Kriterien validiert: Analyse der Daten welche \u00fcbertragen/erfasst werden Spezifikation Datentypen Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich User # Id Datentyp int Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Negativ oder 0 Wertebereich 1 - .. Name Datentyp String Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer Wertebereich 2 - 35 Zeichen Email Datentyp String Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer, ohne @ , keine Domain, Sonderzeichen Wertebereich 2 - 35 Zeichen Passwort Datentyp String Spezialf\u00e4lle Hashed gespeichert Fehlerf\u00e4lle Leer, keine Sonderzeichen / Klein-Gross-Buchstaben, Nummern Wertebereich 12 - 255 Zeichen Salt Datentyp String Spezialf\u00e4lle Einzigartig pro User Fehlerf\u00e4lle Leer, Passwort ung\u00fcltig Wertebereich Base64 Created_At Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor heutigem Datum Wertebereich 2000 +- heute ProfilePicture Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Base64, 700 kb gross Verified Datentyp bool Spezialf\u00e4lle nicht Verifiziert Fehlerf\u00e4lle Wertebereich true / false Role Datentyp Json Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich admin / user Projekt # Id Datentyp UUID Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer Wertebereich Owner Datentyp User Spezialf\u00e4lle Fehlerf\u00e4lle Null Wertebereich User Name Datentyp String Spezialf\u00e4lle Einzigartig pro User Fehlerf\u00e4lle Leer Wertebereich 2 - 60 Zeichen Description Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 10 - 255 Zeichen Created_At Datentyp DateTime Spezialf\u00e4lle Bereits erstellt Fehlerf\u00e4lle Nicht heute Wertebereich heute Updated_At Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Nicht jetzt Wertebereich Jetzt From_Date Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor To_Date Wertebereich Nach To_Date To_Date Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor From_Date Wertebereich Nach From_Date Docs_Repo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL Source_Repo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL Want_Readme Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_ignore Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_CSS Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_JS Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_Pages Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Color Datentyp Color Enum Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Enum Werte Font Datentyp Font Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Font Logo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer, kein SVG / PNG / JPG / GIF Wertebereich Base64, 500kb Want_Journal Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_Exampes Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Structure Datentyp StructureNode Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich conrifmed Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false confirmed_by Datentyp User Spezialf\u00e4lle Admin gel\u00f6scht Fehlerf\u00e4lle Leer Wertebereich confirmed_at Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Null, Vor jetzt Wertebereich .. - Jetzt Status Datentyp Status Enum Spezialf\u00e4lle Fehlerf\u00e4lle Null Wertebereich Enum Werte download_link Datentyp String Spezialf\u00e4lle Nicht best\u00e4tigt Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL StructureNode # Id Datentyp UUID Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich ASCII Name Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer, Sonderzeichen Wertebereich 0 .. 100, ASCII Type Datentyp FolderType Enum Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Enum Werte","title":"Daten"},{"location":"LB1/Anforderung/Daten/#daten","text":"Die Daten, welche \u00fcbertrag werden m\u00fcssen validiert werden. Was f\u00fcr Validation f\u00fcr die einzelnen Daten ben\u00f6tigt sind wird hier beschrieben. Die Felder entsprechen den aus dem Klassendiagramm , welches im Konzept zu finden ist. Selbstverst\u00e4ndlich werden alle Strings gek\u00fcrzt und vor XSS und SQL-Injection gesch\u00fctzt. Dies wurde jedoch zur Steigerung der \u00dcbersicht nicht vermerkt. Es wird nach folgenden Kriterien validiert: Analyse der Daten welche \u00fcbertragen/erfasst werden Spezifikation Datentypen Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich","title":"Daten"},{"location":"LB1/Anforderung/Daten/#user","text":"Id Datentyp int Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Negativ oder 0 Wertebereich 1 - .. Name Datentyp String Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer Wertebereich 2 - 35 Zeichen Email Datentyp String Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer, ohne @ , keine Domain, Sonderzeichen Wertebereich 2 - 35 Zeichen Passwort Datentyp String Spezialf\u00e4lle Hashed gespeichert Fehlerf\u00e4lle Leer, keine Sonderzeichen / Klein-Gross-Buchstaben, Nummern Wertebereich 12 - 255 Zeichen Salt Datentyp String Spezialf\u00e4lle Einzigartig pro User Fehlerf\u00e4lle Leer, Passwort ung\u00fcltig Wertebereich Base64 Created_At Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor heutigem Datum Wertebereich 2000 +- heute ProfilePicture Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Base64, 700 kb gross Verified Datentyp bool Spezialf\u00e4lle nicht Verifiziert Fehlerf\u00e4lle Wertebereich true / false Role Datentyp Json Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich admin / user","title":"User"},{"location":"LB1/Anforderung/Daten/#projekt","text":"Id Datentyp UUID Spezialf\u00e4lle Einzigartig Fehlerf\u00e4lle Leer Wertebereich Owner Datentyp User Spezialf\u00e4lle Fehlerf\u00e4lle Null Wertebereich User Name Datentyp String Spezialf\u00e4lle Einzigartig pro User Fehlerf\u00e4lle Leer Wertebereich 2 - 60 Zeichen Description Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 10 - 255 Zeichen Created_At Datentyp DateTime Spezialf\u00e4lle Bereits erstellt Fehlerf\u00e4lle Nicht heute Wertebereich heute Updated_At Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Nicht jetzt Wertebereich Jetzt From_Date Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor To_Date Wertebereich Nach To_Date To_Date Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Vor From_Date Wertebereich Nach From_Date Docs_Repo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL Source_Repo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL Want_Readme Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_ignore Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_CSS Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_JS Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_Pages Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Color Datentyp Color Enum Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Enum Werte Font Datentyp Font Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Font Logo Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer, kein SVG / PNG / JPG / GIF Wertebereich Base64, 500kb Want_Journal Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Want_Exampes Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false Structure Datentyp StructureNode Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich conrifmed Datentyp bool Spezialf\u00e4lle Fehlerf\u00e4lle Wertebereich true / false confirmed_by Datentyp User Spezialf\u00e4lle Admin gel\u00f6scht Fehlerf\u00e4lle Leer Wertebereich confirmed_at Datentyp DateTime Spezialf\u00e4lle Fehlerf\u00e4lle Null, Vor jetzt Wertebereich .. - Jetzt Status Datentyp Status Enum Spezialf\u00e4lle Fehlerf\u00e4lle Null Wertebereich Enum Werte download_link Datentyp String Spezialf\u00e4lle Nicht best\u00e4tigt Fehlerf\u00e4lle Leer Wertebereich 0 .. 100, URL","title":"Projekt"},{"location":"LB1/Anforderung/Daten/#structurenode","text":"Id Datentyp UUID Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich ASCII Name Datentyp String Spezialf\u00e4lle Fehlerf\u00e4lle Leer, Sonderzeichen Wertebereich 0 .. 100, ASCII Type Datentyp FolderType Enum Spezialf\u00e4lle Fehlerf\u00e4lle Leer Wertebereich Enum Werte","title":"StructureNode"},{"location":"LB1/Anforderung/Funktionale/","tags":["LB1","Anforderung"],"text":"Funktionale Anforderungen # Funktionale Anforderungen sind die Anforderungen, deren Umsetzung direkt der Zweckbestimmung des Produkts dienen. Sie sind spezifisch f\u00fcr dieses Produkt. Gleich wie die Use Cases haben sie Nummern und sind Kategorien zugeordnet. Sie sind eine Ableitung aus den Use Cases. Beispiel Die Software muss vor Passw\u00f6rtern warnen, f\u00fcr die eine bekannte Kontraindikation enthalten. Start # F-S-0001 Registrieren Beschreibung Die Software muss informieren, dass die Email bereits verwendet wird. Use-Case S-0001 F-S-0002 Registrieren Beschreibung Die Software darf nur Password-Hashes speichern. Use-Case S-0001 F-S-0003 Registrieren Beschreibung Die Software darf Mails zur Verifizierung nur an g\u00fcltige Emails senden. Use-Case S-0001 F-S-0004 Registrieren Beschreibung Die Registrierung darf nur erfolgen, wenn alle Felder g\u00fcltig bef\u00fcllt sind. Use-Case S-0001 F-S-0005 Email verifizieren Beschreibung Die Software muss eine Email zur Verifizierung an den Email des Benutzer senden. Use-Case S-0002 F-S-0006 Email verifizieren Beschreibung Die Software darf Mails zur Verifizierung nur an g\u00fcltige Emails senden. Use-Case S-0002 F-S-0007 Anmelden Beschreibung Die Anmeldung darf nur m\u00f6glich sein, wenn die Email verifiziert ist. Use-Case S-0003 F-S-0008 Anmelden Beschreibung Bei der Anmeldung m\u00fcssen die Eingaben mit der Datenbank abgeglichen werden. Use-Case S-0003 F-S-0009 Anmelden Beschreibung Die Anmeldung darf nur mit g\u00fcltigen Anmeldedaten erfolgen. Use-Case S-0003 F-S-0010 Passwort zur\u00fccksetzen Beschreibung Der Benutzer kann sein Passwort zur\u00fccksetzen Use-Case S-0004 User # F-U-0001 Dashboard anzeigen Beschreibung Die Vorlagen des Benutzers werden aus der Datenbank geladen. Use-Case U-0001 F-U-0002 Profil bearbeiten Beschreibung Das Profilbild wird in einer Base64String-Repr\u00e4sentation gespeichert Use-Case U-0002 F-U-0003 Neue Vorlage Beschreibung Die Software \u00fcberpr\u00fcft, ob der Projektname bereits verwendet wird. Use-Case U-0003 F-U-0004 Neue Vorlage Beschreibung Die neue Vorlage darf nur gespeichert werden, wenn alle Felder ausgef\u00fcllt & g\u00fcltig sind. Use-Case U-0003 F-U-0005 Vorlage bearbeiten Beschreibung Die Vorlage darf nur gespeichert werden, wenn alle Felder ausgef\u00fcllt & g\u00fcltig sind. Use-Case U-0004 F-U-0006 Vorlage bearbeiten Beschreibung Die Vorlage muss nach der Bearbeitung wieder auf den Status Offen gesetzt werden. Use-Case U-0004 F-U-0007 Vorlage bearbeiten Beschreibung Die Vorlage darf nur vom Lehrling bearbeitet werden. Use-Case U-0004 F-U-0008 Vorlage l\u00f6schen Beschreibung Die Vorlage darf nur vom Lehrling gel\u00f6scht werden. Use-Case U-0005 F-U-0009 Vorlage l\u00f6schen Beschreibung Das L\u00f6schen muss durch eine Abfrage beim Lehrling best\u00e4tigt werden. Use-Case U-0005 F-U-0010 Vorlage downloaden Beschreibung Die Vorlage darf nur heruntergeladen werden, wenn sie im Status Best\u00e4tigt ist. Use-Case U-0006 F-U-0011 Vorlage downloaden Beschreibung Die Struktur der Vorlage wird anhand der Konfiguration erstellt. Use-Case U-0006 F-U-0012 Status\u00e4nderung mitteilen Beschreibung Der Benutzer muss \u00fcber eine \u00c4nderung des Statuses per Mail informiert werden. Use-Case U-0007 F-U-0013 Status\u00e4nderung mitteilen Beschreibung Der Benutzer bekommt das Mail nur, wenn er die Benachrichtigung aktiviert hat. Use-Case U-0007 Admin # F-A-0001 Vorlage best\u00e4tigen Beschreibung Die Vorlage darf nur von einem Admin best\u00e4tigt werden. Use-Case A-0001 F-A-0002 Vorlage ablehnen Beschreibung Die Vorlage darf nur von einem Admin abgelehnt werden. Use-Case A-0002 F-A-0003 Vorlage ablehnen Beschreibung Die Vorlage darf nur mit einem Kommentar abgelehnt werden. Use-Case A-0002 F-A-0004 Logs sehen & filtern Beschreibung Die Logs d\u00fcrfen nur von einem Admin eingesehen werden. Use-Case A-0003 F-A-0005 Logs sehen & filtern Beschreibung Die Software informiert \u00fcber einen Systemabsturz. Use-Case A-0003","title":"Funktionale"},{"location":"LB1/Anforderung/Funktionale/#funktionale-anforderungen","text":"Funktionale Anforderungen sind die Anforderungen, deren Umsetzung direkt der Zweckbestimmung des Produkts dienen. Sie sind spezifisch f\u00fcr dieses Produkt. Gleich wie die Use Cases haben sie Nummern und sind Kategorien zugeordnet. Sie sind eine Ableitung aus den Use Cases. Beispiel Die Software muss vor Passw\u00f6rtern warnen, f\u00fcr die eine bekannte Kontraindikation enthalten.","title":"Funktionale Anforderungen"},{"location":"LB1/Anforderung/Funktionale/#start","text":"F-S-0001 Registrieren Beschreibung Die Software muss informieren, dass die Email bereits verwendet wird. Use-Case S-0001 F-S-0002 Registrieren Beschreibung Die Software darf nur Password-Hashes speichern. Use-Case S-0001 F-S-0003 Registrieren Beschreibung Die Software darf Mails zur Verifizierung nur an g\u00fcltige Emails senden. Use-Case S-0001 F-S-0004 Registrieren Beschreibung Die Registrierung darf nur erfolgen, wenn alle Felder g\u00fcltig bef\u00fcllt sind. Use-Case S-0001 F-S-0005 Email verifizieren Beschreibung Die Software muss eine Email zur Verifizierung an den Email des Benutzer senden. Use-Case S-0002 F-S-0006 Email verifizieren Beschreibung Die Software darf Mails zur Verifizierung nur an g\u00fcltige Emails senden. Use-Case S-0002 F-S-0007 Anmelden Beschreibung Die Anmeldung darf nur m\u00f6glich sein, wenn die Email verifiziert ist. Use-Case S-0003 F-S-0008 Anmelden Beschreibung Bei der Anmeldung m\u00fcssen die Eingaben mit der Datenbank abgeglichen werden. Use-Case S-0003 F-S-0009 Anmelden Beschreibung Die Anmeldung darf nur mit g\u00fcltigen Anmeldedaten erfolgen. Use-Case S-0003 F-S-0010 Passwort zur\u00fccksetzen Beschreibung Der Benutzer kann sein Passwort zur\u00fccksetzen Use-Case S-0004","title":"Start"},{"location":"LB1/Anforderung/Funktionale/#user","text":"F-U-0001 Dashboard anzeigen Beschreibung Die Vorlagen des Benutzers werden aus der Datenbank geladen. Use-Case U-0001 F-U-0002 Profil bearbeiten Beschreibung Das Profilbild wird in einer Base64String-Repr\u00e4sentation gespeichert Use-Case U-0002 F-U-0003 Neue Vorlage Beschreibung Die Software \u00fcberpr\u00fcft, ob der Projektname bereits verwendet wird. Use-Case U-0003 F-U-0004 Neue Vorlage Beschreibung Die neue Vorlage darf nur gespeichert werden, wenn alle Felder ausgef\u00fcllt & g\u00fcltig sind. Use-Case U-0003 F-U-0005 Vorlage bearbeiten Beschreibung Die Vorlage darf nur gespeichert werden, wenn alle Felder ausgef\u00fcllt & g\u00fcltig sind. Use-Case U-0004 F-U-0006 Vorlage bearbeiten Beschreibung Die Vorlage muss nach der Bearbeitung wieder auf den Status Offen gesetzt werden. Use-Case U-0004 F-U-0007 Vorlage bearbeiten Beschreibung Die Vorlage darf nur vom Lehrling bearbeitet werden. Use-Case U-0004 F-U-0008 Vorlage l\u00f6schen Beschreibung Die Vorlage darf nur vom Lehrling gel\u00f6scht werden. Use-Case U-0005 F-U-0009 Vorlage l\u00f6schen Beschreibung Das L\u00f6schen muss durch eine Abfrage beim Lehrling best\u00e4tigt werden. Use-Case U-0005 F-U-0010 Vorlage downloaden Beschreibung Die Vorlage darf nur heruntergeladen werden, wenn sie im Status Best\u00e4tigt ist. Use-Case U-0006 F-U-0011 Vorlage downloaden Beschreibung Die Struktur der Vorlage wird anhand der Konfiguration erstellt. Use-Case U-0006 F-U-0012 Status\u00e4nderung mitteilen Beschreibung Der Benutzer muss \u00fcber eine \u00c4nderung des Statuses per Mail informiert werden. Use-Case U-0007 F-U-0013 Status\u00e4nderung mitteilen Beschreibung Der Benutzer bekommt das Mail nur, wenn er die Benachrichtigung aktiviert hat. Use-Case U-0007","title":"User"},{"location":"LB1/Anforderung/Funktionale/#admin","text":"F-A-0001 Vorlage best\u00e4tigen Beschreibung Die Vorlage darf nur von einem Admin best\u00e4tigt werden. Use-Case A-0001 F-A-0002 Vorlage ablehnen Beschreibung Die Vorlage darf nur von einem Admin abgelehnt werden. Use-Case A-0002 F-A-0003 Vorlage ablehnen Beschreibung Die Vorlage darf nur mit einem Kommentar abgelehnt werden. Use-Case A-0002 F-A-0004 Logs sehen & filtern Beschreibung Die Logs d\u00fcrfen nur von einem Admin eingesehen werden. Use-Case A-0003 F-A-0005 Logs sehen & filtern Beschreibung Die Software informiert \u00fcber einen Systemabsturz. Use-Case A-0003","title":"Admin"},{"location":"LB1/Anforderung/Testszenario/","tags":["LB1","Anforderung"],"text":"Testszenario # Ein Testszenario beschreibt die Testumgebung , in welche die Tests ausgef\u00fchrt werden. Zudem erh\u00e4lt der die Aktion die zu \u00dcberpr\u00fcfen ist. Gleich wie die Use Cases und die Anforderungen sind sie Nummeriert . Start # S-0001 Registrieren & Verifizieren Vorbedingung Der Benutzer ist nicht registriert. Schritte Nutzer \u00f6ffnet die Startseite Klickt in der oberen Navigation auf Registrieren Gibt seine Anmeldedaten ein L\u00e4dt ein Bild hoch Klickt auf registrieren Bekommt das Mail zur Verifizierung Best\u00e4tigt die Email-Adresse S-0002 Anmelden Vorbedingung Account wurde erstellt & verifiziert Der Benutzer ist nicht angemeldet Schritte Nutzer \u00f6ffnet die Startseite Klickt in der oberen Navigation auf Registrieren Gibt seine Anmeldedaten ein Klickt auf anmelden Anmeldedaten werden validiert Wirt auf Dashboard weitergeleitet User # U-0001 Profil bearbeiten Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt in der Navigation auf das Profilicon Wird zum Profil weitergeleitet \u00c4ndert die Email-Adresse System validiert die \u00c4nderungen Speichert die \u00c4nderungen auf der Datenbank U-0002 Neues Vorlage Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Plus in der Navigation Formular \u00f6ffnet sich Allgemeine Daten werden eingegeben Weiter wird geklickt Allgemeine Daten werden validiert Es wird zur n\u00e4chsten Seite navigiert Progressbar steigt voran Vorherige Anweisungen wiederholen Fertig klicken Vorlage zur Best\u00e4tigung markieren Vorlage auf Dashboard anzeigen U-0003 Vorlage bearbeiten Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Bearbeiten -Symbol in der Vorlagenansicht Formular \u00f6ffnet sich Allgemeine Daten werden eingegeben Weiter wird geklickt Allgemeine Daten werden validiert Es wird zur n\u00e4chsten Seite navigiert Progressbar steigt voran Vorherige Anweisungen wiederholen Fertig klicken Vorlage zur Best\u00e4tigung markieren Vorlage auf Dashboard anzeigen U-0004 Vorlage l\u00f6schen Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das L\u00f6schen -Symbol in der Vorlagenansicht Best\u00e4tigung wird angezeigt Best\u00e4tigung wird best\u00e4tigt Vorlage wird gel\u00f6scht U-0005 Vorlage herunterladen Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Herunterladen -Symbol in der Vorlagenansicht Status wird \u00fcberpr\u00fcft Vorlage wird generiert Vorlage wird heruntergeladen U-0006 \u00c4nderungen mitteilen Vorbedingung Angemeldet Schritte Admin best\u00e4tigt Vorlage Vorlage wird als Best\u00e4tigt markiert Nutzer erh\u00e4lt eine Email U-0007 Mitteilungen abbestellen Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf Profil Stellt die Benachrichtigungen aus Speichert die \u00c4nderungen Erstellt eine neue Vorlage Vorlage wird von Admin best\u00e4tigt Nutzer erh\u00e4lt keine Mitteilung Admin # A-0001 Vorlage best\u00e4tigen Vorbedingung Als Admin angemeldet & Vorlage erstellt Schritte Admin \u00f6ffnet das Dashboard Klickt auf das Best\u00e4tigen -Symbol in der Vorlagenansicht Bl\u00e4ttert durch die Vorlage durch Best\u00e4tigt die Vorlage Vorlage wird als Best\u00e4tigt markiert A-0002 Vorlage ablehnen Vorbedingung Als Admin angemeldet & Vorlage erstellt Schritte Admin \u00f6ffnet das Dashboard Klickt auf das Best\u00e4tigen -Symbol in der Vorlagenansicht Bl\u00e4ttert durch die Vorlage durch Schreibt einen Kommentar Ablehnt die Vorlage Vorlage wird als Abgelehnt markiert A-0003 Logs einsehen Vorbedingung Als Admin angemeldet Schritte Admin \u00f6ffnet das Dashboard Klickt auf Logs Logs werden angezeigt Testf\u00e4lle # Ein Testfall beschreibt eine elementare Funktionalit\u00e4t, welche getestet werden soll. Er hat eine Beschreibung und eine Voraussetzung. Die Voraussetzung ist eine Bedingung, die erf\u00fcllt sein muss, damit der Testfall ausgef\u00fchrt werden kann. Die Schritte zum Ausf\u00fchren werden auch mitgegeben, damit es zu keinen Missverst\u00e4ndnissen kommt. Aus diesem Grund m\u00fcssen diese Schritte exakt ausgef\u00fchrt werden. Beschreiben konkret, welcher Button wie/wann/was ausl\u00f6sen soll oder eben nicht Testf\u00e4lle sind Subformen von Testszenarios. Szenarien beziehen sich auf Anforderungen.","title":"Testszenario"},{"location":"LB1/Anforderung/Testszenario/#testszenario","text":"Ein Testszenario beschreibt die Testumgebung , in welche die Tests ausgef\u00fchrt werden. Zudem erh\u00e4lt der die Aktion die zu \u00dcberpr\u00fcfen ist. Gleich wie die Use Cases und die Anforderungen sind sie Nummeriert .","title":"Testszenario"},{"location":"LB1/Anforderung/Testszenario/#start","text":"S-0001 Registrieren & Verifizieren Vorbedingung Der Benutzer ist nicht registriert. Schritte Nutzer \u00f6ffnet die Startseite Klickt in der oberen Navigation auf Registrieren Gibt seine Anmeldedaten ein L\u00e4dt ein Bild hoch Klickt auf registrieren Bekommt das Mail zur Verifizierung Best\u00e4tigt die Email-Adresse S-0002 Anmelden Vorbedingung Account wurde erstellt & verifiziert Der Benutzer ist nicht angemeldet Schritte Nutzer \u00f6ffnet die Startseite Klickt in der oberen Navigation auf Registrieren Gibt seine Anmeldedaten ein Klickt auf anmelden Anmeldedaten werden validiert Wirt auf Dashboard weitergeleitet","title":"Start"},{"location":"LB1/Anforderung/Testszenario/#user","text":"U-0001 Profil bearbeiten Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt in der Navigation auf das Profilicon Wird zum Profil weitergeleitet \u00c4ndert die Email-Adresse System validiert die \u00c4nderungen Speichert die \u00c4nderungen auf der Datenbank U-0002 Neues Vorlage Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Plus in der Navigation Formular \u00f6ffnet sich Allgemeine Daten werden eingegeben Weiter wird geklickt Allgemeine Daten werden validiert Es wird zur n\u00e4chsten Seite navigiert Progressbar steigt voran Vorherige Anweisungen wiederholen Fertig klicken Vorlage zur Best\u00e4tigung markieren Vorlage auf Dashboard anzeigen U-0003 Vorlage bearbeiten Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Bearbeiten -Symbol in der Vorlagenansicht Formular \u00f6ffnet sich Allgemeine Daten werden eingegeben Weiter wird geklickt Allgemeine Daten werden validiert Es wird zur n\u00e4chsten Seite navigiert Progressbar steigt voran Vorherige Anweisungen wiederholen Fertig klicken Vorlage zur Best\u00e4tigung markieren Vorlage auf Dashboard anzeigen U-0004 Vorlage l\u00f6schen Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das L\u00f6schen -Symbol in der Vorlagenansicht Best\u00e4tigung wird angezeigt Best\u00e4tigung wird best\u00e4tigt Vorlage wird gel\u00f6scht U-0005 Vorlage herunterladen Vorbedingung Angemeldet & Vorlage erstellt Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf das Herunterladen -Symbol in der Vorlagenansicht Status wird \u00fcberpr\u00fcft Vorlage wird generiert Vorlage wird heruntergeladen U-0006 \u00c4nderungen mitteilen Vorbedingung Angemeldet Schritte Admin best\u00e4tigt Vorlage Vorlage wird als Best\u00e4tigt markiert Nutzer erh\u00e4lt eine Email U-0007 Mitteilungen abbestellen Vorbedingung Angemeldet Schritte Nutzer \u00f6ffnet das Dashboard Klickt auf Profil Stellt die Benachrichtigungen aus Speichert die \u00c4nderungen Erstellt eine neue Vorlage Vorlage wird von Admin best\u00e4tigt Nutzer erh\u00e4lt keine Mitteilung","title":"User"},{"location":"LB1/Anforderung/Testszenario/#admin","text":"A-0001 Vorlage best\u00e4tigen Vorbedingung Als Admin angemeldet & Vorlage erstellt Schritte Admin \u00f6ffnet das Dashboard Klickt auf das Best\u00e4tigen -Symbol in der Vorlagenansicht Bl\u00e4ttert durch die Vorlage durch Best\u00e4tigt die Vorlage Vorlage wird als Best\u00e4tigt markiert A-0002 Vorlage ablehnen Vorbedingung Als Admin angemeldet & Vorlage erstellt Schritte Admin \u00f6ffnet das Dashboard Klickt auf das Best\u00e4tigen -Symbol in der Vorlagenansicht Bl\u00e4ttert durch die Vorlage durch Schreibt einen Kommentar Ablehnt die Vorlage Vorlage wird als Abgelehnt markiert A-0003 Logs einsehen Vorbedingung Als Admin angemeldet Schritte Admin \u00f6ffnet das Dashboard Klickt auf Logs Logs werden angezeigt","title":"Admin"},{"location":"LB1/Anforderung/Testszenario/#testfalle","text":"Ein Testfall beschreibt eine elementare Funktionalit\u00e4t, welche getestet werden soll. Er hat eine Beschreibung und eine Voraussetzung. Die Voraussetzung ist eine Bedingung, die erf\u00fcllt sein muss, damit der Testfall ausgef\u00fchrt werden kann. Die Schritte zum Ausf\u00fchren werden auch mitgegeben, damit es zu keinen Missverst\u00e4ndnissen kommt. Aus diesem Grund m\u00fcssen diese Schritte exakt ausgef\u00fchrt werden. Beschreiben konkret, welcher Button wie/wann/was ausl\u00f6sen soll oder eben nicht Testf\u00e4lle sind Subformen von Testszenarios. Szenarien beziehen sich auf Anforderungen.","title":"Testf\u00e4lle"},{"location":"LB1/Anforderung/UseCases/","tags":["LB1","Anforderung"],"text":"Use Cases # Ein Use Case ist eine kurze Beschreibung was ein System leisten soll. Der Vorgang wie das System die Aufgabe erf\u00fcllt ist nicht relevant. Ein Use Case beschreibt die Interaktion zwischen einem Akteur und dem System. Ein Use Case ist eine Sammlung von Anforderungen. Durch die Beschreibung der erforderlichen Schnittstellen wird klar, was f\u00fcr Systeme programmiert werden m\u00fcssen, damit er umgesetzt werden kann. Durch die Nummerierung der Use Cases ist klar, welche Anforderungen zu welchem Use Case geh\u00f6ren und k\u00f6nnen somit untereinander verlinkt werden. Ein Use Case hat Bedingungen, welche vor und danach passieren, damit er als ausgef\u00fchrt gilt. Ein Use Case kann mehrere Akteure haben, welche unterschiedliche Rollen haben und ihn ausf\u00fchren. Die Use Cases wurden in mehrere Kategorien eingeteilt, um die \u00dcbersichtlichkeit zu verbessern. In jeder Kategorie beginnt die Nummerierung neu. TL;DR Kurz-Beschreibung was ein System leisten soll (und nicht wie) Beinhaltet die Beschreibung von erforderlichen Schnittstellen/Systeme Werden durchnummeriert Hat Akteure , Ausl\u00f6ser, Vorbedingungen und Nachbedingungen K\u00f6nnen auf andere Use-Cases verweisen Start # S-0001 # ID/Bezeichnung S-0001 Name Registrieren Ziel Ein Nutzer m\u00f6chte einen neuen Account anlegen Schnittstellen Datenbank, Mailversand Akteure Lehrling Trigger Registrierseite Vorbedingungen Kein Account mit dieser Email Nachbedingungen S-0002 Essentielle Schritte 1. Registrierung \u00f6ffnen 2. Anmeldedaten eingeben 3. Formular absenden 4. Account anlegen S-0002 # ID/Bezeichnung S-0002 Name Email verifizieren Ziel Account als g\u00fcltig markieren (Datenbank vor Bots sch\u00fctzen) Schnittstellen Datenbank Akteure Lehrling Trigger S-0001 Vorbedingungen Registriert Nachbedingungen Anmeldung m\u00f6glich Schritte 1. Email erhalten 2. Best\u00e4tigungslink klicken 3. Account als verifiziert markieren S-0003 # ID/Bezeichnung S-003 Name Anmelden Ziel Ein Nutzer m\u00f6chte sich mit seinem Account anmelden Schnittstellen Datenbank Akteure Lehrling Trigger Anmeldeseite Vorbedingungen S-0002 Nachbedingungen Schritte 1. Anmeldeseite \u00f6ffnen 2. Anmeldedaten eingeben 3. Formular absenden 4. Zur \u00dcbersicht navigieren S-0004 # ID/Bezeichnung S-004 Name Passwort zur\u00fccksetzen Ziel Ein Nutzer kann sein vergessenes Passwort neu setzten Schnittstellen Mailversand Akteure Lehrling Trigger Passwort vergessen Vorbedingungen S-0002 , Account vorhanden Nachbedingungen Schritte 1. Anmeldeseite \u00f6ffnen 2. \"Passwort vergessen\"-Klicken 3. Email zur Neusetzung senden 4. Passwort neu setzen User # U-0001 # ID/Bezeichnung U-0001 Name Dashboard anzeigen Ziel Eine \u00dcbersicht f\u00fcr die erstellten Vorlagen erlangen Schnittstellen Datenbank Akteure Lehrling , Admin Trigger \u00dcbersichtseite \u00f6ffnen Vorbedingungen Angemeldet Nachbedingungen Titel, Beschreibung, Status sichtbar Schritte 1. Dashboard \u00f6ffnen U-0002 # ID/Bezeichnung U-0002 Name Profil bearbeiten Ziel \u00c4nderungen am Schnittstellen Datenbank Akteure Lehrling , Admin Trigger Nutzer \u00e4ndert seine Email oder sein Passwort Vorbedingungen Account existiert Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. Zu Profil navigieren 3. \u00c4nderungen eingeben 4. \u00c4nderungen speichern U-0003 # ID/Bezeichnung U-0003 Name Neue Vorlage Ziel Ein neues Projekt zur Best\u00e4tigung erstellen Schnittstellen Datenbank Akteure Lehrling Trigger Ein neues Projekt wird begonnen Vorbedingungen Nachbedingungen A-0001 , A-0002 Schritte 1. Dashboard \u00f6ffnen 2. \"Neues Projekt\"-Knopf klicken 3. Allgemeine Daten eingeben 4. Aussehen anpassen 5. Ordnerstruktur erstellen 6. Projekt zur \u00fcberpr\u00fcfung abgeben U-0004 # ID/Bezeichnung U-0004 Name Vorlage bearbeiten Ziel Eine bestehende Vorlage bearbeiten Schnittstellen Datenbank Akteure Lehrling Trigger Projekt abgelehnt / Anpassungen n\u00f6tig Vorbedingungen U-0003 Nachbedingungen A-0001 , A-0002 Schritte 1. Dashboard \u00f6ffnen 2. Bearbeiten-Knopf klicken 3. Informationen \u00e4ndern 4. Projekt zur \u00fcberpr\u00fcfung abgeben U-0005 # ID/Bezeichnung U-0005 Name Vorlage l\u00f6schen Ziel Eine bestehende Vorlage l\u00f6schen Schnittstellen Datenbank Akteure Lehrling Trigger Ein Projekt wurde beendet Vorbedingungen U-0003 Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. L\u00f6schen-Knopf klicken 3. L\u00f6schen best\u00e4tigen U-0006 # ID/Bezeichnung U-0006 Name Vorlage downloaden Ziel Die Vorlage f\u00fcr die Verwendung herunterladen Schnittstellen Akteure Lehrling Trigger A-0001 Vorbedingungen A-0001 Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. Download-Knopf klicken 3. Vorlage herunterladen U-0007 # ID/Bezeichnung U-0007 Name Status\u00e4nderung mitteilen Ziel Der Nutzer m\u00f6chte wissen, wenn ein Admin den Status \u00e4ndert Schnittstellen Mailversand Akteure Lehrling , Admin Trigger A-0001 , A-0002 Vorbedingungen Nachbedingungen Schritte 1. Admin \u00e4ndert Status 2. Benutzer informieren Admin # A-0001 # ID/Bezeichnung A-0001 Name Vorlage best\u00e4tigen Ziel Die Vorlage als g\u00fcltig Markieren, damit sie verwendet werden kann Schnittstellen Datenbank Akteure Admin Trigger U-0003 Vorbedingungen Vorlage zur Best\u00e4tigung abgegeben, Als Admin angemeldet Nachbedingungen U-0006 , U-0007 Schritte 1. Dashboard \u00f6ffnen 2. Best\u00e4tigungsknopf dr\u00fccken 3. Vorlage durchbl\u00e4ttern 4. Kommentar schreiben 5. Als g\u00fcltig markieren A-0002 # ID/Bezeichnung A-0002 Name Vorlage ablehnen Ziel Die Vorlage als ung\u00fcltig Markieren, damit sie nochmals \u00fcberarbeitet wird Schnittstellen Datenbank Akteure Admin Trigger U-0003 Vorbedingungen Vorlage zur Best\u00e4tigung abgegeben, Als Admin angemeldet Nachbedingungen Download nicht m\u00f6glich, U-0007 Schritte 1. Dashboard \u00f6ffnen 2. Best\u00e4tigungsknopf dr\u00fccken 3. Vorlage durchbl\u00e4ttern 4. Kommentar schreiben 5. Als ung\u00fcltig markieren A-0003 # ID/Bezeichnung A-0003 Name Logs sehen & filtern Ziel Der Admin m\u00f6chte gerne sehen, wie sich das Programm verh\u00e4lt und ob es Abnormalit\u00e4ten gibt Schnittstellen Kibana Akteure Admin Trigger Benutzer meldet einen Absturz beim Admin Vorbedingungen Als Admin angemeldet Nachbedingungen Schritte 1. Kibana \u00f6ffnen 2. Filter setzen 3. Suchen","title":"Use Cases"},{"location":"LB1/Anforderung/UseCases/#use-cases","text":"Ein Use Case ist eine kurze Beschreibung was ein System leisten soll. Der Vorgang wie das System die Aufgabe erf\u00fcllt ist nicht relevant. Ein Use Case beschreibt die Interaktion zwischen einem Akteur und dem System. Ein Use Case ist eine Sammlung von Anforderungen. Durch die Beschreibung der erforderlichen Schnittstellen wird klar, was f\u00fcr Systeme programmiert werden m\u00fcssen, damit er umgesetzt werden kann. Durch die Nummerierung der Use Cases ist klar, welche Anforderungen zu welchem Use Case geh\u00f6ren und k\u00f6nnen somit untereinander verlinkt werden. Ein Use Case hat Bedingungen, welche vor und danach passieren, damit er als ausgef\u00fchrt gilt. Ein Use Case kann mehrere Akteure haben, welche unterschiedliche Rollen haben und ihn ausf\u00fchren. Die Use Cases wurden in mehrere Kategorien eingeteilt, um die \u00dcbersichtlichkeit zu verbessern. In jeder Kategorie beginnt die Nummerierung neu. TL;DR Kurz-Beschreibung was ein System leisten soll (und nicht wie) Beinhaltet die Beschreibung von erforderlichen Schnittstellen/Systeme Werden durchnummeriert Hat Akteure , Ausl\u00f6ser, Vorbedingungen und Nachbedingungen K\u00f6nnen auf andere Use-Cases verweisen","title":"Use Cases"},{"location":"LB1/Anforderung/UseCases/#start","text":"","title":"Start"},{"location":"LB1/Anforderung/UseCases/#s-0001","text":"ID/Bezeichnung S-0001 Name Registrieren Ziel Ein Nutzer m\u00f6chte einen neuen Account anlegen Schnittstellen Datenbank, Mailversand Akteure Lehrling Trigger Registrierseite Vorbedingungen Kein Account mit dieser Email Nachbedingungen S-0002 Essentielle Schritte 1. Registrierung \u00f6ffnen 2. Anmeldedaten eingeben 3. Formular absenden 4. Account anlegen","title":"S-0001"},{"location":"LB1/Anforderung/UseCases/#s-0002","text":"ID/Bezeichnung S-0002 Name Email verifizieren Ziel Account als g\u00fcltig markieren (Datenbank vor Bots sch\u00fctzen) Schnittstellen Datenbank Akteure Lehrling Trigger S-0001 Vorbedingungen Registriert Nachbedingungen Anmeldung m\u00f6glich Schritte 1. Email erhalten 2. Best\u00e4tigungslink klicken 3. Account als verifiziert markieren","title":"S-0002"},{"location":"LB1/Anforderung/UseCases/#s-0003","text":"ID/Bezeichnung S-003 Name Anmelden Ziel Ein Nutzer m\u00f6chte sich mit seinem Account anmelden Schnittstellen Datenbank Akteure Lehrling Trigger Anmeldeseite Vorbedingungen S-0002 Nachbedingungen Schritte 1. Anmeldeseite \u00f6ffnen 2. Anmeldedaten eingeben 3. Formular absenden 4. Zur \u00dcbersicht navigieren","title":"S-0003"},{"location":"LB1/Anforderung/UseCases/#s-0004","text":"ID/Bezeichnung S-004 Name Passwort zur\u00fccksetzen Ziel Ein Nutzer kann sein vergessenes Passwort neu setzten Schnittstellen Mailversand Akteure Lehrling Trigger Passwort vergessen Vorbedingungen S-0002 , Account vorhanden Nachbedingungen Schritte 1. Anmeldeseite \u00f6ffnen 2. \"Passwort vergessen\"-Klicken 3. Email zur Neusetzung senden 4. Passwort neu setzen","title":"S-0004"},{"location":"LB1/Anforderung/UseCases/#user","text":"","title":"User"},{"location":"LB1/Anforderung/UseCases/#u-0001","text":"ID/Bezeichnung U-0001 Name Dashboard anzeigen Ziel Eine \u00dcbersicht f\u00fcr die erstellten Vorlagen erlangen Schnittstellen Datenbank Akteure Lehrling , Admin Trigger \u00dcbersichtseite \u00f6ffnen Vorbedingungen Angemeldet Nachbedingungen Titel, Beschreibung, Status sichtbar Schritte 1. Dashboard \u00f6ffnen","title":"U-0001"},{"location":"LB1/Anforderung/UseCases/#u-0002","text":"ID/Bezeichnung U-0002 Name Profil bearbeiten Ziel \u00c4nderungen am Schnittstellen Datenbank Akteure Lehrling , Admin Trigger Nutzer \u00e4ndert seine Email oder sein Passwort Vorbedingungen Account existiert Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. Zu Profil navigieren 3. \u00c4nderungen eingeben 4. \u00c4nderungen speichern","title":"U-0002"},{"location":"LB1/Anforderung/UseCases/#u-0003","text":"ID/Bezeichnung U-0003 Name Neue Vorlage Ziel Ein neues Projekt zur Best\u00e4tigung erstellen Schnittstellen Datenbank Akteure Lehrling Trigger Ein neues Projekt wird begonnen Vorbedingungen Nachbedingungen A-0001 , A-0002 Schritte 1. Dashboard \u00f6ffnen 2. \"Neues Projekt\"-Knopf klicken 3. Allgemeine Daten eingeben 4. Aussehen anpassen 5. Ordnerstruktur erstellen 6. Projekt zur \u00fcberpr\u00fcfung abgeben","title":"U-0003"},{"location":"LB1/Anforderung/UseCases/#u-0004","text":"ID/Bezeichnung U-0004 Name Vorlage bearbeiten Ziel Eine bestehende Vorlage bearbeiten Schnittstellen Datenbank Akteure Lehrling Trigger Projekt abgelehnt / Anpassungen n\u00f6tig Vorbedingungen U-0003 Nachbedingungen A-0001 , A-0002 Schritte 1. Dashboard \u00f6ffnen 2. Bearbeiten-Knopf klicken 3. Informationen \u00e4ndern 4. Projekt zur \u00fcberpr\u00fcfung abgeben","title":"U-0004"},{"location":"LB1/Anforderung/UseCases/#u-0005","text":"ID/Bezeichnung U-0005 Name Vorlage l\u00f6schen Ziel Eine bestehende Vorlage l\u00f6schen Schnittstellen Datenbank Akteure Lehrling Trigger Ein Projekt wurde beendet Vorbedingungen U-0003 Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. L\u00f6schen-Knopf klicken 3. L\u00f6schen best\u00e4tigen","title":"U-0005"},{"location":"LB1/Anforderung/UseCases/#u-0006","text":"ID/Bezeichnung U-0006 Name Vorlage downloaden Ziel Die Vorlage f\u00fcr die Verwendung herunterladen Schnittstellen Akteure Lehrling Trigger A-0001 Vorbedingungen A-0001 Nachbedingungen Schritte 1. Dashboard \u00f6ffnen 2. Download-Knopf klicken 3. Vorlage herunterladen","title":"U-0006"},{"location":"LB1/Anforderung/UseCases/#u-0007","text":"ID/Bezeichnung U-0007 Name Status\u00e4nderung mitteilen Ziel Der Nutzer m\u00f6chte wissen, wenn ein Admin den Status \u00e4ndert Schnittstellen Mailversand Akteure Lehrling , Admin Trigger A-0001 , A-0002 Vorbedingungen Nachbedingungen Schritte 1. Admin \u00e4ndert Status 2. Benutzer informieren","title":"U-0007"},{"location":"LB1/Anforderung/UseCases/#admin","text":"","title":"Admin"},{"location":"LB1/Anforderung/UseCases/#a-0001","text":"ID/Bezeichnung A-0001 Name Vorlage best\u00e4tigen Ziel Die Vorlage als g\u00fcltig Markieren, damit sie verwendet werden kann Schnittstellen Datenbank Akteure Admin Trigger U-0003 Vorbedingungen Vorlage zur Best\u00e4tigung abgegeben, Als Admin angemeldet Nachbedingungen U-0006 , U-0007 Schritte 1. Dashboard \u00f6ffnen 2. Best\u00e4tigungsknopf dr\u00fccken 3. Vorlage durchbl\u00e4ttern 4. Kommentar schreiben 5. Als g\u00fcltig markieren","title":"A-0001"},{"location":"LB1/Anforderung/UseCases/#a-0002","text":"ID/Bezeichnung A-0002 Name Vorlage ablehnen Ziel Die Vorlage als ung\u00fcltig Markieren, damit sie nochmals \u00fcberarbeitet wird Schnittstellen Datenbank Akteure Admin Trigger U-0003 Vorbedingungen Vorlage zur Best\u00e4tigung abgegeben, Als Admin angemeldet Nachbedingungen Download nicht m\u00f6glich, U-0007 Schritte 1. Dashboard \u00f6ffnen 2. Best\u00e4tigungsknopf dr\u00fccken 3. Vorlage durchbl\u00e4ttern 4. Kommentar schreiben 5. Als ung\u00fcltig markieren","title":"A-0002"},{"location":"LB1/Anforderung/UseCases/#a-0003","text":"ID/Bezeichnung A-0003 Name Logs sehen & filtern Ziel Der Admin m\u00f6chte gerne sehen, wie sich das Programm verh\u00e4lt und ob es Abnormalit\u00e4ten gibt Schnittstellen Kibana Akteure Admin Trigger Benutzer meldet einen Absturz beim Admin Vorbedingungen Als Admin angemeldet Nachbedingungen Schritte 1. Kibana \u00f6ffnen 2. Filter setzen 3. Suchen","title":"A-0003"},{"location":"LB1/Architekturkonzept/MVC-Konzept/","tags":["LB1","Konzept"],"text":"MVC-Konzept # Dieses Projekt wird mithilfe von des Design Patterns MVC umgesetzt. Das MVC-Konzept ist ein Entwurfsmuster, das die Anwendung in drei Teile aufteilt: Model, View und Controller. Das Model stellt die Daten der Anwendung dar. Die View stellt die grafische Oberfl\u00e4che der Anwendung dar. Der Controller stellt die Logik der Anwendung dar. Die View und der Controller kommunizieren miteinander, um die Anwendung zu steuern. Der Controller greift \u00fcber die Models auf die Daten zu. Durch das Framework von Herr Inauen ist bereits ein grosser Teil des MVC-Konzepts implementiert. Durch diesen Aufbau eignet sich deshalb SSR . Im folgendem Diagramm wird aufgezeigt, wie das MVC-Konzept in diesem Projekt umgesetzt wird:","title":"MVC-Konzept"},{"location":"LB1/Architekturkonzept/MVC-Konzept/#mvc-konzept","text":"Dieses Projekt wird mithilfe von des Design Patterns MVC umgesetzt. Das MVC-Konzept ist ein Entwurfsmuster, das die Anwendung in drei Teile aufteilt: Model, View und Controller. Das Model stellt die Daten der Anwendung dar. Die View stellt die grafische Oberfl\u00e4che der Anwendung dar. Der Controller stellt die Logik der Anwendung dar. Die View und der Controller kommunizieren miteinander, um die Anwendung zu steuern. Der Controller greift \u00fcber die Models auf die Daten zu. Durch das Framework von Herr Inauen ist bereits ein grosser Teil des MVC-Konzepts implementiert. Durch diesen Aufbau eignet sich deshalb SSR . Im folgendem Diagramm wird aufgezeigt, wie das MVC-Konzept in diesem Projekt umgesetzt wird:","title":"MVC-Konzept"},{"location":"LB1/Architekturkonzept/Mockup/","tags":["LB1","Konzept"],"text":"Mockup # Ein Mockup ist eine grafische Darstellung eines Benutzeroberfl\u00e4che . Es dient als Vorlage f\u00fcr die Entwicklung einer Software und bereits in der Planung auf Fehler deuten. Funktionalit\u00e4ten und Designs k\u00f6nnen so bereits vor der Entwicklung getestet und visualisiert werden. Zu beachten ist, dass es nur ein Prototyp ist und die tats\u00e4chliche Umsetzung davon abweichen kann. Die Mockups wurden mit Figma erstellt. Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Es ist kostenlos und auf allen Ger\u00e4ten benutzt werden. Die Mockups sind \u00f6ffentlich und k\u00f6nnen hier eingesehen werden. Die Mockups sind in drei Bereiche unterteilt: Start , User und Admin . Der Startbereich ist die Startseite der Website, auf welcher die Anmeldung passiert. Der Userbereich ist die Seite, die der User sieht, wenn er sich angemeldet hat. Dort kann er seine Vorlagen herunterladen und Neue erstellen. Der Adminbereich ist die Seite, die nur die Administratoren sehen. Dort k\u00f6nnen sie die Antr\u00e4ge der User best\u00e4tigen oder ablehnen. Wenn die Verbindungen der einzelnen Seiten eingesehen werden m\u00f6chte, dann kann dies durch das Umstellen auf den Prototypen -Modus erreicht werden. Dieser Modus zeigt die Verbindungen zwischen den einzelnen Seiten an. Sie werden nur in diesem Modus angezeigt. Falls die Mockups nicht angezeigt werden, dann kann dies hier eingesehen werden. Die Illustrationen stammen von niceillustrations.com . F\u00fcr die Icons wurden die Icons von Octicons verwendet. Farben # Als Farbpalette werden folgende vier Farben verwendet: Verbindungen #","title":"Mockup"},{"location":"LB1/Architekturkonzept/Mockup/#mockup","text":"Ein Mockup ist eine grafische Darstellung eines Benutzeroberfl\u00e4che . Es dient als Vorlage f\u00fcr die Entwicklung einer Software und bereits in der Planung auf Fehler deuten. Funktionalit\u00e4ten und Designs k\u00f6nnen so bereits vor der Entwicklung getestet und visualisiert werden. Zu beachten ist, dass es nur ein Prototyp ist und die tats\u00e4chliche Umsetzung davon abweichen kann. Die Mockups wurden mit Figma erstellt. Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Es ist kostenlos und auf allen Ger\u00e4ten benutzt werden. Die Mockups sind \u00f6ffentlich und k\u00f6nnen hier eingesehen werden. Die Mockups sind in drei Bereiche unterteilt: Start , User und Admin . Der Startbereich ist die Startseite der Website, auf welcher die Anmeldung passiert. Der Userbereich ist die Seite, die der User sieht, wenn er sich angemeldet hat. Dort kann er seine Vorlagen herunterladen und Neue erstellen. Der Adminbereich ist die Seite, die nur die Administratoren sehen. Dort k\u00f6nnen sie die Antr\u00e4ge der User best\u00e4tigen oder ablehnen. Wenn die Verbindungen der einzelnen Seiten eingesehen werden m\u00f6chte, dann kann dies durch das Umstellen auf den Prototypen -Modus erreicht werden. Dieser Modus zeigt die Verbindungen zwischen den einzelnen Seiten an. Sie werden nur in diesem Modus angezeigt. Falls die Mockups nicht angezeigt werden, dann kann dies hier eingesehen werden. Die Illustrationen stammen von niceillustrations.com . F\u00fcr die Icons wurden die Icons von Octicons verwendet.","title":"Mockup"},{"location":"LB1/Architekturkonzept/Mockup/#farben","text":"Als Farbpalette werden folgende vier Farben verwendet:","title":"Farben"},{"location":"LB1/Architekturkonzept/Mockup/#verbindungen","text":"","title":"Verbindungen"},{"location":"LB1/Architekturkonzept/Twig-Konzept/","tags":["LB1","Konzept"],"text":"Twig-Konzept # Um repetitive UI-Elemente zu Komponenten umzuwandeln wird eine Template Engine verwendet. Daf\u00fcr eignet sich Twig sehr gut, da der Syntax sehr einfach ist. Wie die Views aufgebaut sind wurde bereits im MVC-Konzept beschrieben. F\u00fcr das Stylen des Frontends wird TailwindCSS verwendet. Im folgendem Diagramm geht es um den Aufbau der Komponenten: Ordnerstruktur # Die Ordnerstruktur ist wie folgt: app \u251c\u2500\u2500 Controller \u251c\u2500\u2500 Repository \u251c\u2500\u2500 Models \u251c\u2500\u2500 Core \u251c\u2500\u2500 Helpers \u251c\u2500\u2500 Views \u2502 \u251c\u2500\u2500 Base \u2502 \u2502 \u251c\u2500\u2500 Main \u2502 \u2502 \u251c\u2500\u2500 CoreJS \u2502 \u2502 \u2514\u2500\u2500 NavBar \u2502 \u251c\u2500\u2500 Layout \u2502 \u2502 \u251c\u2500\u2500 BaseLayout \u2502 \u2502 \u251c\u2500\u2500 SplitImageLayout \u2502 \u2502 \u2514\u2500\u2500 ContentLayout \u2502 \u251c\u2500\u2500 Components \u2502 \u2502 \u251c\u2500\u2500 Button \u2502 \u2502 \u251c\u2500\u2500 ButtonGroup \u2502 \u2502 \u251c\u2500\u2500 Templates \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProjectView \u2502 \u2502 \u251c\u2500\u2500 Form \u2502 \u2502 \u251c\u2500\u2500 ProgressBar \u2502 \u2502 \u251c\u2500\u2500 Upload \u2502 \u2502 \u251c\u2500\u2500 Inputs \u2502 \u2502 \u2502 \u251c\u2500\u2500 Checkbox \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatePicker \u2502 \u2502 \u2502 \u251c\u2500\u2500 Dropdown \u2502 \u2502 \u2502 \u251c\u2500\u2500 Password \u2502 \u2502 \u2502 \u251c\u2500\u2500 URL \u2502 \u2502 \u2502 \u2514\u2500\u2500 Email \u2502 \u2502 \u251c\u2500\u2500 Error \u2502 \u2502 \u2514\u2500\u2500 Input \u2502 \u251c\u2500\u2500 Helpers \u2502 \u2502 \u2514\u2500\u2500 AdminOnly \u2502 \u2514\u2500\u2500 Pages \u2502 \u251c\u2500\u2500 Welcome \u2502 \u251c\u2500\u2500 NotFound \u2502 \u251c\u2500\u2500 Forbidden \u2502 \u251c\u2500\u2500 Kibana \u2502 \u251c\u2500\u2500 Login \u2502 \u251c\u2500\u2500 Register \u2502 \u251c\u2500\u2500 Profile \u2502 \u251c\u2500\u2500 Overview \u2502 \u251c\u2500\u2500 ProjectGeneral \u2502 \u251c\u2500\u2500 ProjectAppearance \u2502 \u251c\u2500\u2500 ProjectStructure \u2502 \u2514\u2500\u2500 ProjectConfirm \u2514\u2500\u2500 Utils","title":"Twig-Konzept"},{"location":"LB1/Architekturkonzept/Twig-Konzept/#twig-konzept","text":"Um repetitive UI-Elemente zu Komponenten umzuwandeln wird eine Template Engine verwendet. Daf\u00fcr eignet sich Twig sehr gut, da der Syntax sehr einfach ist. Wie die Views aufgebaut sind wurde bereits im MVC-Konzept beschrieben. F\u00fcr das Stylen des Frontends wird TailwindCSS verwendet. Im folgendem Diagramm geht es um den Aufbau der Komponenten:","title":"Twig-Konzept"},{"location":"LB1/Architekturkonzept/Twig-Konzept/#ordnerstruktur","text":"Die Ordnerstruktur ist wie folgt: app \u251c\u2500\u2500 Controller \u251c\u2500\u2500 Repository \u251c\u2500\u2500 Models \u251c\u2500\u2500 Core \u251c\u2500\u2500 Helpers \u251c\u2500\u2500 Views \u2502 \u251c\u2500\u2500 Base \u2502 \u2502 \u251c\u2500\u2500 Main \u2502 \u2502 \u251c\u2500\u2500 CoreJS \u2502 \u2502 \u2514\u2500\u2500 NavBar \u2502 \u251c\u2500\u2500 Layout \u2502 \u2502 \u251c\u2500\u2500 BaseLayout \u2502 \u2502 \u251c\u2500\u2500 SplitImageLayout \u2502 \u2502 \u2514\u2500\u2500 ContentLayout \u2502 \u251c\u2500\u2500 Components \u2502 \u2502 \u251c\u2500\u2500 Button \u2502 \u2502 \u251c\u2500\u2500 ButtonGroup \u2502 \u2502 \u251c\u2500\u2500 Templates \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProjectView \u2502 \u2502 \u251c\u2500\u2500 Form \u2502 \u2502 \u251c\u2500\u2500 ProgressBar \u2502 \u2502 \u251c\u2500\u2500 Upload \u2502 \u2502 \u251c\u2500\u2500 Inputs \u2502 \u2502 \u2502 \u251c\u2500\u2500 Checkbox \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatePicker \u2502 \u2502 \u2502 \u251c\u2500\u2500 Dropdown \u2502 \u2502 \u2502 \u251c\u2500\u2500 Password \u2502 \u2502 \u2502 \u251c\u2500\u2500 URL \u2502 \u2502 \u2502 \u2514\u2500\u2500 Email \u2502 \u2502 \u251c\u2500\u2500 Error \u2502 \u2502 \u2514\u2500\u2500 Input \u2502 \u251c\u2500\u2500 Helpers \u2502 \u2502 \u2514\u2500\u2500 AdminOnly \u2502 \u2514\u2500\u2500 Pages \u2502 \u251c\u2500\u2500 Welcome \u2502 \u251c\u2500\u2500 NotFound \u2502 \u251c\u2500\u2500 Forbidden \u2502 \u251c\u2500\u2500 Kibana \u2502 \u251c\u2500\u2500 Login \u2502 \u251c\u2500\u2500 Register \u2502 \u251c\u2500\u2500 Profile \u2502 \u251c\u2500\u2500 Overview \u2502 \u251c\u2500\u2500 ProjectGeneral \u2502 \u251c\u2500\u2500 ProjectAppearance \u2502 \u251c\u2500\u2500 ProjectStructure \u2502 \u2514\u2500\u2500 ProjectConfirm \u2514\u2500\u2500 Utils","title":"Ordnerstruktur"},{"location":"LB1/Beschreibung/MVC/","tags":["LB1"],"text":"Model-View-Controller # MVC ist ein Design-Pattern , welches die Strukturierung von Anwendungen erleichtert. Es ist ein Ansatz, um die verschiedenen Komponenten einer Anwendung zu trennen. Das Ziel von MVC ist es, die einzelnen Komponenten des Programms voneinander zu trennen . Dadurch ist es m\u00f6glich, dass die einzelnen Komponenten unabh\u00e4ngig voneinander entwickelt werden k\u00f6nnen. Es ist m\u00f6glich, dass die View von einem anderen Programm verwendet wird, ohne dass das Model oder der Controller verwendet werden. Das Model kann auch von einem anderen Programm verwendet werden, ohne dass die View oder der Controller verwendet werden. Aufbau von MVC # Als Einsteigspunkt gilt bei MVC der Controller. Dieser ist f\u00fcr die Verarbeitung der Anfragen zust\u00e4ndig. Er ruft die entsprechenden Model-Methoden auf und gibt die Daten an die View weiter. Die View ist f\u00fcr die Darstellung der Daten zust\u00e4ndig. Sie ruft die entsprechenden Controller-Methoden auf, wenn der Benutzer auf einen Button klickt. sequenceDiagram User ->> View: Klick auf Knopf View ->> Controller: Aufruf der entsprechenden Methode Controller ->> Model: Daten aus dem Backend holen Model -->> Controller: R\u00fcckgabe der Daten Controller -->> View: UI aktualisieren View -->> User: Benutzer informieren Link zu PlantUML Model # Das Model ist die Datenhaltung . Hier werden die Daten gespeichert und verarbeitet. Es ist unabh\u00e4ngig von der View und dem Controller. Bei richtigem Design ist es m\u00f6glich, dass das Model auch von anderen Programmen verwendet werden kann, ohne die View oder den Controller zu verwenden. Das Model enth\u00e4lt grunds\u00e4tzlich keine Logik sondern nur die Daten und die Methoden , um auf die Daten zuzugreifen. Die Logik wird in den Controller ausgelagert. Meist spricht man dann auch von POPO (Plain Old PHP Object), da es sich um eine sehr einfache PHP-Klasse handelt. View # Die View ist die Benutzeroberfl\u00e4che . Hier werden die Daten angezeigt und der Benutzer kann mit dem Programm interagieren. Die View sendet Events an den Controller, wenn der Benutzer auf einen Button klickt. Alle \u00c4nderungen am UI werden vom Controller vorgenommen, da die View selbst keine Logik enthalten darf. Sie zeigt nur die Daten an und gibt Events weiter. Der Benutzer kann also nicht direkt auf das Model zugreifen. Die einzige Logik, die in der View enthalten sein darf, ist die Logik, die das UI ver\u00e4ndert. Zum Beispiel, wenn ein Button angezeigt werden soll, wenn eine Bedingung erf\u00fcllt ist oder Schleifen . Controller # Der Controller ist die Verbindung zwischen Model und View. Er verarbeitet die Benutzereingaben und gibt diese an das Model weiter. Er holt sich die Daten aus dem Model und gibt sie an die View weiter. Der Controller ist somit die Verbindung zwischen den beiden unabh\u00e4ngigen Teilen. Die schwierigste Aufgabe des Controllers ist, dass die View mit den Daten synchron ist, da der Benutzer immer den aktuellen Stand sehen m\u00f6chte. Zudem darf er keine ung\u00fcltigen Werte weiterleiten und muss die Daten validieren . Sicherheitstechnisch ist es sehr wichtig, dass hier die Validierung passiert, da der Benutzer die View bearbeiten kann. Beispiel # Das Beispiel zeigt, wie ein einfaches MVC-Programm aufgebaut ist. Personen werden aus der Datenbank geholt und in einer Tabelle angezeigt. \u00dcber ein Suchfeld kann nach Personen gesucht werden. Das Projekt beinhaltet auch ein Beispiel wie der Code nicht aufgebaut sein sollte. Dieses Beispiel zeigt, wie die einzelnen Komponenten miteinander verkn\u00fcpft sind.","title":"MVC"},{"location":"LB1/Beschreibung/MVC/#model-view-controller","text":"MVC ist ein Design-Pattern , welches die Strukturierung von Anwendungen erleichtert. Es ist ein Ansatz, um die verschiedenen Komponenten einer Anwendung zu trennen. Das Ziel von MVC ist es, die einzelnen Komponenten des Programms voneinander zu trennen . Dadurch ist es m\u00f6glich, dass die einzelnen Komponenten unabh\u00e4ngig voneinander entwickelt werden k\u00f6nnen. Es ist m\u00f6glich, dass die View von einem anderen Programm verwendet wird, ohne dass das Model oder der Controller verwendet werden. Das Model kann auch von einem anderen Programm verwendet werden, ohne dass die View oder der Controller verwendet werden.","title":"Model-View-Controller"},{"location":"LB1/Beschreibung/MVC/#aufbau-von-mvc","text":"Als Einsteigspunkt gilt bei MVC der Controller. Dieser ist f\u00fcr die Verarbeitung der Anfragen zust\u00e4ndig. Er ruft die entsprechenden Model-Methoden auf und gibt die Daten an die View weiter. Die View ist f\u00fcr die Darstellung der Daten zust\u00e4ndig. Sie ruft die entsprechenden Controller-Methoden auf, wenn der Benutzer auf einen Button klickt. sequenceDiagram User ->> View: Klick auf Knopf View ->> Controller: Aufruf der entsprechenden Methode Controller ->> Model: Daten aus dem Backend holen Model -->> Controller: R\u00fcckgabe der Daten Controller -->> View: UI aktualisieren View -->> User: Benutzer informieren Link zu PlantUML","title":"Aufbau von MVC"},{"location":"LB1/Beschreibung/MVC/#model","text":"Das Model ist die Datenhaltung . Hier werden die Daten gespeichert und verarbeitet. Es ist unabh\u00e4ngig von der View und dem Controller. Bei richtigem Design ist es m\u00f6glich, dass das Model auch von anderen Programmen verwendet werden kann, ohne die View oder den Controller zu verwenden. Das Model enth\u00e4lt grunds\u00e4tzlich keine Logik sondern nur die Daten und die Methoden , um auf die Daten zuzugreifen. Die Logik wird in den Controller ausgelagert. Meist spricht man dann auch von POPO (Plain Old PHP Object), da es sich um eine sehr einfache PHP-Klasse handelt.","title":"Model"},{"location":"LB1/Beschreibung/MVC/#view","text":"Die View ist die Benutzeroberfl\u00e4che . Hier werden die Daten angezeigt und der Benutzer kann mit dem Programm interagieren. Die View sendet Events an den Controller, wenn der Benutzer auf einen Button klickt. Alle \u00c4nderungen am UI werden vom Controller vorgenommen, da die View selbst keine Logik enthalten darf. Sie zeigt nur die Daten an und gibt Events weiter. Der Benutzer kann also nicht direkt auf das Model zugreifen. Die einzige Logik, die in der View enthalten sein darf, ist die Logik, die das UI ver\u00e4ndert. Zum Beispiel, wenn ein Button angezeigt werden soll, wenn eine Bedingung erf\u00fcllt ist oder Schleifen .","title":"View"},{"location":"LB1/Beschreibung/MVC/#controller","text":"Der Controller ist die Verbindung zwischen Model und View. Er verarbeitet die Benutzereingaben und gibt diese an das Model weiter. Er holt sich die Daten aus dem Model und gibt sie an die View weiter. Der Controller ist somit die Verbindung zwischen den beiden unabh\u00e4ngigen Teilen. Die schwierigste Aufgabe des Controllers ist, dass die View mit den Daten synchron ist, da der Benutzer immer den aktuellen Stand sehen m\u00f6chte. Zudem darf er keine ung\u00fcltigen Werte weiterleiten und muss die Daten validieren . Sicherheitstechnisch ist es sehr wichtig, dass hier die Validierung passiert, da der Benutzer die View bearbeiten kann.","title":"Controller"},{"location":"LB1/Beschreibung/MVC/#beispiel","text":"Das Beispiel zeigt, wie ein einfaches MVC-Programm aufgebaut ist. Personen werden aus der Datenbank geholt und in einer Tabelle angezeigt. \u00dcber ein Suchfeld kann nach Personen gesucht werden. Das Projekt beinhaltet auch ein Beispiel wie der Code nicht aufgebaut sein sollte. Dieses Beispiel zeigt, wie die einzelnen Komponenten miteinander verkn\u00fcpft sind.","title":"Beispiel"},{"location":"LB1/Beschreibung/Rendering/","tags":["LB1"],"text":"Rendering # In der Vergangenheit gab es immer wieder extreme Entwicklungen im Bereich Rendering. Zuerst wurde alles Server-Side gerendert, bis man auf die Idee gekommen ist, dass der Client alles \u00fcber Client-Side laden k\u00f6nnte. Mittlerweile haben sich diese Extreme etwas gefangen und man versucht das Beste aus beiden Welten zu nehmen. Die erste Anfrage wird Serverseitig gerendert. In der Applikation wird dann die Navigation Clientseitig bet\u00e4tigt. So bekommt man die Vorteile vom schnellen Laden und die angenehme Steuerung. Es gibt noch weitere Methoden wie Pre-Render Seiten, wobei die Dateien zuvor als statisches HTML generieren. Wenn eine Anfrage kommt, dann wird ohne Bearbeitung oder Interpretation die Seite zur\u00fcckgegeben. Dies ist f\u00fcr dynamische Werte nicht m\u00f6glich, da diese erst zur Laufzeit berechnet werden k\u00f6nnen. Beide folgenden Kapitel wurden aus einer externen der Webseite entnommen. Diagramm # Das folgende Diagramm zeigt den Ablauf einer Client-Side-Rendering Anwendung: graph LR A[Client] --> |URL| B{JavaScript Framework}; B --> |Ajax Anfrage an Server| C[Webserver]; C --> |JSON / XML / YAML| B; B --> |Daten verarbeiten| B; B --> |HTML generieren| A; Link zu PlantUML Client Side Rendering # Clientseitiges Rendering erm\u00f6glicht es Entwicklern, ihre Websites mit JavaScript vollst\u00e4ndig im Browser zu laden. Anstatt f\u00fcr jede URL eine eigene HTML-Seite zu haben, wird bei einer clientseitig gerenderten Website jede Route dynamisch direkt im Browser erstellt. Dieser Ansatz verbreitete sich, als die JS-Frameworks ihn leicht anwendbar machten. Wenn CSR von Hand gemacht wird, dann wird meistens Ajax verwendet. Dies ist eine Technik, die es erm\u00f6glicht, Daten von einem Server zu laden, ohne die Seite neu zu laden. Dies ist ein Asynchroner Vorgang, der die Performance verbessert. Die Nachteile sind, dass die Seite nicht von Suchmaschinen gescannt werden kann und die Erstellung der Seite dauert l\u00e4nger, da die Daten erst geladen werden m\u00fcssen. Zudem wird JavaScript f\u00fcr das Laden ben\u00f6tigt, was gewisse Bots beim Indexieren nicht ausl\u00f6sen. Server Side Rendering # Eine Webseite direkt auf dem Server mit benutzerdefinierten Daten auszuf\u00fcllen, erm\u00f6glicht das serverseitige Rendering. Das Layout und angezeigte HTML wird direkt gesteuert, sodass nur der ben\u00f6tigte Inhalt zum Browser kommt. Wenn eine Anfrage kommt, dann werden die Daten geladen. Danach wird anhand der Daten das HTML zusammengestellt. Felder wie Titel und Beschreibung werden mit den Daten gef\u00fcllt. Sobald dieser Vorgang beendet ist wird die Seite an den Browser gesendet. In der Regel sind einmalige Anfragen an den Server schneller, als zus\u00e4tzliche Browser-zu-Server-Rundreisen f\u00fcr sie zu machen, was bei CSR der fall ist. Zudem sehen Suchmaschinen den Inhalt der Seite, was die Indexierung erleichtert. JavaScript kommt beim SSR nicht oder nur selten zum Einsatz, was f\u00fcr Bots eine Vorteil ist. Der Nachteil ist, dass man keine Infos \u00fcber das Verhalten des Users hat. Dies ist ein Problem, wenn analysiert werden soll, wie die Seite genutzt wird. Ausserdem ist es schwierig, die Navigation zu steuern oder zu wissen welches Feld aktuell fokussiert ist. Da in einer Abfrage die Daten \u00e4ndern k\u00f6nnen kann der Inhalt nicht beim Laden der Seite gecached werden. Dies f\u00fchrt zu einer langsameren Seite. Fazit # Ein klarer Gewinner zwischen SSR und CSR gibt es nicht, da beide Vor- und Nachteile haben. Es sollte deswegen immer abgewogen werden, welche Anwendung f\u00fcr die jeweilige Situation am besten geeignet ist. Da CSR den Inhalt der Seite erst nach dem Laden anzeigt ist die Time to First Byte (TTFB) bei besser. Jedoch ist die Time to First Meaningful Paint (TTMFP) bei SSR besser, da der Inhalt der Seite schneller angezeigt wird. SEO ist bei SSR besser, da der HTML Code bereits vorher geladen wurde und somit auch von Suchmaschinen gescannt werden kann. Bei CSR wird der HTML Code erst nachgeladen und somit nicht von Suchmaschinen gescannt. Das clientseitige Rendering verwaltet das Routing dynamisch, ohne die Seite jedes Mal zu aktualisieren, wenn ein Benutzer eine andere Route anfordert. Das serverseitige Rendering ist in der Lage, beim ersten Laden einer beliebigen Route der Website eine vollst\u00e4ndig ausgef\u00fcllte Seite anzuzeigen, w\u00e4hrend beim clientseitigen Rendering zun\u00e4chst eine leere Seite angezeigt wird. Beispielprojekt # Zur Veranschaulichung einer CSR-Webseite mittels PHP wurde ein Projekt erstellt. Als Vorlage galt der \u00dcK 307, in welchem bereits eine Grundstruktur daf\u00fcr erstellt wurde. Aus dem neu gelernten Wissen aus diesem Modul wurde diese Struktur erweitert. Die Webseite stellt eine Liste von Kunden dar. \u00dcber einen Hinzuf\u00fcgen -Knopf kann ein neuer Kunde in die SQLite Datenbank geladen werden. Falls die Werte nicht g\u00fcltig sind, wird eine Fehlermeldung ausgegeben. Das Projekt kann unter GitHub eingesehen werden. Eine Live-Demo ist unter meiner eigenen Webseite verf\u00fcgbar. Als exakte Aufgabe sollte es anstatt einer Datenbank \u00fcber eine Datei gespeichert werden. Zur Vollst\u00e4ndigkeit wurde dies auch noch nebenbei umgesetzt und kann auf GitHub begutachtet werden.","title":"Rendering"},{"location":"LB1/Beschreibung/Rendering/#rendering","text":"In der Vergangenheit gab es immer wieder extreme Entwicklungen im Bereich Rendering. Zuerst wurde alles Server-Side gerendert, bis man auf die Idee gekommen ist, dass der Client alles \u00fcber Client-Side laden k\u00f6nnte. Mittlerweile haben sich diese Extreme etwas gefangen und man versucht das Beste aus beiden Welten zu nehmen. Die erste Anfrage wird Serverseitig gerendert. In der Applikation wird dann die Navigation Clientseitig bet\u00e4tigt. So bekommt man die Vorteile vom schnellen Laden und die angenehme Steuerung. Es gibt noch weitere Methoden wie Pre-Render Seiten, wobei die Dateien zuvor als statisches HTML generieren. Wenn eine Anfrage kommt, dann wird ohne Bearbeitung oder Interpretation die Seite zur\u00fcckgegeben. Dies ist f\u00fcr dynamische Werte nicht m\u00f6glich, da diese erst zur Laufzeit berechnet werden k\u00f6nnen. Beide folgenden Kapitel wurden aus einer externen der Webseite entnommen.","title":"Rendering"},{"location":"LB1/Beschreibung/Rendering/#diagramm","text":"Das folgende Diagramm zeigt den Ablauf einer Client-Side-Rendering Anwendung: graph LR A[Client] --> |URL| B{JavaScript Framework}; B --> |Ajax Anfrage an Server| C[Webserver]; C --> |JSON / XML / YAML| B; B --> |Daten verarbeiten| B; B --> |HTML generieren| A; Link zu PlantUML","title":"Diagramm"},{"location":"LB1/Beschreibung/Rendering/#client-side-rendering","text":"Clientseitiges Rendering erm\u00f6glicht es Entwicklern, ihre Websites mit JavaScript vollst\u00e4ndig im Browser zu laden. Anstatt f\u00fcr jede URL eine eigene HTML-Seite zu haben, wird bei einer clientseitig gerenderten Website jede Route dynamisch direkt im Browser erstellt. Dieser Ansatz verbreitete sich, als die JS-Frameworks ihn leicht anwendbar machten. Wenn CSR von Hand gemacht wird, dann wird meistens Ajax verwendet. Dies ist eine Technik, die es erm\u00f6glicht, Daten von einem Server zu laden, ohne die Seite neu zu laden. Dies ist ein Asynchroner Vorgang, der die Performance verbessert. Die Nachteile sind, dass die Seite nicht von Suchmaschinen gescannt werden kann und die Erstellung der Seite dauert l\u00e4nger, da die Daten erst geladen werden m\u00fcssen. Zudem wird JavaScript f\u00fcr das Laden ben\u00f6tigt, was gewisse Bots beim Indexieren nicht ausl\u00f6sen.","title":"Client Side Rendering"},{"location":"LB1/Beschreibung/Rendering/#server-side-rendering","text":"Eine Webseite direkt auf dem Server mit benutzerdefinierten Daten auszuf\u00fcllen, erm\u00f6glicht das serverseitige Rendering. Das Layout und angezeigte HTML wird direkt gesteuert, sodass nur der ben\u00f6tigte Inhalt zum Browser kommt. Wenn eine Anfrage kommt, dann werden die Daten geladen. Danach wird anhand der Daten das HTML zusammengestellt. Felder wie Titel und Beschreibung werden mit den Daten gef\u00fcllt. Sobald dieser Vorgang beendet ist wird die Seite an den Browser gesendet. In der Regel sind einmalige Anfragen an den Server schneller, als zus\u00e4tzliche Browser-zu-Server-Rundreisen f\u00fcr sie zu machen, was bei CSR der fall ist. Zudem sehen Suchmaschinen den Inhalt der Seite, was die Indexierung erleichtert. JavaScript kommt beim SSR nicht oder nur selten zum Einsatz, was f\u00fcr Bots eine Vorteil ist. Der Nachteil ist, dass man keine Infos \u00fcber das Verhalten des Users hat. Dies ist ein Problem, wenn analysiert werden soll, wie die Seite genutzt wird. Ausserdem ist es schwierig, die Navigation zu steuern oder zu wissen welches Feld aktuell fokussiert ist. Da in einer Abfrage die Daten \u00e4ndern k\u00f6nnen kann der Inhalt nicht beim Laden der Seite gecached werden. Dies f\u00fchrt zu einer langsameren Seite.","title":"Server Side Rendering"},{"location":"LB1/Beschreibung/Rendering/#fazit","text":"Ein klarer Gewinner zwischen SSR und CSR gibt es nicht, da beide Vor- und Nachteile haben. Es sollte deswegen immer abgewogen werden, welche Anwendung f\u00fcr die jeweilige Situation am besten geeignet ist. Da CSR den Inhalt der Seite erst nach dem Laden anzeigt ist die Time to First Byte (TTFB) bei besser. Jedoch ist die Time to First Meaningful Paint (TTMFP) bei SSR besser, da der Inhalt der Seite schneller angezeigt wird. SEO ist bei SSR besser, da der HTML Code bereits vorher geladen wurde und somit auch von Suchmaschinen gescannt werden kann. Bei CSR wird der HTML Code erst nachgeladen und somit nicht von Suchmaschinen gescannt. Das clientseitige Rendering verwaltet das Routing dynamisch, ohne die Seite jedes Mal zu aktualisieren, wenn ein Benutzer eine andere Route anfordert. Das serverseitige Rendering ist in der Lage, beim ersten Laden einer beliebigen Route der Website eine vollst\u00e4ndig ausgef\u00fcllte Seite anzuzeigen, w\u00e4hrend beim clientseitigen Rendering zun\u00e4chst eine leere Seite angezeigt wird.","title":"Fazit"},{"location":"LB1/Beschreibung/Rendering/#beispielprojekt","text":"Zur Veranschaulichung einer CSR-Webseite mittels PHP wurde ein Projekt erstellt. Als Vorlage galt der \u00dcK 307, in welchem bereits eine Grundstruktur daf\u00fcr erstellt wurde. Aus dem neu gelernten Wissen aus diesem Modul wurde diese Struktur erweitert. Die Webseite stellt eine Liste von Kunden dar. \u00dcber einen Hinzuf\u00fcgen -Knopf kann ein neuer Kunde in die SQLite Datenbank geladen werden. Falls die Werte nicht g\u00fcltig sind, wird eine Fehlermeldung ausgegeben. Das Projekt kann unter GitHub eingesehen werden. Eine Live-Demo ist unter meiner eigenen Webseite verf\u00fcgbar. Als exakte Aufgabe sollte es anstatt einer Datenbank \u00fcber eine Datei gespeichert werden. Zur Vollst\u00e4ndigkeit wurde dies auch noch nebenbei umgesetzt und kann auf GitHub begutachtet werden.","title":"Beispielprojekt"},{"location":"LB1/Beschreibung/Twig/","tags":["LB1","PHP","Twig"],"text":"Twig # Twig ist eine Template Engine f\u00fcr PHP. Sie ist eine Alternative zu PHP selbst, um HTML-Code zu generieren. Es ist eine Open-Source-Software, die unter der MIT-Lizenz ver\u00f6ffentlicht wurde. Sie ist eine der am h\u00e4ufigsten verwendeten Template-Engines f\u00fcr PHP. Zudem gibt es eine ausf\u00fchrliche Dokumentation, die hier zu finden ist. Da diese f\u00fcr das schnelle Nachschlagen zu ausf\u00fchrlich ist kann auch in einer selbstgeschriebenen Kurzreferenz nachgeschlagen werden. Eine Template-Engine ist eine Software, die HTML-Code aus Daten generiert. Es sollte repetitive Schritte abnehmen und das bauen von eigenst\u00e4ndigen Komponenten erm\u00f6glichen. Der Syntax ist bei allen Engines unterschiedlich, aber die Grundidee ist die gleiche. Verwendung # Twig wird verwendet, um wiederkehrender HTML-Code zu extrahieren und so die Wartung zu erleichtern. Die Installation von Twig ist mithilfe von Composer sehr einfach. Wie dies gemacht wird und was beim Controller zu beachten ist, ist hier zu finden. Es k\u00f6nnen zum Beispiel HTML-Tabellen generiert werden, die Daten aus einer Datenbank enthalten. HTML ist eine statische Sprache, was bedeutet, dass es nicht m\u00f6glich ist, dynamische Inhalte zu erstellen. Twig erm\u00f6glicht es jedoch, diese Problematik zu umgehen und in HTML einzuf\u00fcgen. Die Logik sieht dann so aus: {% for user in users %} {{ user.name }} {% else %} No users have been found. {% endfor %} Wichtig anzumerken ist, dass die Datei mit .twig.html endet. Dies informiert den Webserver, dass die Datei mit Twig verarbeitet werden muss, bevor sie an den Browser gesendet wird. Ein Funktionsaufruf wird mit {% und %} eingeleitet und beendet. Die Logik wird in der Mitte platziert. Die Variablen werden mit {{ und }} angegeben. Man merkt, dass die Logik sehr \u00e4hnlich zu PHP ist. Das liegt daran, dass Twig auf PHP basiert. Twig ist also eine Alternative zu PHP, um HTML-Code zu generieren. Probleml\u00f6sung # Wie bereits angemerkt ist es nicht m\u00f6glich, dass man im HTML dynamische Inhalte erstellen kann. Aus diesem Grund verwendet man PHP, was Schleifen und Pr\u00fcfungen erm\u00f6glicht. PHP Code direkt in das HTML zu schreiben ist jedoch nicht gut, da es die Lesbarkeit des Codes beeintr\u00e4chtigt. Twig erm\u00f6glicht es, PHP-Code in HTML zu schreiben, ohne die Lesbarkeit zu beeintr\u00e4chtigen. Zudem k\u00f6nnen die Templates wiederverwendet werden, was die Wartung erleichtert. Durch flexible Erweiterungen kann Twig an die eigenen Bed\u00fcrfnisse angepasst werden. Sicherheit # Wenn man von Sicherheit spricht, dann ist es wichtig zu wissen, dass Twig automatisch alle Variablen mit Leichtigkeit escapen kann. Das bedeutet, dass Variablen, die in HTML-Code eingef\u00fcgt werden, automatisch validiert und in eine nicht gef\u00e4hrliche Version gebracht werden. Genauer beschrieben wird dieses verhalten im Design . So kann beispielsweise der JavaScript Code: < script > alert ( 'Hello World' ); < /script> In folgendes ungef\u00e4hrliches HTML umgewandelt, was reiner Text ist: &lt; script &gt; alert( &#039; Hello World &#039; ); &lt; /script &gt; Der User merkt von dieser Umwandlung nichts und sieht nur den Text, so wie er ihn eingegeben hat. Die & -Zeichen sind eine andere Art von Zeichen, welche nicht interpretiert werden. So kann zum Beispiel das Zeichen < in &lt; umgewandelt werden.","title":"Twig"},{"location":"LB1/Beschreibung/Twig/#twig","text":"Twig ist eine Template Engine f\u00fcr PHP. Sie ist eine Alternative zu PHP selbst, um HTML-Code zu generieren. Es ist eine Open-Source-Software, die unter der MIT-Lizenz ver\u00f6ffentlicht wurde. Sie ist eine der am h\u00e4ufigsten verwendeten Template-Engines f\u00fcr PHP. Zudem gibt es eine ausf\u00fchrliche Dokumentation, die hier zu finden ist. Da diese f\u00fcr das schnelle Nachschlagen zu ausf\u00fchrlich ist kann auch in einer selbstgeschriebenen Kurzreferenz nachgeschlagen werden. Eine Template-Engine ist eine Software, die HTML-Code aus Daten generiert. Es sollte repetitive Schritte abnehmen und das bauen von eigenst\u00e4ndigen Komponenten erm\u00f6glichen. Der Syntax ist bei allen Engines unterschiedlich, aber die Grundidee ist die gleiche.","title":"Twig"},{"location":"LB1/Beschreibung/Twig/#verwendung","text":"Twig wird verwendet, um wiederkehrender HTML-Code zu extrahieren und so die Wartung zu erleichtern. Die Installation von Twig ist mithilfe von Composer sehr einfach. Wie dies gemacht wird und was beim Controller zu beachten ist, ist hier zu finden. Es k\u00f6nnen zum Beispiel HTML-Tabellen generiert werden, die Daten aus einer Datenbank enthalten. HTML ist eine statische Sprache, was bedeutet, dass es nicht m\u00f6glich ist, dynamische Inhalte zu erstellen. Twig erm\u00f6glicht es jedoch, diese Problematik zu umgehen und in HTML einzuf\u00fcgen. Die Logik sieht dann so aus: {% for user in users %} {{ user.name }} {% else %} No users have been found. {% endfor %} Wichtig anzumerken ist, dass die Datei mit .twig.html endet. Dies informiert den Webserver, dass die Datei mit Twig verarbeitet werden muss, bevor sie an den Browser gesendet wird. Ein Funktionsaufruf wird mit {% und %} eingeleitet und beendet. Die Logik wird in der Mitte platziert. Die Variablen werden mit {{ und }} angegeben. Man merkt, dass die Logik sehr \u00e4hnlich zu PHP ist. Das liegt daran, dass Twig auf PHP basiert. Twig ist also eine Alternative zu PHP, um HTML-Code zu generieren.","title":"Verwendung"},{"location":"LB1/Beschreibung/Twig/#problemlosung","text":"Wie bereits angemerkt ist es nicht m\u00f6glich, dass man im HTML dynamische Inhalte erstellen kann. Aus diesem Grund verwendet man PHP, was Schleifen und Pr\u00fcfungen erm\u00f6glicht. PHP Code direkt in das HTML zu schreiben ist jedoch nicht gut, da es die Lesbarkeit des Codes beeintr\u00e4chtigt. Twig erm\u00f6glicht es, PHP-Code in HTML zu schreiben, ohne die Lesbarkeit zu beeintr\u00e4chtigen. Zudem k\u00f6nnen die Templates wiederverwendet werden, was die Wartung erleichtert. Durch flexible Erweiterungen kann Twig an die eigenen Bed\u00fcrfnisse angepasst werden.","title":"Probleml\u00f6sung"},{"location":"LB1/Beschreibung/Twig/#sicherheit","text":"Wenn man von Sicherheit spricht, dann ist es wichtig zu wissen, dass Twig automatisch alle Variablen mit Leichtigkeit escapen kann. Das bedeutet, dass Variablen, die in HTML-Code eingef\u00fcgt werden, automatisch validiert und in eine nicht gef\u00e4hrliche Version gebracht werden. Genauer beschrieben wird dieses verhalten im Design . So kann beispielsweise der JavaScript Code: < script > alert ( 'Hello World' ); < /script> In folgendes ungef\u00e4hrliches HTML umgewandelt, was reiner Text ist: &lt; script &gt; alert( &#039; Hello World &#039; ); &lt; /script &gt; Der User merkt von dieser Umwandlung nichts und sieht nur den Text, so wie er ihn eingegeben hat. Die & -Zeichen sind eine andere Art von Zeichen, welche nicht interpretiert werden. So kann zum Beispiel das Zeichen < in &lt; umgewandelt werden.","title":"Sicherheit"},{"location":"LB2/01_ConceptMap/","tags":["LB2","Concept Map"],"text":"Concept Map # Ein Concept Map ist eine Art Mindmap, das in der Lage ist, die Beziehungen zwischen den einzelnen Begriffen zu visualisieren. In Form eines Netzes werden Zusammenh\u00e4nge aufgezeigt. Die Beziehungen zwischen den Begriffen werden durch Linien dargestellt, die mit Beschreibungen versehen sind. Die Beziehungen k\u00f6nnen in verschiedene Richtungen sein, z.B. \"ist Teil von\", \"referenziert auf\", \"ist eine Art von\" usw. Im folgendem Diagramm werden die Begriffe der LB1 anhand eines Concept Maps dargestellt. Begriffe # SSR / CSR MVC Template-Engine Use-Case Aktoren Funktionale Anforderung Testszenario Testfall","title":"1. Concept Map"},{"location":"LB2/01_ConceptMap/#concept-map","text":"Ein Concept Map ist eine Art Mindmap, das in der Lage ist, die Beziehungen zwischen den einzelnen Begriffen zu visualisieren. In Form eines Netzes werden Zusammenh\u00e4nge aufgezeigt. Die Beziehungen zwischen den Begriffen werden durch Linien dargestellt, die mit Beschreibungen versehen sind. Die Beziehungen k\u00f6nnen in verschiedene Richtungen sein, z.B. \"ist Teil von\", \"referenziert auf\", \"ist eine Art von\" usw. Im folgendem Diagramm werden die Begriffe der LB1 anhand eines Concept Maps dargestellt.","title":"Concept Map"},{"location":"LB2/01_ConceptMap/#begriffe","text":"SSR / CSR MVC Template-Engine Use-Case Aktoren Funktionale Anforderung Testszenario Testfall","title":"Begriffe"},{"location":"LB2/02_ConceptMap/","tags":["LB2","Concept Map"],"text":"Concept Map # Begriffe # if-Funktion bei Twig Mocking von Daten Rendern von View empty()-Funktion sanitizen von Daten","title":"2. Concept Map"},{"location":"LB2/02_ConceptMap/#concept-map","text":"","title":"Concept Map"},{"location":"LB2/02_ConceptMap/#begriffe","text":"if-Funktion bei Twig Mocking von Daten Rendern von View empty()-Funktion sanitizen von Daten","title":"Begriffe"},{"location":"LB2/03_ConceptMap/","tags":["LB2","Concept Map"],"text":"Concept Map # Begriffe # mysql-Datenverbindung (alte Extension) mysqli-Datenverbindung (improved Extension) PDO-Datenverbindung PostgreSQL MySQL Prepared-Statement SQL-Injection","title":"3. Concept Map"},{"location":"LB2/03_ConceptMap/#concept-map","text":"","title":"Concept Map"},{"location":"LB2/03_ConceptMap/#begriffe","text":"mysql-Datenverbindung (alte Extension) mysqli-Datenverbindung (improved Extension) PDO-Datenverbindung PostgreSQL MySQL Prepared-Statement SQL-Injection","title":"Begriffe"},{"location":"LB2/04_ConceptMap/","tags":["LB2","Concept Map"],"text":"Concept Map # Begriffe # Sessions Cookies $_COOKIE $_SESSION session_helper.php Authorisierung (Routen sch\u00fctzen) JSON (in Datenbank)","title":"4. Concept Map"},{"location":"LB2/04_ConceptMap/#concept-map","text":"","title":"Concept Map"},{"location":"LB2/04_ConceptMap/#begriffe","text":"Sessions Cookies $_COOKIE $_SESSION session_helper.php Authorisierung (Routen sch\u00fctzen) JSON (in Datenbank)","title":"Begriffe"},{"location":"PHP/Basics/","tags":["PHP","Beispiele"],"text":"PHP Basics # Hier ist eine Zusammenfassung mit Beispielen aller wichtigen Methoden und Konstanten, die PHP verf\u00fcgt. Zus\u00e4tzlich gibt es ein sehr kompaktes Cheatsheet , welches nur die wichtigsten Stichworte enth\u00e4lt. Hello World # Mithilfe der Markierung <?php wird gekennzeichnet, dass ein PHP-Abschnitt folgt. In diesem k\u00f6nnen PHP-Methoden ausgef\u00fchrt werden. Wichtig ist, dass Methoden mit einem ; geschlossen werden. PHP Ausgabe <? // Kurzform von `<?php` echo \"Hello World!\" ; echo \"<h1>Hello World!</h1>\" ; //(1) // ?> (2) Wenn PHP \u00fcber einen Browser aufgerufen wird, dann k\u00f6nnen sogar HTML-Elemente dargestellt werden. Der Schlusstag ist optional und kann verwendet werden, falls der PHP-Abschnitt beendet werden sollte. Die kann n\u00fctzlich sein, wenn PHP in eine HTML-Seite eingebunden ist. Hello World! Hello World! Erweitertes Beispiel # Funktionen k\u00f6nnen auch mit Parametern und R\u00fcckgabewerten erstellt werden. Die Datentypen sind optional, da PHP automatisch die richtigen Datentypen ermittelt. Mithilfe eines $ am Anfang werden Variablen deklariert. Die Namensgebung ist nach dem CamelCase ( someAwesomeFunc ) format. Funktionen k\u00f6nnen in PHP nicht \u00fcberladen erden. Es muss somit immer ein anderer Name gegeben werden. Parameter in Funktionen sind Call-By-Value, d.h. dass die Werte nicht ver\u00e4ndert werden k\u00f6nnen. Um die Werte zu ver\u00e4ndern, muss ein Referenz-Operator ( & ) verwendet werden. Erweitertes Beispiel <?php /** * Funktion zum Addieren von zwei Zahlen (1) * * @param integer $first Erster Wert * @param integer $second Zweiter Wert * @return integer Summe der beiden Zahlen */ function addNumbers ( int $first , int $second ) : int { return $first + $second ; } // Aufruf der Funktion addNumbers ( 2 , 3 ); // Automatisches Casten (2) addNumbers ( 2 , \"3\" ); Mithilfe der Datentypen k\u00f6nnen die Parameter und R\u00fcckgabewerte definiert werden. Dies hilft dabei, Fehler zu vermeiden, da PHP die Parameter in den richtigen Typ umwandelt. Mithilfe von declare(strict_types=1); kann die Datentyp-Kompatibilit\u00e4t aufgehoben werden. So m\u00fcssen die richtigen Datentypen angegeben werden.","title":"Basics"},{"location":"PHP/Basics/#php-basics","text":"Hier ist eine Zusammenfassung mit Beispielen aller wichtigen Methoden und Konstanten, die PHP verf\u00fcgt. Zus\u00e4tzlich gibt es ein sehr kompaktes Cheatsheet , welches nur die wichtigsten Stichworte enth\u00e4lt.","title":"PHP Basics"},{"location":"PHP/Basics/#hello-world","text":"Mithilfe der Markierung <?php wird gekennzeichnet, dass ein PHP-Abschnitt folgt. In diesem k\u00f6nnen PHP-Methoden ausgef\u00fchrt werden. Wichtig ist, dass Methoden mit einem ; geschlossen werden. PHP Ausgabe <? // Kurzform von `<?php` echo \"Hello World!\" ; echo \"<h1>Hello World!</h1>\" ; //(1) // ?> (2) Wenn PHP \u00fcber einen Browser aufgerufen wird, dann k\u00f6nnen sogar HTML-Elemente dargestellt werden. Der Schlusstag ist optional und kann verwendet werden, falls der PHP-Abschnitt beendet werden sollte. Die kann n\u00fctzlich sein, wenn PHP in eine HTML-Seite eingebunden ist. Hello World!","title":"Hello World"},{"location":"PHP/Basics/#erweitertes-beispiel","text":"Funktionen k\u00f6nnen auch mit Parametern und R\u00fcckgabewerten erstellt werden. Die Datentypen sind optional, da PHP automatisch die richtigen Datentypen ermittelt. Mithilfe eines $ am Anfang werden Variablen deklariert. Die Namensgebung ist nach dem CamelCase ( someAwesomeFunc ) format. Funktionen k\u00f6nnen in PHP nicht \u00fcberladen erden. Es muss somit immer ein anderer Name gegeben werden. Parameter in Funktionen sind Call-By-Value, d.h. dass die Werte nicht ver\u00e4ndert werden k\u00f6nnen. Um die Werte zu ver\u00e4ndern, muss ein Referenz-Operator ( & ) verwendet werden. Erweitertes Beispiel <?php /** * Funktion zum Addieren von zwei Zahlen (1) * * @param integer $first Erster Wert * @param integer $second Zweiter Wert * @return integer Summe der beiden Zahlen */ function addNumbers ( int $first , int $second ) : int { return $first + $second ; } // Aufruf der Funktion addNumbers ( 2 , 3 ); // Automatisches Casten (2) addNumbers ( 2 , \"3\" ); Mithilfe der Datentypen k\u00f6nnen die Parameter und R\u00fcckgabewerte definiert werden. Dies hilft dabei, Fehler zu vermeiden, da PHP die Parameter in den richtigen Typ umwandelt. Mithilfe von declare(strict_types=1); kann die Datentyp-Kompatibilit\u00e4t aufgehoben werden. So m\u00fcssen die richtigen Datentypen angegeben werden.","title":"Erweitertes Beispiel"},{"location":"PHP/Installation/","tags":["PHP","Anleitung"],"text":"Installation # Um PHP auszuf\u00fchren, braucht es einen Webserver, welcher PHP versteht und verarbeiten kann. Dabei kann zwischen Produktionsserver und Entwicklungsserver unterschieden werden. Development vs Production - Konfigurationen # PHP-Configuration stellen wir auf Development RUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\" # RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\" Docker # Der Trend der Containerisierung hat sich auch auf PHP geschlagen. \u00dcber ein einfaches Dockerfile werden alle Abh\u00e4ngigkeiten installiert und aufgesetzt. Wenn mehr Leistung gebraucht wird, dann wird einfach ein neuer Container gestartet. Zudem wird einzig eine Installation von Docker ben\u00f6tigt. Eine Vorlage kann hier heruntergeladen werden. Es ist PHP, Adminier , MySQL und Composer vorinstalliert. ( Vorlage von: Herr Inauen ) XAMPP # Eine etwas veraltete und und nicht mehr empfehlenswerte Art PHP zu verwenden ist XAMPP. Dies ist ein kostenloser Webserver, welcher PHP versteht und verarbeiten kann. Mithilfe von XAMPP kann HTML, PHP, Perl und MariaDB ausgef\u00fchrt werden. Der ganze Tech-Stack wird dar\u00fcber verwaltet. Um XAMPP zu verwenden, muss nur das Programm installiert werden, welches sich auf der offiziellen Webseite befindet. Nach belieben k\u00f6nnen dann Einstellungen vorgenommen werden. Unter dem C:\\ -Laufwerk m\u00fcssen dann die Dateien in den HT-Docs Ordner gelegt werden. Alle Dateien darin k\u00f6nnen dann \u00fcber den Browser und den Namen aufgerufen werden. Der Nachteil von diesem einfachen Setup ist, dass alles sich in einem Laufwerk befindet. Wenn mehrere Projekte im gleichen Ordner sind, dann gibt es Konflikte und erfordert erweiterte Konfigurationen . Zudem entspricht der Unterordner und Dateiname auch der URL. Routing oder Sonstiges, kann somit nicht ohne Weiteres gemacht werden. Wer mehrere \u00e4ltere Projekte hat, der kann mit XAMPP leider nur eine PHP-Version verwenden. IDE # F\u00fcr die Entwicklung mit mehreren Projekten oder unterschiedlichen Konfigurationen gibt es eine einfachere L\u00f6sung als XAMPP. Es gibt IDE's, welche das Ausf\u00fchren und Entwickeln von PHP unterst\u00fctzen. Dar\u00fcber k\u00f6nnen unterschiedliche Versionen, Konfigurationen und Speicherordner verwendet werden. PHP-Storm # Jetbrains hat f\u00fcr jede bekannte Programmiersprache eine IDE. Somit gibt es auch eine f\u00fcr PHP, welche Phpstorm heisst. Es bietet komplette Unterst\u00fctzung f\u00fcr die gr\u00f6ssten PHP-Frameworks und stellt n\u00fctzliche Autovervollst\u00e4ndigung zur Verf\u00fcgung. Mithilfe der eingebauten Entwicklertools k\u00f6nnen Datenbanken, Docker und andere Tools verwendet werden. Der Nachteil von dieser IDE ist, dass sie kostenpflichtig ist. Visual Studio Code # Visual Studio Code kann mit unz\u00e4hligen Extensions auch zur voll ausger\u00fcsteten PHP-Entwicklungsumgebung werden. Dazu muss PHP als Bin\u00e4r und die Extension Five-Server heruntergeladen werden. In den Einstellungen muss dann nur noch angegeben werden, wo sich die PHP-Dateien befinden und schon kann es losgehen.","title":"Installation"},{"location":"PHP/Installation/#installation","text":"Um PHP auszuf\u00fchren, braucht es einen Webserver, welcher PHP versteht und verarbeiten kann. Dabei kann zwischen Produktionsserver und Entwicklungsserver unterschieden werden. Development vs Production - Konfigurationen # PHP-Configuration stellen wir auf Development RUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\" # RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"","title":"Installation"},{"location":"PHP/Installation/#docker","text":"Der Trend der Containerisierung hat sich auch auf PHP geschlagen. \u00dcber ein einfaches Dockerfile werden alle Abh\u00e4ngigkeiten installiert und aufgesetzt. Wenn mehr Leistung gebraucht wird, dann wird einfach ein neuer Container gestartet. Zudem wird einzig eine Installation von Docker ben\u00f6tigt. Eine Vorlage kann hier heruntergeladen werden. Es ist PHP, Adminier , MySQL und Composer vorinstalliert. ( Vorlage von: Herr Inauen )","title":"Docker"},{"location":"PHP/Installation/#xampp","text":"Eine etwas veraltete und und nicht mehr empfehlenswerte Art PHP zu verwenden ist XAMPP. Dies ist ein kostenloser Webserver, welcher PHP versteht und verarbeiten kann. Mithilfe von XAMPP kann HTML, PHP, Perl und MariaDB ausgef\u00fchrt werden. Der ganze Tech-Stack wird dar\u00fcber verwaltet. Um XAMPP zu verwenden, muss nur das Programm installiert werden, welches sich auf der offiziellen Webseite befindet. Nach belieben k\u00f6nnen dann Einstellungen vorgenommen werden. Unter dem C:\\ -Laufwerk m\u00fcssen dann die Dateien in den HT-Docs Ordner gelegt werden. Alle Dateien darin k\u00f6nnen dann \u00fcber den Browser und den Namen aufgerufen werden. Der Nachteil von diesem einfachen Setup ist, dass alles sich in einem Laufwerk befindet. Wenn mehrere Projekte im gleichen Ordner sind, dann gibt es Konflikte und erfordert erweiterte Konfigurationen . Zudem entspricht der Unterordner und Dateiname auch der URL. Routing oder Sonstiges, kann somit nicht ohne Weiteres gemacht werden. Wer mehrere \u00e4ltere Projekte hat, der kann mit XAMPP leider nur eine PHP-Version verwenden.","title":"XAMPP"},{"location":"PHP/Installation/#ide","text":"F\u00fcr die Entwicklung mit mehreren Projekten oder unterschiedlichen Konfigurationen gibt es eine einfachere L\u00f6sung als XAMPP. Es gibt IDE's, welche das Ausf\u00fchren und Entwickeln von PHP unterst\u00fctzen. Dar\u00fcber k\u00f6nnen unterschiedliche Versionen, Konfigurationen und Speicherordner verwendet werden.","title":"IDE"},{"location":"PHP/Installation/#php-storm","text":"Jetbrains hat f\u00fcr jede bekannte Programmiersprache eine IDE. Somit gibt es auch eine f\u00fcr PHP, welche Phpstorm heisst. Es bietet komplette Unterst\u00fctzung f\u00fcr die gr\u00f6ssten PHP-Frameworks und stellt n\u00fctzliche Autovervollst\u00e4ndigung zur Verf\u00fcgung. Mithilfe der eingebauten Entwicklertools k\u00f6nnen Datenbanken, Docker und andere Tools verwendet werden. Der Nachteil von dieser IDE ist, dass sie kostenpflichtig ist.","title":"PHP-Storm"},{"location":"PHP/Installation/#visual-studio-code","text":"Visual Studio Code kann mit unz\u00e4hligen Extensions auch zur voll ausger\u00fcsteten PHP-Entwicklungsumgebung werden. Dazu muss PHP als Bin\u00e4r und die Extension Five-Server heruntergeladen werden. In den Einstellungen muss dann nur noch angegeben werden, wo sich die PHP-Dateien befinden und schon kann es losgehen.","title":"Visual Studio Code"},{"location":"PHP/OOP/","tags":["PHP","Aufgaben"],"text":"Objekt Orientierte Programmierung # In der Objekt Orientierte Programmierung ( OOP ) werden Objekte verwendet, um Daten und Funktionen zu gruppieren . Klassen sind die Grundlage f\u00fcr die Objektorientierung. Sie definieren die Eigenschaften und Methoden , die ein Objekt haben kann. Objekte sind Instanzen von Klassen. Sie k\u00f6nnen mehrere Objekte einer Klasse erstellen. Objekte k\u00f6nnen Daten in Feldern speichern und Methoden ausf\u00fchren. PHP war zu Beginn eine funktionale Sprache. Durch die Einf\u00fchrung von Klassen wurde PHP zu einer objektorientierten Sprache. Die OOP wurde in PHP 3 eingef\u00fchrt. PHP 4 und 5 haben die OOP weiterentwickelt. Dieses Verhalten ist bemerkbar, da nicht alle \u00fcblichen OOP Konzepte vorhanden sind. Vorteile # Vorteil von OOP ist, dass der Code wiederverwendbar ist. So entsteht nur minimaler doppelter Code, was zur \u00dcbersicht und Wartbarkeit hilft. Durch die Struktur ist es einfacher zu verstehen, was der Code macht und wie Prozesse ablaufen. Unser Leben besteht aus Objekten, also wieso nicht auch unser Code? Klassen # Eine Klasse ist ein Bauplan f\u00fcr Objekte. Sie beschreibt die Eigenschaften und Methoden , die ein Objekt haben soll. Das Objekt ist dann eine Instanz dieser Vorlage. Mithilfe von new kann eine Klasse instanziiert werden. Klassen k\u00f6nnen untereinander vererben . So k\u00f6nnen Methoden und Eigenschaften von einer Klasse auf eine andere \u00fcbertragen werden. Eine Klasse kann in PHP \u00fcber folgenden Syntax definiert werden: <? class Klassenname { // Attribute // Methoden } $klasse = new Klassenname (); Interfaces # Interfaces sind Anforderungen an eine Klasse . Darin kann beschrieben werden was f\u00fcr Methoden und Attribute eine Klasse haben muss. Eine Klasse kann mehrere Interfaces implementieren. Das Interface wird mit implements definiert. Eine Klasse kann mehrere Interfaces implementieren . Ein Interface kann nicht instanziiert werden. Es wird nur verwendet um zu definieren was eine Klasse k\u00f6nnen muss. Ein Interface kann mit folgendem Syntax definiert werden: <? interface InterfaceName { // Methoden } class Klassenname implements InterfaceName { // Attribute // Methoden } Attribute # Properties sind Variablen , die in einer Klasse definiert werden. Sie k\u00f6nnen \u00fcber die -> -Notation aufgerufen werden, was vergleichbar mit dem Punkt ( . ) aus anderen Sprachen ist. F\u00fcr lokale Variablen der Klasse wird $this verwendet. F\u00fcr statische Variablen kann self verwendet werden. <? class Klassenname { public $name = \"Max\" ; } Methoden # Methoden sind Funktionen , die in einer Klasse definiert werden. Sie k\u00f6nnen gleich wie die Eigenschaften aufgerufen werden. Eine Methode wird nicht automatisch ausgef\u00fchrt, sondern muss explizit aufgerufen werden. Statische Methoden werden mit static gekennzeichnet und k\u00f6nnen ohne Instanziierung aufgerufen werden. Methoden k\u00f6nnen wie in anderen Sprachen auch \u00dcberschrieben werden. \u00dcberladen ist jedoch in PHP nicht m\u00f6glich. <? class Klassenname { public function getName () { return $this -> name ; } } Konstruktor # Der Konstruktor ist eine Methode , die bei der Erstellung eines Objektes ausgef\u00fchrt wird. Er wird mit __construct() definiert. Der Konstruktor kann auch Parameter enthalten, die beim Erstellen des Objektes \u00fcbergeben werden k\u00f6nnen. Mithilfe eines Dekonstruktors k\u00f6nnen diese Werte am Ende der Lebenszeit wieder abger\u00e4umt werden. <? class Klassenname { public function __construct ( $name ) { $this -> name = $name ; } public function __destruct () { echo \"Objekt wird zerst\u00f6rt\" ; } } Zugriffsmodifizierer # Zugriffsmodifizierer sind Schl\u00fcsselw\u00f6rter, die die Sichtbarkeit von Eigenschaften und Methoden in einer Klasse steuern. Es gibt drei Modifizierer: Modifizierer Beschreibung public Die Eigenschaft oder Methode ist f\u00fcr alle sichtbar. protected Die Eigenschaft oder Methode ist nur f\u00fcr die Klasse und abgeleitete Klassen sichtbar. private Die Eigenschaft oder Methode ist nur f\u00fcr die Klasse sichtbar. Grunds\u00e4tzlich ist es eine gute Idee , Eigenschaften und Methoden auf private zu setzen, wenn sie nicht ben\u00f6tigt werden. Erst wenn es n\u00f6tig ist, dann wird die Sichtbarkeit auf protected oder public gesetzt. Vererbung # Vererbung erm\u00f6glicht es, Eigenschaften und Methoden von einer Klasse zu erben . Die Klasse, die erbt, wird Kindklasse genannt. Die Klasse, von der geerbt wird, wird Elternklasse genannt. Die Vererbung wird mit extends definiert. Beim Erben werden alle Attribute und Methoden der Elternklasse \u00fcbernommen. Die Kindklasse kann diese Eigenschaften und Methoden \u00fcberschreiben . Das hei\u00dft, dass die Kindklasse die Eigenschaften und Methoden der Elternklasse \u00fcberschreibt . Die Kindklasse kann auch neue Eigenschaften und Methoden hinzuf\u00fcgen. Die Vererbung kann beliebig tief sein. <? class Elternklasse { public $name = \"Max\" ; } class Kindklasse extends Elternklasse { public function getName () { return $this -> name ; } } \u00dcberladen # Beim Konzept vom \u00dcberladen wird eine Methode mit dem selben Namen in einer Klasse definiert. Die Methode wird dann automatisch aufgerufen, wenn die Parameter mit denen der Methode \u00fcbereinstimmen. Das \u00dcberladen ist in PHP nicht m\u00f6glich . Es gibt jedoch eine M\u00f6glichkeit, das \u00dcberladen zu simulieren. Dazu wird eine Methode mit dem selben Namen definiert. Die Methode wird dann manuell aufgerufen, wenn die Parameter mit denen der Methode \u00fcbereinstimmen. <? class Klasse { public function __call ( $member , $arguments ) { $numberOfArguments = count ( $arguments ); if ( method_exists ( $this , $function = $member . $numberOfArguments )) { call_user_func_array ( array ( $this , $function ), $arguments ); } } private function multiply ( $argument1 ) { echo $argument1 ; } private function multiply2 ( $argument1 , $argument2 ) { echo $argument1 * $argument2 ; } } $class = new Klasse ; $class -> multiply ( 2 ); $class -> multiply ( 5 , 7 ); \u00dcberschreiben # Das \u00dcberschreiben von Methoden wird mit dem wiederverwenden des Methodennamens gemacht. Die Methode wird dann in der Kindklasse \u00fcberschrieben. Die Methode in der Elternklasse wird dann nicht mehr verwendet. Das \u00dcberschreiben kann auch mit dem Schl\u00fcsselwort parent gemacht werden. Das ruft die Methode in der Elternklasse auf. <? class Elternklasse { public function getName () { return \"Max\" ; } } class Kindklasse extends Elternklasse { public function getName () { return parent :: getName () . \" Mustermann\" ; } }","title":"OOP"},{"location":"PHP/OOP/#objekt-orientierte-programmierung","text":"In der Objekt Orientierte Programmierung ( OOP ) werden Objekte verwendet, um Daten und Funktionen zu gruppieren . Klassen sind die Grundlage f\u00fcr die Objektorientierung. Sie definieren die Eigenschaften und Methoden , die ein Objekt haben kann. Objekte sind Instanzen von Klassen. Sie k\u00f6nnen mehrere Objekte einer Klasse erstellen. Objekte k\u00f6nnen Daten in Feldern speichern und Methoden ausf\u00fchren. PHP war zu Beginn eine funktionale Sprache. Durch die Einf\u00fchrung von Klassen wurde PHP zu einer objektorientierten Sprache. Die OOP wurde in PHP 3 eingef\u00fchrt. PHP 4 und 5 haben die OOP weiterentwickelt. Dieses Verhalten ist bemerkbar, da nicht alle \u00fcblichen OOP Konzepte vorhanden sind.","title":"Objekt Orientierte Programmierung"},{"location":"PHP/OOP/#vorteile","text":"Vorteil von OOP ist, dass der Code wiederverwendbar ist. So entsteht nur minimaler doppelter Code, was zur \u00dcbersicht und Wartbarkeit hilft. Durch die Struktur ist es einfacher zu verstehen, was der Code macht und wie Prozesse ablaufen. Unser Leben besteht aus Objekten, also wieso nicht auch unser Code?","title":"Vorteile"},{"location":"PHP/OOP/#klassen","text":"Eine Klasse ist ein Bauplan f\u00fcr Objekte. Sie beschreibt die Eigenschaften und Methoden , die ein Objekt haben soll. Das Objekt ist dann eine Instanz dieser Vorlage. Mithilfe von new kann eine Klasse instanziiert werden. Klassen k\u00f6nnen untereinander vererben . So k\u00f6nnen Methoden und Eigenschaften von einer Klasse auf eine andere \u00fcbertragen werden. Eine Klasse kann in PHP \u00fcber folgenden Syntax definiert werden: <? class Klassenname { // Attribute // Methoden } $klasse = new Klassenname ();","title":"Klassen"},{"location":"PHP/OOP/#interfaces","text":"Interfaces sind Anforderungen an eine Klasse . Darin kann beschrieben werden was f\u00fcr Methoden und Attribute eine Klasse haben muss. Eine Klasse kann mehrere Interfaces implementieren. Das Interface wird mit implements definiert. Eine Klasse kann mehrere Interfaces implementieren . Ein Interface kann nicht instanziiert werden. Es wird nur verwendet um zu definieren was eine Klasse k\u00f6nnen muss. Ein Interface kann mit folgendem Syntax definiert werden: <? interface InterfaceName { // Methoden } class Klassenname implements InterfaceName { // Attribute // Methoden }","title":"Interfaces"},{"location":"PHP/OOP/#attribute","text":"Properties sind Variablen , die in einer Klasse definiert werden. Sie k\u00f6nnen \u00fcber die -> -Notation aufgerufen werden, was vergleichbar mit dem Punkt ( . ) aus anderen Sprachen ist. F\u00fcr lokale Variablen der Klasse wird $this verwendet. F\u00fcr statische Variablen kann self verwendet werden. <? class Klassenname { public $name = \"Max\" ; }","title":"Attribute"},{"location":"PHP/OOP/#methoden","text":"Methoden sind Funktionen , die in einer Klasse definiert werden. Sie k\u00f6nnen gleich wie die Eigenschaften aufgerufen werden. Eine Methode wird nicht automatisch ausgef\u00fchrt, sondern muss explizit aufgerufen werden. Statische Methoden werden mit static gekennzeichnet und k\u00f6nnen ohne Instanziierung aufgerufen werden. Methoden k\u00f6nnen wie in anderen Sprachen auch \u00dcberschrieben werden. \u00dcberladen ist jedoch in PHP nicht m\u00f6glich. <? class Klassenname { public function getName () { return $this -> name ; } }","title":"Methoden"},{"location":"PHP/OOP/#konstruktor","text":"Der Konstruktor ist eine Methode , die bei der Erstellung eines Objektes ausgef\u00fchrt wird. Er wird mit __construct() definiert. Der Konstruktor kann auch Parameter enthalten, die beim Erstellen des Objektes \u00fcbergeben werden k\u00f6nnen. Mithilfe eines Dekonstruktors k\u00f6nnen diese Werte am Ende der Lebenszeit wieder abger\u00e4umt werden. <? class Klassenname { public function __construct ( $name ) { $this -> name = $name ; } public function __destruct () { echo \"Objekt wird zerst\u00f6rt\" ; } }","title":"Konstruktor"},{"location":"PHP/OOP/#zugriffsmodifizierer","text":"Zugriffsmodifizierer sind Schl\u00fcsselw\u00f6rter, die die Sichtbarkeit von Eigenschaften und Methoden in einer Klasse steuern. Es gibt drei Modifizierer: Modifizierer Beschreibung public Die Eigenschaft oder Methode ist f\u00fcr alle sichtbar. protected Die Eigenschaft oder Methode ist nur f\u00fcr die Klasse und abgeleitete Klassen sichtbar. private Die Eigenschaft oder Methode ist nur f\u00fcr die Klasse sichtbar. Grunds\u00e4tzlich ist es eine gute Idee , Eigenschaften und Methoden auf private zu setzen, wenn sie nicht ben\u00f6tigt werden. Erst wenn es n\u00f6tig ist, dann wird die Sichtbarkeit auf protected oder public gesetzt.","title":"Zugriffsmodifizierer"},{"location":"PHP/OOP/#vererbung","text":"Vererbung erm\u00f6glicht es, Eigenschaften und Methoden von einer Klasse zu erben . Die Klasse, die erbt, wird Kindklasse genannt. Die Klasse, von der geerbt wird, wird Elternklasse genannt. Die Vererbung wird mit extends definiert. Beim Erben werden alle Attribute und Methoden der Elternklasse \u00fcbernommen. Die Kindklasse kann diese Eigenschaften und Methoden \u00fcberschreiben . Das hei\u00dft, dass die Kindklasse die Eigenschaften und Methoden der Elternklasse \u00fcberschreibt . Die Kindklasse kann auch neue Eigenschaften und Methoden hinzuf\u00fcgen. Die Vererbung kann beliebig tief sein. <? class Elternklasse { public $name = \"Max\" ; } class Kindklasse extends Elternklasse { public function getName () { return $this -> name ; } }","title":"Vererbung"},{"location":"PHP/OOP/#uberladen","text":"Beim Konzept vom \u00dcberladen wird eine Methode mit dem selben Namen in einer Klasse definiert. Die Methode wird dann automatisch aufgerufen, wenn die Parameter mit denen der Methode \u00fcbereinstimmen. Das \u00dcberladen ist in PHP nicht m\u00f6glich . Es gibt jedoch eine M\u00f6glichkeit, das \u00dcberladen zu simulieren. Dazu wird eine Methode mit dem selben Namen definiert. Die Methode wird dann manuell aufgerufen, wenn die Parameter mit denen der Methode \u00fcbereinstimmen. <? class Klasse { public function __call ( $member , $arguments ) { $numberOfArguments = count ( $arguments ); if ( method_exists ( $this , $function = $member . $numberOfArguments )) { call_user_func_array ( array ( $this , $function ), $arguments ); } } private function multiply ( $argument1 ) { echo $argument1 ; } private function multiply2 ( $argument1 , $argument2 ) { echo $argument1 * $argument2 ; } } $class = new Klasse ; $class -> multiply ( 2 ); $class -> multiply ( 5 , 7 );","title":"\u00dcberladen"},{"location":"PHP/OOP/#uberschreiben","text":"Das \u00dcberschreiben von Methoden wird mit dem wiederverwenden des Methodennamens gemacht. Die Methode wird dann in der Kindklasse \u00fcberschrieben. Die Methode in der Elternklasse wird dann nicht mehr verwendet. Das \u00dcberschreiben kann auch mit dem Schl\u00fcsselwort parent gemacht werden. Das ruft die Methode in der Elternklasse auf. <? class Elternklasse { public function getName () { return \"Max\" ; } } class Kindklasse extends Elternklasse { public function getName () { return parent :: getName () . \" Mustermann\" ; } }","title":"\u00dcberschreiben"},{"location":"PHP/Start/","tags":["PHP"],"text":"PHP # PHP ist ein Acronym f\u00fcr PHP: Hypertext Preprocessor oder Personal Home Page . Die Skriptsprache, welche haupts\u00e4chlich f\u00fcr die Webentwicklung verwendet wird, kann direkt ins HTML eingebettet werden. Mit \u00fcber 1'000 eingebauten Methoden hat PHP f\u00fcr jeden Anwendungsfall ein geeignetes Werkzeug. Traditionell wird PHP f\u00fcr Server-Side Scripting verwendet. Das heisst, dass der Server das Script ausf\u00fchrt und auswertet. Das Ergebnis ( gerendertes HTML ) wird dann zur\u00fcckgesendet und beim Client dargestellt. Meist wird dies in Kombination mit WordPress gemacht. Installation # Da PHP schon etwas \u00e4lter ist, gibt es nicht wie bei anderen Programmiersprachen eine einfache Installation. Wie man PHP am besten installiert und einrichtet, kann unter Installation nachgeschaut werden. Basics # PHP verf\u00fcgt \u00fcber unz\u00e4hlige Methoden und Design Patterns . Alle diese im \u00dcberblick zu behalten ist sehr schwierig. Aus diesem Grund gibt es unter Basics eine Zusammenfassung der wichtigsten Methoden und Konstanten. Zus\u00e4tzlich gibt es ein sehr kompaktes Cheatsheet , welches perfekt f\u00fcr Pr\u00fcfungen oder schnelles Nachschlagen geeignet ist. Appendix # Dateien, welche nicht direkt mit dem Unterricht oder PHP zu tun haben aber trotzdem n\u00fctzlich sein k\u00f6nnen, sind unter Appendix zu finden. Dazu geh\u00f6rt zum Beispiel die Struktur des Basisprojektes oder das Thema rendering.","title":"\u00dcbersicht"},{"location":"PHP/Start/#php","text":"PHP ist ein Acronym f\u00fcr PHP: Hypertext Preprocessor oder Personal Home Page . Die Skriptsprache, welche haupts\u00e4chlich f\u00fcr die Webentwicklung verwendet wird, kann direkt ins HTML eingebettet werden. Mit \u00fcber 1'000 eingebauten Methoden hat PHP f\u00fcr jeden Anwendungsfall ein geeignetes Werkzeug. Traditionell wird PHP f\u00fcr Server-Side Scripting verwendet. Das heisst, dass der Server das Script ausf\u00fchrt und auswertet. Das Ergebnis ( gerendertes HTML ) wird dann zur\u00fcckgesendet und beim Client dargestellt. Meist wird dies in Kombination mit WordPress gemacht.","title":"PHP"},{"location":"PHP/Start/#installation","text":"Da PHP schon etwas \u00e4lter ist, gibt es nicht wie bei anderen Programmiersprachen eine einfache Installation. Wie man PHP am besten installiert und einrichtet, kann unter Installation nachgeschaut werden.","title":"Installation"},{"location":"PHP/Start/#basics","text":"PHP verf\u00fcgt \u00fcber unz\u00e4hlige Methoden und Design Patterns . Alle diese im \u00dcberblick zu behalten ist sehr schwierig. Aus diesem Grund gibt es unter Basics eine Zusammenfassung der wichtigsten Methoden und Konstanten. Zus\u00e4tzlich gibt es ein sehr kompaktes Cheatsheet , welches perfekt f\u00fcr Pr\u00fcfungen oder schnelles Nachschlagen geeignet ist.","title":"Basics"},{"location":"PHP/Start/#appendix","text":"Dateien, welche nicht direkt mit dem Unterricht oder PHP zu tun haben aber trotzdem n\u00fctzlich sein k\u00f6nnen, sind unter Appendix zu finden. Dazu geh\u00f6rt zum Beispiel die Struktur des Basisprojektes oder das Thema rendering.","title":"Appendix"},{"location":"PHP/Appendix/ArrayFunktionen/","tags":["PHP","Cheatsheet"],"text":"Arrays # Arrays sind eine Sammlung von Werten . Sie k\u00f6nnen numerisch oder assoziativ sein. Numerische Arrays haben eine Nummer als Schl\u00fcssel. Assoziative Arrays haben einen Text als Schl\u00fcssel. Arrays k\u00f6nnen auch mehrdimensional sein. Das heisst, dass ein Array in einem Array enthalten sein kann. Arrays k\u00f6nnen auch Objekte enthalten. Einen eigenen Quicksort in PHP implementiert kann hier gefunden werden. Mithilfe von print_r kann ein Array in lesbarer Form ausgegeben werden. Um doch mehr Informationen zu bekommen kann var_dump verwendet werden. Dort wird der Typ und weitere Debugging Informationen ausgegeben. Arrays in Strings konvertieren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo implode ( \", \" , $array ); //Manuel, Herr Inauen, Herr M\u00fcller Strings in Arrays konvertieren <?php $string = \"Manuel, Herr Inauen, Herr M\u00fcller\" ; $array = explode ( \", \" , $string ); echo var_dump ( $namen ); // (1) var_dump() gibt den Inhalt einer Variable aus. Dies ist sehr n\u00fctzlich, um den Inhalt einer Variable zu \u00fcberpr\u00fcfen. Hier in diesem Beispiel w\u00e4re die Ausgabe: array(3) { [0]=> string(6) \"Manuel\" [1]=> string(11) \"Herr Inauen\" [2]=> string(10) \"Herr M\u00fcller\" } Array Elemente z\u00e4hlen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo count ( $array ); //3 Array Elemente hinzuf\u00fcgen / entfernen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" ); array_push ( $array , \"Herr M\u00fcller\" ); echo var_dump ( $array ); // Manuel, Herr Inauen, Herr M\u00fcller array_pop ( $array ); echo var_dump ( $array ); // Manuel, Herr Inauen Array Elemente sortieren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); sort ( $array ); // (1) echo var_dump ( $array ); // Herr Inauen, Herr M\u00fcller, Manuel sort() sortiert die Elemente aufsteigend . rsort() sortiert die Elemente absteigend . Als Sortieralgorithmus wird Quicksort verwendet. Array Elemente mischen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); shuffle ( $array ); echo var_dump ( $array ); // Herr M\u00fcller, Herr Inauen, Manuel Array Elemente umkehren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); $array = array_reverse ( $array ); echo var_dump ( $array ); // Herr M\u00fcller, Herr Inauen, Manuel Array durchsuchen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo array_search ( \"Herr Inauen\" , $array ); //1 (1) Die Funktion array_search() gibt den Schl\u00fcssel des gesuchten Elements zur\u00fcck. Wenn das Element nicht gefunden wird, wird false zur\u00fcckgegeben. Numerisches Array Assoziatives Array In Array pr\u00fcfen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo in_array ( \"Herr Inauen\" , $array ); //true In Array pr\u00fcfen <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 ); echo array_key_exists ( \"name\" , $array ); //true (1) array_key_exists() pr\u00fcft, ob ein Schl\u00fcssel mit diesem Namen im Array vorhanden ist.","title":"Array Funktionen"},{"location":"PHP/Appendix/ArrayFunktionen/#arrays","text":"Arrays sind eine Sammlung von Werten . Sie k\u00f6nnen numerisch oder assoziativ sein. Numerische Arrays haben eine Nummer als Schl\u00fcssel. Assoziative Arrays haben einen Text als Schl\u00fcssel. Arrays k\u00f6nnen auch mehrdimensional sein. Das heisst, dass ein Array in einem Array enthalten sein kann. Arrays k\u00f6nnen auch Objekte enthalten. Einen eigenen Quicksort in PHP implementiert kann hier gefunden werden. Mithilfe von print_r kann ein Array in lesbarer Form ausgegeben werden. Um doch mehr Informationen zu bekommen kann var_dump verwendet werden. Dort wird der Typ und weitere Debugging Informationen ausgegeben. Arrays in Strings konvertieren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo implode ( \", \" , $array ); //Manuel, Herr Inauen, Herr M\u00fcller Strings in Arrays konvertieren <?php $string = \"Manuel, Herr Inauen, Herr M\u00fcller\" ; $array = explode ( \", \" , $string ); echo var_dump ( $namen ); // (1) var_dump() gibt den Inhalt einer Variable aus. Dies ist sehr n\u00fctzlich, um den Inhalt einer Variable zu \u00fcberpr\u00fcfen. Hier in diesem Beispiel w\u00e4re die Ausgabe: array(3) { [0]=> string(6) \"Manuel\" [1]=> string(11) \"Herr Inauen\" [2]=> string(10) \"Herr M\u00fcller\" } Array Elemente z\u00e4hlen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo count ( $array ); //3 Array Elemente hinzuf\u00fcgen / entfernen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" ); array_push ( $array , \"Herr M\u00fcller\" ); echo var_dump ( $array ); // Manuel, Herr Inauen, Herr M\u00fcller array_pop ( $array ); echo var_dump ( $array ); // Manuel, Herr Inauen Array Elemente sortieren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); sort ( $array ); // (1) echo var_dump ( $array ); // Herr Inauen, Herr M\u00fcller, Manuel sort() sortiert die Elemente aufsteigend . rsort() sortiert die Elemente absteigend . Als Sortieralgorithmus wird Quicksort verwendet. Array Elemente mischen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); shuffle ( $array ); echo var_dump ( $array ); // Herr M\u00fcller, Herr Inauen, Manuel Array Elemente umkehren <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); $array = array_reverse ( $array ); echo var_dump ( $array ); // Herr M\u00fcller, Herr Inauen, Manuel Array durchsuchen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo array_search ( \"Herr Inauen\" , $array ); //1 (1) Die Funktion array_search() gibt den Schl\u00fcssel des gesuchten Elements zur\u00fcck. Wenn das Element nicht gefunden wird, wird false zur\u00fcckgegeben. Numerisches Array Assoziatives Array In Array pr\u00fcfen <?php $array = array ( \"Manuel\" , \"Herr Inauen\" , \"Herr M\u00fcller\" ); echo in_array ( \"Herr Inauen\" , $array ); //true In Array pr\u00fcfen <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 ); echo array_key_exists ( \"name\" , $array ); //true (1) array_key_exists() pr\u00fcft, ob ein Schl\u00fcssel mit diesem Namen im Array vorhanden ist.","title":"Arrays"},{"location":"PHP/Appendix/Cheatsheet/","tags":["PHP","Cheatsheet"],"text":"Cheatsheet # Diese Seite ist noch in Arbeit und noch lange nicht fertig! Arrays # array_key_exists($key, $array) - \u00dcberpr\u00fcft, ob der Schl\u00fcssel $key im $array existiert. count($array) - Gibt die Anzahl der Elemente im Array zur\u00fcck. in_array($suchwert, $array) - \u00dcberpr\u00fcft, ob der Wert $suchwert im $array existiert. sort($array) - Sortiert ein Array aufsteigend, vom kleinsten zum gr\u00f6\u00dften Wert (A -> Z). rsort($array) - Sortiert ein Array absteigend, vom gr\u00f6\u00dften zum kleinsten Wert (Z -> A). shuffle($array) - Mischt zuf\u00e4llig die Elemente des Arrays.","title":"PHP-Cheatsheet"},{"location":"PHP/Appendix/Cheatsheet/#cheatsheet","text":"Diese Seite ist noch in Arbeit und noch lange nicht fertig!","title":"Cheatsheet"},{"location":"PHP/Appendix/Cheatsheet/#arrays","text":"array_key_exists($key, $array) - \u00dcberpr\u00fcft, ob der Schl\u00fcssel $key im $array existiert. count($array) - Gibt die Anzahl der Elemente im Array zur\u00fcck. in_array($suchwert, $array) - \u00dcberpr\u00fcft, ob der Wert $suchwert im $array existiert. sort($array) - Sortiert ein Array aufsteigend, vom kleinsten zum gr\u00f6\u00dften Wert (A -> Z). rsort($array) - Sortiert ein Array absteigend, vom gr\u00f6\u00dften zum kleinsten Wert (Z -> A). shuffle($array) - Mischt zuf\u00e4llig die Elemente des Arrays.","title":"Arrays"},{"location":"PHP/Appendix/Datentypen/","tags":["PHP"],"text":"Datentypen # PHP besitzt lose Datentypen. Das heisst, dass eine Variable nicht nur einen Wert, sondern auch einen Typ besitzt. Der Typ einer Variable kann sich w\u00e4hrend der Laufzeit des Programms \u00e4ndern. PHP kennt folgende Datentypen: Datentyp Beschreibung int Ganze Zahlen float Gleitkommazahlen ( double ) string Zeichenketten bool Boolesche Werte (true oder false) array Arrays object Objekte null Nichts mixed Mehrere Typen (union) Typen konvertieren # PHP kann Datentypen automatisch konvertieren . Das heisst, dass eine Variable, die einen anderen Typ hat, als der erwartete Typ, automatisch in den erwarteten Typ konvertiert wird. Das kann zu unerwarteten Ergebnissen f\u00fchren. Um das zu verhindern kann declare(strict_types=1); am Anfang der Datei eingef\u00fcgt werden. Damit wird die strikte Typisierung aktiviert. Das heisst, dass PHP keine automatische Typkonvertierung mehr durchf\u00fchrt. Es wird eine Fehlermeldung ausgegeben, wenn eine Variable einen anderen Typ hat, als der erwartete Typ. Dies kann helfen, schwerwiegende Fehler zu vermeiden. Lose Typen Strikte Typen <?php function sum ( int $a , int $b ) { return $a + $b ; } echo sum ( 1 , 2 ); // 3 echo sum ( 1.5 , 2.5 ); // 3 (Da int 1.5 zu 1 und 2.5 zu 2 konvertiert) ?> <?php declare ( strict_types = 1 ); function sum ( int $a , int $b ) { return $a + $b ; } echo sum ( 1 , 2 ); // 3 echo sum ( 1.5 , 2.5 ); // TypeError: sum(): Argument #1 ($a) must be of type int, float given ?> Call By ? # Bei der \u00dcbergabe von Parametern an eine Funktion wird zwischen Call-By-Value und Call-By-Reference unterschieden. Bei Call-By-Value wird der Wert oder eine Kopie des Parameters an die Funktion \u00fcbergeben. Bei Call-By-Reference wird die originale Variable an die Funktion \u00fcbergeben. Das heisst, dass \u00c4nderungen an der Variable in der Funktion auch in der urspr\u00fcnglichen Variable sichtbar sind. In PHP wird immer Call-By-Value verwendet. Um eine Variable als Referenz zu \u00fcbergeben, muss sie mit & vorangestellt werden.","title":"Datentypen"},{"location":"PHP/Appendix/Datentypen/#datentypen","text":"PHP besitzt lose Datentypen. Das heisst, dass eine Variable nicht nur einen Wert, sondern auch einen Typ besitzt. Der Typ einer Variable kann sich w\u00e4hrend der Laufzeit des Programms \u00e4ndern. PHP kennt folgende Datentypen: Datentyp Beschreibung int Ganze Zahlen float Gleitkommazahlen ( double ) string Zeichenketten bool Boolesche Werte (true oder false) array Arrays object Objekte null Nichts mixed Mehrere Typen (union)","title":"Datentypen"},{"location":"PHP/Appendix/Datentypen/#typen-konvertieren","text":"PHP kann Datentypen automatisch konvertieren . Das heisst, dass eine Variable, die einen anderen Typ hat, als der erwartete Typ, automatisch in den erwarteten Typ konvertiert wird. Das kann zu unerwarteten Ergebnissen f\u00fchren. Um das zu verhindern kann declare(strict_types=1); am Anfang der Datei eingef\u00fcgt werden. Damit wird die strikte Typisierung aktiviert. Das heisst, dass PHP keine automatische Typkonvertierung mehr durchf\u00fchrt. Es wird eine Fehlermeldung ausgegeben, wenn eine Variable einen anderen Typ hat, als der erwartete Typ. Dies kann helfen, schwerwiegende Fehler zu vermeiden. Lose Typen Strikte Typen <?php function sum ( int $a , int $b ) { return $a + $b ; } echo sum ( 1 , 2 ); // 3 echo sum ( 1.5 , 2.5 ); // 3 (Da int 1.5 zu 1 und 2.5 zu 2 konvertiert) ?> <?php declare ( strict_types = 1 ); function sum ( int $a , int $b ) { return $a + $b ; } echo sum ( 1 , 2 ); // 3 echo sum ( 1.5 , 2.5 ); // TypeError: sum(): Argument #1 ($a) must be of type int, float given ?>","title":"Typen konvertieren"},{"location":"PHP/Appendix/Datentypen/#call-by","text":"Bei der \u00dcbergabe von Parametern an eine Funktion wird zwischen Call-By-Value und Call-By-Reference unterschieden. Bei Call-By-Value wird der Wert oder eine Kopie des Parameters an die Funktion \u00fcbergeben. Bei Call-By-Reference wird die originale Variable an die Funktion \u00fcbergeben. Das heisst, dass \u00c4nderungen an der Variable in der Funktion auch in der urspr\u00fcnglichen Variable sichtbar sind. In PHP wird immer Call-By-Value verwendet. Um eine Variable als Referenz zu \u00fcbergeben, muss sie mit & vorangestellt werden.","title":"Call By ?"},{"location":"PHP/Appendix/DosAndDonts/","tags":["PHP","Cheatsheet"],"text":"PHP - Do's and Don'ts # Das hier ist eine Zusammenfassung von Do's and Don'ts rund um das Thema PHP. Die Liste ist aus dem Unterricht und wurde hier \u00fcbernommen. Variablennamen # Welche Variablen sind ung\u00fcltig? <?php $preis $ 1 preis $_preis $else $gesamtpreis12 $gesamt - preis $MeNg L\u00f6sung Ung\u00fcltig sind Variablennamen, die mit einer Zahl beginnen , ein reserviertes Wort sind oder ein Sonderzeichen enthalten. Ung\u00fcltig sind somit die Variablen $1preis , $else und $gesamt-preis . Ausgaben # Was ist die Ausgabe? <?php $j = \"Hallo\" ; $k = \" $j \\\" Onkel \\\" \" ; echo $k ; L\u00f6sung Die Ausgabe ist Hallo \"Onkel\" . Die Variable $j wird in der Variable $k ausgegeben, weil die doppelten Anf\u00fchrungszeichen verwendet wurden. Die Anf\u00fchrungszeichen werden mit ausgegeben, da sie escaped ( \\ ) wurden. Was ist die Ausgabe? <?php $a = \"Hallo \" ; $a .= \"Welt\" ; echo $a ; L\u00f6sung Die Ausgabe ist Hallo Welt . Die Variable $a wird mit dem Wert Hallo initialisiert. Mit dem Concatenation-Operators ( . ) wird der Wert Welt an die Variable $a angeh\u00e4ngt. Was ist die Ausgabe? <?php $a = \"Hallo\" ; $b = \"Welt\" ; echo $a . \" \" . $b . \"<br />\" L\u00f6sung Die Ausgabe ist: Hallo Welt # New Line Die Ausgabe w\u00fcrde auch in einer Konsole funktionieren, da die neue Linie durch \\n ersetzt wird. Ausgaben - Preis # Was ist die Ausgabe? <?php $preis = 49.90 ; echo \"Die Variable $preis enth\u00e4lt den Wert: $preis \" ; L\u00f6sung Die Ausgabe ist: Die Variable 49 . 9 enth\u00e4lt den Wert : 49 . 9 Da der String doppelten Anf\u00fchrungszeichen enth\u00e4lt, wird der Wert 49.9 der Variable $preis in beiden F\u00e4llen ausgegeben. Was ist die Ausgabe? <?php $preis = 49.90 ; echo 'Die Variable $preis enth\u00e4lt den Wert: $preis' ; L\u00f6sung Die Ausgabe ist: Die Variable $preis enth\u00e4lt den Wert : $preis Da der String einfachen Anf\u00fchrungszeichen enth\u00e4lt, wird in beiden F\u00e4llen der Variablenname ausgegeben. Was ist die Ausgabe? <?php $preis = 49.90 ; echo 'Die Variable $preis enth\u00e4lt den Wert: ' . $preis ; L\u00f6sung Die Ausgabe ist: Die Variable $preis enth\u00e4lt den Wert : 49 . 9 Da der String einfachen Anf\u00fchrungszeichen enth\u00e4lt, wird der Variablenname ausgegeben. Der Wert der Variable $preis wird mit dem Concatenation-Operators ( . ) an den String angeh\u00e4ngt. Arrays # Was ist die Ausgabe? <?php $familie = array ( \"Vater\" , \"Mutter\" , \"Tochter\" , \"Sohn\" ); echo \" $familie[3] <br />\" ; echo \" $familie[1] <br />\" ; echo \" $familie[0] <br />\" ; echo \" $familie[4] <br />\" ; echo \" $familie[2] <br />\" ; L\u00f6sung Die Ausgabe ist: Sohn Mutter Vater # New Line Tochter Die Array-Keys beginnen bei 0 . Der Array-Key 4 existiert nicht, da nur 4 Elemente im Array sind. Aus diesem Grund wird eine neue Zeile ausgegeben. Um einen Fehler bei Out-Of-Bound-Abfragen zu erhalten, muss die Konfiguration vom PHP-Interpreten ge\u00e4ndert werden. Mathe und Datentypen # Was ist die Ausgabe? <?php $n = 5 ; $o = 8 ; echo $n + $o ; echo $n - $o ; echo $n * $o ; echo $n / $o ; echo $n % $o ; L\u00f6sung Die Ausgabe ist: 13 - 3 40 0 . 625 5 Die Mathe-Operatoren funktionieren wie erwartet und wandeln den Typ bei Bedarf ( Division ) um.","title":"Do's and Don'ts"},{"location":"PHP/Appendix/DosAndDonts/#php-dos-and-donts","text":"Das hier ist eine Zusammenfassung von Do's and Don'ts rund um das Thema PHP. Die Liste ist aus dem Unterricht und wurde hier \u00fcbernommen.","title":"PHP - Do's and Don'ts"},{"location":"PHP/Appendix/DosAndDonts/#variablennamen","text":"Welche Variablen sind ung\u00fcltig? <?php $preis $ 1 preis $_preis $else $gesamtpreis12 $gesamt - preis $MeNg L\u00f6sung Ung\u00fcltig sind Variablennamen, die mit einer Zahl beginnen , ein reserviertes Wort sind oder ein Sonderzeichen enthalten. Ung\u00fcltig sind somit die Variablen $1preis , $else und $gesamt-preis .","title":"Variablennamen"},{"location":"PHP/Appendix/DosAndDonts/#ausgaben","text":"Was ist die Ausgabe? <?php $j = \"Hallo\" ; $k = \" $j \\\" Onkel \\\" \" ; echo $k ; L\u00f6sung Die Ausgabe ist Hallo \"Onkel\" . Die Variable $j wird in der Variable $k ausgegeben, weil die doppelten Anf\u00fchrungszeichen verwendet wurden. Die Anf\u00fchrungszeichen werden mit ausgegeben, da sie escaped ( \\ ) wurden. Was ist die Ausgabe? <?php $a = \"Hallo \" ; $a .= \"Welt\" ; echo $a ; L\u00f6sung Die Ausgabe ist Hallo Welt . Die Variable $a wird mit dem Wert Hallo initialisiert. Mit dem Concatenation-Operators ( . ) wird der Wert Welt an die Variable $a angeh\u00e4ngt. Was ist die Ausgabe? <?php $a = \"Hallo\" ; $b = \"Welt\" ; echo $a . \" \" . $b . \"<br />\" L\u00f6sung Die Ausgabe ist: Hallo Welt # New Line Die Ausgabe w\u00fcrde auch in einer Konsole funktionieren, da die neue Linie durch \\n ersetzt wird.","title":"Ausgaben"},{"location":"PHP/Appendix/DosAndDonts/#ausgaben-preis","text":"Was ist die Ausgabe? <?php $preis = 49.90 ; echo \"Die Variable $preis enth\u00e4lt den Wert: $preis \" ; L\u00f6sung Die Ausgabe ist: Die Variable 49 . 9 enth\u00e4lt den Wert : 49 . 9 Da der String doppelten Anf\u00fchrungszeichen enth\u00e4lt, wird der Wert 49.9 der Variable $preis in beiden F\u00e4llen ausgegeben. Was ist die Ausgabe? <?php $preis = 49.90 ; echo 'Die Variable $preis enth\u00e4lt den Wert: $preis' ; L\u00f6sung Die Ausgabe ist: Die Variable $preis enth\u00e4lt den Wert : $preis Da der String einfachen Anf\u00fchrungszeichen enth\u00e4lt, wird in beiden F\u00e4llen der Variablenname ausgegeben. Was ist die Ausgabe? <?php $preis = 49.90 ; echo 'Die Variable $preis enth\u00e4lt den Wert: ' . $preis ; L\u00f6sung Die Ausgabe ist: Die Variable $preis enth\u00e4lt den Wert : 49 . 9 Da der String einfachen Anf\u00fchrungszeichen enth\u00e4lt, wird der Variablenname ausgegeben. Der Wert der Variable $preis wird mit dem Concatenation-Operators ( . ) an den String angeh\u00e4ngt.","title":"Ausgaben - Preis"},{"location":"PHP/Appendix/DosAndDonts/#arrays","text":"Was ist die Ausgabe? <?php $familie = array ( \"Vater\" , \"Mutter\" , \"Tochter\" , \"Sohn\" ); echo \" $familie[3] <br />\" ; echo \" $familie[1] <br />\" ; echo \" $familie[0] <br />\" ; echo \" $familie[4] <br />\" ; echo \" $familie[2] <br />\" ; L\u00f6sung Die Ausgabe ist: Sohn Mutter Vater # New Line Tochter Die Array-Keys beginnen bei 0 . Der Array-Key 4 existiert nicht, da nur 4 Elemente im Array sind. Aus diesem Grund wird eine neue Zeile ausgegeben. Um einen Fehler bei Out-Of-Bound-Abfragen zu erhalten, muss die Konfiguration vom PHP-Interpreten ge\u00e4ndert werden.","title":"Arrays"},{"location":"PHP/Appendix/DosAndDonts/#mathe-und-datentypen","text":"Was ist die Ausgabe? <?php $n = 5 ; $o = 8 ; echo $n + $o ; echo $n - $o ; echo $n * $o ; echo $n / $o ; echo $n % $o ; L\u00f6sung Die Ausgabe ist: 13 - 3 40 0 . 625 5 Die Mathe-Operatoren funktionieren wie erwartet und wandeln den Typ bei Bedarf ( Division ) um.","title":"Mathe und Datentypen"},{"location":"PHP/Appendix/Regex/","tags":["PHP","Cheatsheet"],"text":"Regex # Regex ist eine Abk\u00fcrzung f\u00fcr Regular Expression . Eine Regular Expression ist ein Muster, das verwendet wird, um strukturiert Text zu verarbeiten. Es ist eine sehr m\u00e4chtige Sprache, die in vielen Programmiersprachen verwendet wird. In PHP wird es verwendet, um Text zu suchen und zu ersetzen , aber auch um zu pr\u00fcfen , ob ein Text mit einem bestimmten Muster \u00fcbereinstimmt. Regex Syntax # Ein Muster besteht aus normalen Zeichen und Metazeichen. Ein Metazeichen ist ein Zeichen, das eine spezielle Bedeutung hat. Wenn Sie ein Metazeichen in einem Muster verwenden m\u00f6chten, muss es mit einem Backslash \\ voranstellen. Je nach Programmiersprache kann die Syntax f\u00fcr eine Regex variieren. PHP C# Java JavaScript Python preg_match(pattern, subject, matches, flags, offset) Regex . Match ( input , pattern ) Pattern . matches ( pattern , input ) input . match ( pattern ) re . match ( pattern , string ) Regex Beispiel # In diesem Beispiel wird ein Muster verwendet, um zu pr\u00fcfen, ob eine URL g\u00fcltig ist. Die URL muss mit http:// oder https:// beginnen, gefolgt von einem beliebigen Wort. Das Wort muss mit einem Buchstaben beginnen und darf nur Buchstaben, Zahlen und Unterstriche enthalten. Zudem muss es mit einem Punkt enden, gefolgt von com , net , org oder de . <?php $pattern = \"/^(http|https):\\/\\/[a-zA-Z][a-zA-Z0-9_]*\\.(com|net|org|de)$/\" ; $subject = \"https://example.com\" ; if ( preg_match ( $pattern , $subject )) { echo \"Die URL ist g\u00fcltig.\" ; } else { echo \"Die URL ist ung\u00fcltig.\" ; } Regex Metazeichen # Um Muster zu erstellen k\u00f6nnen folgende Metazeichen verwendet werden: Metazeichen Beschreibung . ein beliebiges Zeichen [] ein beliebiges Zeichen aus dem angegebenen Bereich ^ Anfang des Textes $ Ende des Textes * Null oder mehr Vorkommen des vorherigen Zeichens + Eins oder mehr Vorkommen des vorherigen Zeichens ? Null oder eins Vorkommen des vorherigen Zeichens {n} n Vorkommen des vorherigen Zeichens {n,} n oder mehr Vorkommen des vorherigen Zeichens {n,m} n und maximal m Vorkommen des vorherigen Zeichens () Teile eines Musters zu gruppieren \\| ODER Flags # Flags sind Optionen, die die Suche beeinflussen. So k\u00f6nnen gewisse Zeichen ignoriert werden, oder die Suche case-insensitive durchgef\u00fchrt werden: Flag Beschreibung i Ignoriert Gross- & Kleinschreibung m Mehrzeilige Suche s Sucht auch in mehreren Zeilen x Ignoriert Whitespace u UTF-8 Modus Abk\u00fcrzungen # Das Folgende sind einige Abk\u00fcrzungen, die in Regex verwendet werden k\u00f6nnen: Abk\u00fcrzung Beschreibung \\d Ziffern [0-9] \\D Nicht Ziffer [^0-9] \\s Whitespace \\S Nicht Whitespace \\w Alphanumerisch [a-zA-Z0-9_] \\W Nicht Alphanumerisch [^a-za-z0-9_]","title":"Regex"},{"location":"PHP/Appendix/Regex/#regex","text":"Regex ist eine Abk\u00fcrzung f\u00fcr Regular Expression . Eine Regular Expression ist ein Muster, das verwendet wird, um strukturiert Text zu verarbeiten. Es ist eine sehr m\u00e4chtige Sprache, die in vielen Programmiersprachen verwendet wird. In PHP wird es verwendet, um Text zu suchen und zu ersetzen , aber auch um zu pr\u00fcfen , ob ein Text mit einem bestimmten Muster \u00fcbereinstimmt.","title":"Regex"},{"location":"PHP/Appendix/Regex/#regex-syntax","text":"Ein Muster besteht aus normalen Zeichen und Metazeichen. Ein Metazeichen ist ein Zeichen, das eine spezielle Bedeutung hat. Wenn Sie ein Metazeichen in einem Muster verwenden m\u00f6chten, muss es mit einem Backslash \\ voranstellen. Je nach Programmiersprache kann die Syntax f\u00fcr eine Regex variieren. PHP C# Java JavaScript Python preg_match(pattern, subject, matches, flags, offset) Regex . Match ( input , pattern ) Pattern . matches ( pattern , input ) input . match ( pattern ) re . match ( pattern , string )","title":"Regex Syntax"},{"location":"PHP/Appendix/Regex/#regex-beispiel","text":"In diesem Beispiel wird ein Muster verwendet, um zu pr\u00fcfen, ob eine URL g\u00fcltig ist. Die URL muss mit http:// oder https:// beginnen, gefolgt von einem beliebigen Wort. Das Wort muss mit einem Buchstaben beginnen und darf nur Buchstaben, Zahlen und Unterstriche enthalten. Zudem muss es mit einem Punkt enden, gefolgt von com , net , org oder de . <?php $pattern = \"/^(http|https):\\/\\/[a-zA-Z][a-zA-Z0-9_]*\\.(com|net|org|de)$/\" ; $subject = \"https://example.com\" ; if ( preg_match ( $pattern , $subject )) { echo \"Die URL ist g\u00fcltig.\" ; } else { echo \"Die URL ist ung\u00fcltig.\" ; }","title":"Regex Beispiel"},{"location":"PHP/Appendix/Regex/#regex-metazeichen","text":"Um Muster zu erstellen k\u00f6nnen folgende Metazeichen verwendet werden: Metazeichen Beschreibung . ein beliebiges Zeichen [] ein beliebiges Zeichen aus dem angegebenen Bereich ^ Anfang des Textes $ Ende des Textes * Null oder mehr Vorkommen des vorherigen Zeichens + Eins oder mehr Vorkommen des vorherigen Zeichens ? Null oder eins Vorkommen des vorherigen Zeichens {n} n Vorkommen des vorherigen Zeichens {n,} n oder mehr Vorkommen des vorherigen Zeichens {n,m} n und maximal m Vorkommen des vorherigen Zeichens () Teile eines Musters zu gruppieren \\| ODER","title":"Regex Metazeichen"},{"location":"PHP/Appendix/Regex/#flags","text":"Flags sind Optionen, die die Suche beeinflussen. So k\u00f6nnen gewisse Zeichen ignoriert werden, oder die Suche case-insensitive durchgef\u00fchrt werden: Flag Beschreibung i Ignoriert Gross- & Kleinschreibung m Mehrzeilige Suche s Sucht auch in mehreren Zeilen x Ignoriert Whitespace u UTF-8 Modus","title":"Flags"},{"location":"PHP/Appendix/Regex/#abkurzungen","text":"Das Folgende sind einige Abk\u00fcrzungen, die in Regex verwendet werden k\u00f6nnen: Abk\u00fcrzung Beschreibung \\d Ziffern [0-9] \\D Nicht Ziffer [^0-9] \\s Whitespace \\S Nicht Whitespace \\w Alphanumerisch [a-zA-Z0-9_] \\W Nicht Alphanumerisch [^a-za-z0-9_]","title":"Abk\u00fcrzungen"},{"location":"PHP/Appendix/Sortieren/","tags":["PHP"],"text":"Sortieren # Quicksort # Hilfestellung: medium.com 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <?php class Sorting { private static function partition ( & $array , int $left , int $right ) : int { $pivotIndex = floor ( $left + ( $right - $left ) / 2 ); $pivotValue = $array [ $pivotIndex ]; $i = $left ; $j = $right ; while ( $i <= $j ) { while ( $array [ $i ] < $pivotValue ) { $i ++ ; } while ( $array [ $j ] > $pivotValue ) { $j -- ; } if ( $i <= $j ) { $temp = $array [ $i ]; $array [ $i ] = $array [ $j ]; $array [ $j ] = $temp ; $i ++ ; $j -- ; } } return $i ; } private static function quicksort ( & $array , int $left , int $right ) : void { if ( $left < $right ) { $pivotIndex = Sorting :: partition ( $array , $left , $right ); Sorting :: quicksort ( $array , $left , $pivotIndex - 1 ); Sorting :: quicksort ( $array , $pivotIndex , $right ); } } public static function sort ( & $array ) : void { Sorting :: quicksort ( $array , 0 , count ( $array ) - 1 ); } }","title":"Sortieren"},{"location":"PHP/Appendix/Sortieren/#sortieren","text":"","title":"Sortieren"},{"location":"PHP/Appendix/Sortieren/#quicksort","text":"Hilfestellung: medium.com 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <?php class Sorting { private static function partition ( & $array , int $left , int $right ) : int { $pivotIndex = floor ( $left + ( $right - $left ) / 2 ); $pivotValue = $array [ $pivotIndex ]; $i = $left ; $j = $right ; while ( $i <= $j ) { while ( $array [ $i ] < $pivotValue ) { $i ++ ; } while ( $array [ $j ] > $pivotValue ) { $j -- ; } if ( $i <= $j ) { $temp = $array [ $i ]; $array [ $i ] = $array [ $j ]; $array [ $j ] = $temp ; $i ++ ; $j -- ; } } return $i ; } private static function quicksort ( & $array , int $left , int $right ) : void { if ( $left < $right ) { $pivotIndex = Sorting :: partition ( $array , $left , $right ); Sorting :: quicksort ( $array , $left , $pivotIndex - 1 ); Sorting :: quicksort ( $array , $pivotIndex , $right ); } } public static function sort ( & $array ) : void { Sorting :: quicksort ( $array , 0 , count ( $array ) - 1 ); } }","title":"Quicksort"},{"location":"PHP/Aufgaben/Arrays/","tags":["PHP","Aufgaben"],"text":"Arrays # Arrays sind eine Sammlung von Werten . Sie k\u00f6nnen numerisch oder assoziativ sein. Numerische Arrays haben eine Nummer als Schl\u00fcssel. Assoziative Arrays haben einen Text als Schl\u00fcssel. Arrays k\u00f6nnen auch mehrdimensional sein. Das heisst, dass ein Array in einem Array enthalten sein kann. Arrays k\u00f6nnen auch Objekte enthalten. Numerisch Assoziativ Mehrdimensional <?php $array = array ( 1 , 2 , 3 , 4 , 5 ); echo $array [ 0 ]; //1 echo $array [ 1 ]; //2 echo $array [ 2 ]; //3 echo $array [ 3 ]; //4 echo $array [ 4 ]; //5 <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 ); echo $array [ \"name\" ]; //Manuel echo $array [ \"alter\" ]; //18 <?php $array = array ( array ( \"name\" => \"Manuel\" , \"alter\" => 18 ), array ( \"name\" => \"Herr Inauen\" , \"alter\" => 20 ) ); echo $array [ 0 ][ \"name\" ]; //Manuel echo $array [ 0 ][ \"alter\" ]; //18 echo $array [ 1 ][ \"name\" ]; //Herr Inauen echo $array [ 1 ][ \"alter\" ]; //23 Werte hinzuf\u00fcgen # Mithilfe des Zeichens [] k\u00f6nnen Werte zu einem Array hinzugef\u00fcgt werden. Dabei wird der Schl\u00fcssel automatisch generiert, wenn dies m\u00f6glich ist. Ansonsten muss er in den Klammern angegeben werden. Numerisch Assoziativ <? $array = array (); $array [] = \"Manuel\" ; echo $array [ 0 ]; //Manuel <? $array = array (); $array [ \"name\" ] = \"Manuel\" ; echo $array [ \"name\" ]; //Manuel In Tabelle ausgeben # PHP kann auch Tabellen ausgeben. Dazu wird die Funktion echo mit dem Parameter table verwendet. Die Tabelle wird mit dem Tag <table> ausgegeben. Die Tabellenzeilen werden mit dem Tag <tr> ausgegeben. Die Tabellenzellen werden mit dem Tag <td> ausgegeben. Numerisch Assoziativ <?php $array = array ( 3 , 7 , 5 , 1 , 8 , 13 , 2 ); echo \"<table border='1'>\" ; echo \"<tr><th>Index</th><th>Wert</th></tr>\" ; for ( $i = 0 ; $i < count ( $array ); $i ++ ){ echo \"<tr><td> $i </td><td> $array[$i] </td></tr>\" ; } echo \"</table>\" ; Ausgabe Index Wert 0 3 1 7 2 5 3 1 4 8 5 13 6 2 <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 , \"klasse\" => \"IN20/24c\" ); echo \"<table border='1'>\" ; echo \"<tr><th>Index</th><th>Wert</th></tr>\" ; foreach ( $array as $key => $value ){ echo \"<tr><td> $key </td><td> $value </td></tr>\" ; } echo \"</table>\" ; Ausgabe Index Wert name Manuel alter 18 klasse IN20/24c Weitere Funktionen # PHP verf\u00fcgt \u00fcber eine Reihe von Funktionen, welche mit Arrays arbeiten. Die wichtigsten sind count() , array_push() , in_array() und sort() . Da Arrays sehr ausf\u00fchrlich sind und nicht nur einfach hinzuf\u00fcgen, sortieren und entfernen k\u00f6nnen, ist dieser Abschnitt im Appendix genauer ausgef\u00fchrt.","title":"Arrays"},{"location":"PHP/Aufgaben/Arrays/#arrays","text":"Arrays sind eine Sammlung von Werten . Sie k\u00f6nnen numerisch oder assoziativ sein. Numerische Arrays haben eine Nummer als Schl\u00fcssel. Assoziative Arrays haben einen Text als Schl\u00fcssel. Arrays k\u00f6nnen auch mehrdimensional sein. Das heisst, dass ein Array in einem Array enthalten sein kann. Arrays k\u00f6nnen auch Objekte enthalten. Numerisch Assoziativ Mehrdimensional <?php $array = array ( 1 , 2 , 3 , 4 , 5 ); echo $array [ 0 ]; //1 echo $array [ 1 ]; //2 echo $array [ 2 ]; //3 echo $array [ 3 ]; //4 echo $array [ 4 ]; //5 <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 ); echo $array [ \"name\" ]; //Manuel echo $array [ \"alter\" ]; //18 <?php $array = array ( array ( \"name\" => \"Manuel\" , \"alter\" => 18 ), array ( \"name\" => \"Herr Inauen\" , \"alter\" => 20 ) ); echo $array [ 0 ][ \"name\" ]; //Manuel echo $array [ 0 ][ \"alter\" ]; //18 echo $array [ 1 ][ \"name\" ]; //Herr Inauen echo $array [ 1 ][ \"alter\" ]; //23","title":"Arrays"},{"location":"PHP/Aufgaben/Arrays/#werte-hinzufugen","text":"Mithilfe des Zeichens [] k\u00f6nnen Werte zu einem Array hinzugef\u00fcgt werden. Dabei wird der Schl\u00fcssel automatisch generiert, wenn dies m\u00f6glich ist. Ansonsten muss er in den Klammern angegeben werden. Numerisch Assoziativ <? $array = array (); $array [] = \"Manuel\" ; echo $array [ 0 ]; //Manuel <? $array = array (); $array [ \"name\" ] = \"Manuel\" ; echo $array [ \"name\" ]; //Manuel","title":"Werte hinzuf\u00fcgen"},{"location":"PHP/Aufgaben/Arrays/#in-tabelle-ausgeben","text":"PHP kann auch Tabellen ausgeben. Dazu wird die Funktion echo mit dem Parameter table verwendet. Die Tabelle wird mit dem Tag <table> ausgegeben. Die Tabellenzeilen werden mit dem Tag <tr> ausgegeben. Die Tabellenzellen werden mit dem Tag <td> ausgegeben. Numerisch Assoziativ <?php $array = array ( 3 , 7 , 5 , 1 , 8 , 13 , 2 ); echo \"<table border='1'>\" ; echo \"<tr><th>Index</th><th>Wert</th></tr>\" ; for ( $i = 0 ; $i < count ( $array ); $i ++ ){ echo \"<tr><td> $i </td><td> $array[$i] </td></tr>\" ; } echo \"</table>\" ; Ausgabe Index Wert 0 3 1 7 2 5 3 1 4 8 5 13 6 2 <?php $array = array ( \"name\" => \"Manuel\" , \"alter\" => 18 , \"klasse\" => \"IN20/24c\" ); echo \"<table border='1'>\" ; echo \"<tr><th>Index</th><th>Wert</th></tr>\" ; foreach ( $array as $key => $value ){ echo \"<tr><td> $key </td><td> $value </td></tr>\" ; } echo \"</table>\" ; Ausgabe Index Wert name Manuel alter 18 klasse IN20/24c","title":"In Tabelle ausgeben"},{"location":"PHP/Aufgaben/Arrays/#weitere-funktionen","text":"PHP verf\u00fcgt \u00fcber eine Reihe von Funktionen, welche mit Arrays arbeiten. Die wichtigsten sind count() , array_push() , in_array() und sort() . Da Arrays sehr ausf\u00fchrlich sind und nicht nur einfach hinzuf\u00fcgen, sortieren und entfernen k\u00f6nnen, ist dieser Abschnitt im Appendix genauer ausgef\u00fchrt.","title":"Weitere Funktionen"},{"location":"PHP/Aufgaben/Dateien/","tags":["PHP","Aufgaben"],"text":"Dateien # Mit Dateien wird st\u00e4ndig gearbeitet. Sie sind ein wichtiger Bestandteil von Webanwendungen. Aus diesem Grund wird in den folgenden Kapiteln die Arbeit mit Dateien in PHP behandelt. Bevor mit einer Datei gearbeitet wird, sollte gepr\u00fcft werden ob diese \u00fcberhaupt existiert . Dies kann \u00fcber mittels file_exists() gemacht werden. Wenn die Datei vorhanden ist, dann wird true zur\u00fcckgegeben. Auslesen # Die Funktion file_get_contents() liest den kompletten Inhalt einer Datei aus und gibt diesen zur\u00fcck. Der Dateiname wird als Parameter \u00fcbergeben. Um den Inhalt in einer Webseite auszugeben sollten die Zeilenumbr\u00fcche mit nl2br() von \\n in <br /> umgewandelt werden. Ganze Datei auslesen <?php $content = file_get_contents ( 'datei.txt' ); echo nl2br ( $content ); Es ist nicht immer der Fall, dass auch die komplette Datei ausgegeben werden soll. Mithilfe von file() kann die Datei in ein Array gelesen werden. Jede Zeile wird dabei in ein Element des Arrays geschrieben. \u00dcber ein For-Loop kann dann der Inhalt der Datei Zeile f\u00fcr Zeile ausgegeben werden. Datei Zeile f\u00fcr Zeile auslesen <?php $content = file ( 'datei.txt' ); for ( $i = 0 ; $i < count ( $content ); $i ++ ) { echo nl2br ( $content [ $i ]); } Schreiben # Mit file_put_contents() kann der Inhalt einer Datei \u00fcberschrieben werden. Der Dateiname wird als erster Parameter \u00fcbergeben. Der zweite Parameter ist der Inhalt, der in die Datei geschrieben werden soll. Falls die Datei noch nicht vorhanden ist, wird sie erstellt . Der dritte Parameter ist optional und kann auf FILE_APPEND gesetzt werden, um den Inhalt an die Datei anzuh\u00e4ngen . \u00dcberschreiben Anh\u00e4ngen <?php $content = 'Dies ist der neue Inhalt.' ; file_put_contents ( 'datei.txt' , $content ); <?php $content = 'Dies ist ein weiterer Inhalt.' ; file_put_contents ( 'datei.txt' , $content , FILE_APPEND ); L\u00f6schen # Mit unlink() kann eine Datei gel\u00f6scht werden. Als R\u00fcckgabewert wird true zur\u00fcckgegeben, wenn die Datei gel\u00f6scht wurde. Falls die Datei nicht vorhanden oder l\u00f6schbar ist, wird false zur\u00fcckgegeben. <?php unlink ( 'datei.txt' ); Umbenennen # Mit rename() kann eine Datei oder ein Verzeichnis umbenannt werden. Dabei muss zuerst der Name der alten Datei und dann der neue Name \u00fcbergeben werden. <?php rename ( \"images\" , \"pictures\" ); rename ( 'datei.txt' , 'neuer_name.txt' );","title":"Dateien"},{"location":"PHP/Aufgaben/Dateien/#dateien","text":"Mit Dateien wird st\u00e4ndig gearbeitet. Sie sind ein wichtiger Bestandteil von Webanwendungen. Aus diesem Grund wird in den folgenden Kapiteln die Arbeit mit Dateien in PHP behandelt. Bevor mit einer Datei gearbeitet wird, sollte gepr\u00fcft werden ob diese \u00fcberhaupt existiert . Dies kann \u00fcber mittels file_exists() gemacht werden. Wenn die Datei vorhanden ist, dann wird true zur\u00fcckgegeben.","title":"Dateien"},{"location":"PHP/Aufgaben/Dateien/#auslesen","text":"Die Funktion file_get_contents() liest den kompletten Inhalt einer Datei aus und gibt diesen zur\u00fcck. Der Dateiname wird als Parameter \u00fcbergeben. Um den Inhalt in einer Webseite auszugeben sollten die Zeilenumbr\u00fcche mit nl2br() von \\n in <br /> umgewandelt werden. Ganze Datei auslesen <?php $content = file_get_contents ( 'datei.txt' ); echo nl2br ( $content ); Es ist nicht immer der Fall, dass auch die komplette Datei ausgegeben werden soll. Mithilfe von file() kann die Datei in ein Array gelesen werden. Jede Zeile wird dabei in ein Element des Arrays geschrieben. \u00dcber ein For-Loop kann dann der Inhalt der Datei Zeile f\u00fcr Zeile ausgegeben werden. Datei Zeile f\u00fcr Zeile auslesen <?php $content = file ( 'datei.txt' ); for ( $i = 0 ; $i < count ( $content ); $i ++ ) { echo nl2br ( $content [ $i ]); }","title":"Auslesen"},{"location":"PHP/Aufgaben/Dateien/#schreiben","text":"Mit file_put_contents() kann der Inhalt einer Datei \u00fcberschrieben werden. Der Dateiname wird als erster Parameter \u00fcbergeben. Der zweite Parameter ist der Inhalt, der in die Datei geschrieben werden soll. Falls die Datei noch nicht vorhanden ist, wird sie erstellt . Der dritte Parameter ist optional und kann auf FILE_APPEND gesetzt werden, um den Inhalt an die Datei anzuh\u00e4ngen . \u00dcberschreiben Anh\u00e4ngen <?php $content = 'Dies ist der neue Inhalt.' ; file_put_contents ( 'datei.txt' , $content ); <?php $content = 'Dies ist ein weiterer Inhalt.' ; file_put_contents ( 'datei.txt' , $content , FILE_APPEND );","title":"Schreiben"},{"location":"PHP/Aufgaben/Dateien/#loschen","text":"Mit unlink() kann eine Datei gel\u00f6scht werden. Als R\u00fcckgabewert wird true zur\u00fcckgegeben, wenn die Datei gel\u00f6scht wurde. Falls die Datei nicht vorhanden oder l\u00f6schbar ist, wird false zur\u00fcckgegeben. <?php unlink ( 'datei.txt' );","title":"L\u00f6schen"},{"location":"PHP/Aufgaben/Dateien/#umbenennen","text":"Mit rename() kann eine Datei oder ein Verzeichnis umbenannt werden. Dabei muss zuerst der Name der alten Datei und dann der neue Name \u00fcbergeben werden. <?php rename ( \"images\" , \"pictures\" ); rename ( 'datei.txt' , 'neuer_name.txt' );","title":"Umbenennen"},{"location":"PHP/Aufgaben/Formular/","tags":["PHP","Aufgaben"],"text":"Formular # Es gibt zwei Arten wie Formulare funktionieren k\u00f6nnen. Das eine w\u00e4r der Selbstverweis , welcher die Daten an die selbe Seite sendet. Also ruft es sich somit selbst auf. Formulare k\u00f6nnen jedoch auch Daten an ein anderes Script schicken, was sich Externerverweis nennen w\u00fcrde. Die Art des Aufrufs kann \u00fcber den Formulartag action gesteuert werden. Dort muss dann der Pfad zu einer Datei hinterlegt werden. Um einen Selbstverweis zu erstellen wird sollte $ _SERVER [ 'PHP_SELF' ] verwendet werden. Das gibt den Namen der aktuellen Datei aus, was einen Schutz gegen Umbenennungen und Verschiebungen ist. Zudem kann ein Formular \u00fcber GET oder POST die Daten senden. Donut Bestellung # Das folgende Formular funktioniert \u00fcber einen Selbstverweis. Falls beim Aufruf Daten \u00fcbergeben wurden, werden diese in einer Tabelle ausgegeben. Vor der Ausgabe eines Parameters wird gepr\u00fcft, ob der Parameter existiert und einen Wert besitzt. Wenn dies nicht der Fall ist, wird die Ausgabe auf leer gesetzt. Dabei ist der Operator ?? ein unumg\u00e4ngliches Hilfsmittel, da undefinierte Werte durch einen anderen Wert ersetzt werden k\u00f6nnen. Mithilfe von Bootstrap wurde es sch\u00f6n und selbstverst\u00e4ndlich Responsive gemacht. Wichtig ist, dass jegliche Ausgaben auf sch\u00e4dliche Inhalte \u00fcberpr\u00fcft werden m\u00fcssen. Dies passiert hier mit htmlspecialchars() . Dieser Filter ersetzt alle HTML-Sonderzeichen durch ihre HTML-Entit\u00e4ten. Dies verhindert, dass ein Angreifer HTML-Code in die Ausgabe einf\u00fcgen kann. Dieser wird dann als Text ausgegeben und nicht als HTML interpretiert. Die Auswertung erfolgt \u00fcber ein Flyout, welches erst dargestellt wird, wenn Daten vorhanden sind. Resultat # Das Resultat aus den folgenden Codeschnipseln kann live auf edu.flimtix.dev angesehen oder hier als komplette Datei heruntergeladen werden. Formular # Formular <form action=\" <?php echo htmlspecialchars ( $_SERVER [ 'PHP_SELF' ], ENT_QUOTES , 'utf-8' ); ?> \" method=\"GET\" class=\"row g-3\"> <!-- Firma / Privatperson --> <div class=\"row col-12 mt-2 mx-2\"> <div class=\"form-check col-6\"> <input class=\"form-check-input\" type=\"radio\" name=\"art\" value=\"privatperson\" id=\"privatperson\" checked> <label class=\"form-check-label\" for=\"privatperson\">Privatperson</label> </div> <div class=\"form-check col-6\"> <input class=\"form-check-input\" type=\"radio\" name=\"art\" value=\"firma\" id=\"firma\"> <label class=\"form-check-label\" for=\"firma\">Firma</label> </div> </div> <!-- Anrede --> <div class=\"form-floating col-12\"> <select class=\"form-select\" id=\"anrede\" name=\"anrede\"> <option value=\"1\" selected disabled hidden>Anrede ausw\u00e4hlen</option> <option value=\"1\">\ud83d\udc66 - Mann</option> <option value=\"2\">\ud83d\udc69 - Frau</option> <option value=\"3\">\ud83d\ude81 - Kampfhelikopter</option> </select> <label for=\"anrede\">Anrede</label> </div> <!-- Vorname & Nachname --> <div class=\"form-floating col-12 col-md-6\"> <input type=\"text\" class=\"form-control\" id=\"vorname\" name=\"vorname\" placeholder=\"Vorname\" required> <label for=\"vorname\">Vorname</label> </div> <div class=\"form-floating col-12 col-md-6\"> <input type=\"text\" class=\"form-control\" id=\"nachname\" name=\"nachname\" placeholder=\"Nachname\" required> <label for=\"nachname\">Nachname</label> </div> <!-- E-Mail --> <div class=\"form-floating col-12\"> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Email\" required> <label for=\"email\">Email</label> </div> <!-- Sorte --> <hr /> <div class=\"form-floating col-12\"> <select class=\"form-select\" id=\"sorte\" name=\"sorte\"> <option value=\"1\" selected disabled hidden>Sorte ausw\u00e4hlen</option> <option value=\"1\">\ud83c\udf69 - Donut</option> <option value=\"2\">\ud83c\udf69 - Donut mit Schokolade</option> <option value=\"3\">\ud83c\udf69 - Donut mit Schokolade und N\u00fcssen</option> </select> <label for=\"sorte\">Sorte</label> </div> <!-- Anzahl --> <div class=\"form-floating col-12\"> <input type=\"number\" class=\"form-control\" id=\"anzahl\" name=\"anzahl\" min=\"1\" max=\"500\" placeholder=\"Anzahl\" required> <label for=\"anzahl\">Anzahl</label> </div> <!-- Adresse --> <hr /> <div class=\"form-floating col-12\"> <input type=\"text\" class=\"form-control\" id=\"zusatz\" name=\"zusatz\" placeholder=\"Adresszusatz\"> <label for=\"zusatz\">Adresszusatz</label> </div> <div class=\"form-floating col-9 col-md-8\"> <input type=\"text\" class=\"form-control\" id=\"strasse\" name=\"strasse\" placeholder=\"Strasse\" required> <label for=\"strasse\">Strasse</label> </div> <div class=\"form-floating col-3 col-md-4\"> <input type=\"text\" class=\"form-control\" id=\"hausnummer\" name=\"hausnummer\" placeholder=\"Hausnummer\"> <label for=\"hausnummer\">Hausnummer</label> </div> <div class=\"form-floating col-3 col-md-4\"> <input type=\"text\" class=\"form-control\" id=\"plz\" name=\"plz\" placeholder=\"PLZ\" required> <label for=\"plz\">PLZ</label> </div> <div class=\"form-floating col-9 col-md-8\"> <input type=\"text\" class=\"form-control\" id=\"ort\" name=\"ort\" placeholder=\"Ort\" required> <label for=\"ort\">Ort</label> </div> <!-- Lieferdatum --> <hr /> <div class=\"form-floating col-12\"> <input type=\"date\" class=\"form-control\" id=\"lieferdatum\" name=\"lieferdatum\" placeholder=\"Lieferdatum\" value=\" <?php echo ( new DateTime ()) -> format ( 'Y-m-d' ) ?> \" required> <label for=\"lieferdatum\">Lieferdatum</label> </div> <!-- Weitere Informationen --> <div class=\"form-floating col-12\"> <textarea class=\"form-control\" placeholder=\"Freitext\" id=\"freitext\" name=\"freitext\" style=\"height: 120px;\" rows=\" 5\"></textarea> <label for=\"freitext\">Weitere Informationen</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Bestellen \ud83d\udce6</button> </form> Auswertung # Auswertung <!-- Auswertung --> <div class=\"offcanvas offcanvas-bottom <?php echo empty ( $_POST ) && empty ( $_GET ) ? '' : 'show' ; ?> \" tabindex=\"-1\" id=\"uebersichtBestellung\" aria-labelledby=\"offcanvasTopLabel\"> <div class=\"offcanvas-header\"> <h2 class=\"offcanvas-title\" id=\"offcanvasTopLabel\">Bestellung</h2> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button> </div> <div class=\"offcanvas-body\"> <table class=\"table mb-5\"> <thead> <tr> <th scope=\"col\">Besteller</th> <th scope=\"col\">Anrede</th> <th scope=\"col\">Vorname</th> <th scope=\"col\">Nachname</th> <th scope=\"col\">Email</th> <th scope=\"col\">Sorte</th> <th scope=\"col\">Anzahl</th> <th scope=\"col\">Lieferdatum</th> <th scope=\"col\">Freitext</th> </tr> </thead> <tbody> <?php $bestellung = empty ( $_POST ) ? $_GET : $_POST ; if ( ! empty ( $bestellung )) { echo \"<tr>\" ; echo \"<td>\" . ( isset ( $bestellung [ 'art' ]) && $bestellung [ 'art' ] == 'firma' ? 'Firma' : 'Privatperson' ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'anrede' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'vorname' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'nachname' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'email' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'sorte' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'anzahl' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'lieferdatum' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'freitext' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"</tr>\" ; } ?> </tbody> </table> <hr /> <table class=\" table\"> <thead> <tr> <th scope=\"col\">Adresszusatz</th> <th scope=\"col\">Strasse</th> <th scope=\"col\">Hausnummer</th> <th scope=\"col\">PLZ</th> <th scope=\"col\">Ort</th> </tr> </thead> <tbody> <?php $bestellung = empty ( $_POST ) ? $_GET : $_POST ; if ( ! empty ( $bestellung )) { echo \"<tr>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'zusatz' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'strasse' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'hausnummer' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'plz' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'ort' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"</tr>\" ; } ?> </tbody> </table> </div> </div>","title":"Formular"},{"location":"PHP/Aufgaben/Formular/#formular","text":"Es gibt zwei Arten wie Formulare funktionieren k\u00f6nnen. Das eine w\u00e4r der Selbstverweis , welcher die Daten an die selbe Seite sendet. Also ruft es sich somit selbst auf. Formulare k\u00f6nnen jedoch auch Daten an ein anderes Script schicken, was sich Externerverweis nennen w\u00fcrde. Die Art des Aufrufs kann \u00fcber den Formulartag action gesteuert werden. Dort muss dann der Pfad zu einer Datei hinterlegt werden. Um einen Selbstverweis zu erstellen wird sollte $ _SERVER [ 'PHP_SELF' ] verwendet werden. Das gibt den Namen der aktuellen Datei aus, was einen Schutz gegen Umbenennungen und Verschiebungen ist. Zudem kann ein Formular \u00fcber GET oder POST die Daten senden.","title":"Formular"},{"location":"PHP/Aufgaben/Formular/#donut-bestellung","text":"Das folgende Formular funktioniert \u00fcber einen Selbstverweis. Falls beim Aufruf Daten \u00fcbergeben wurden, werden diese in einer Tabelle ausgegeben. Vor der Ausgabe eines Parameters wird gepr\u00fcft, ob der Parameter existiert und einen Wert besitzt. Wenn dies nicht der Fall ist, wird die Ausgabe auf leer gesetzt. Dabei ist der Operator ?? ein unumg\u00e4ngliches Hilfsmittel, da undefinierte Werte durch einen anderen Wert ersetzt werden k\u00f6nnen. Mithilfe von Bootstrap wurde es sch\u00f6n und selbstverst\u00e4ndlich Responsive gemacht. Wichtig ist, dass jegliche Ausgaben auf sch\u00e4dliche Inhalte \u00fcberpr\u00fcft werden m\u00fcssen. Dies passiert hier mit htmlspecialchars() . Dieser Filter ersetzt alle HTML-Sonderzeichen durch ihre HTML-Entit\u00e4ten. Dies verhindert, dass ein Angreifer HTML-Code in die Ausgabe einf\u00fcgen kann. Dieser wird dann als Text ausgegeben und nicht als HTML interpretiert. Die Auswertung erfolgt \u00fcber ein Flyout, welches erst dargestellt wird, wenn Daten vorhanden sind.","title":"Donut Bestellung"},{"location":"PHP/Aufgaben/Formular/#resultat","text":"Das Resultat aus den folgenden Codeschnipseln kann live auf edu.flimtix.dev angesehen oder hier als komplette Datei heruntergeladen werden.","title":"Resultat"},{"location":"PHP/Aufgaben/Formular/#formular_1","text":"Formular <form action=\" <?php echo htmlspecialchars ( $_SERVER [ 'PHP_SELF' ], ENT_QUOTES , 'utf-8' ); ?> \" method=\"GET\" class=\"row g-3\"> <!-- Firma / Privatperson --> <div class=\"row col-12 mt-2 mx-2\"> <div class=\"form-check col-6\"> <input class=\"form-check-input\" type=\"radio\" name=\"art\" value=\"privatperson\" id=\"privatperson\" checked> <label class=\"form-check-label\" for=\"privatperson\">Privatperson</label> </div> <div class=\"form-check col-6\"> <input class=\"form-check-input\" type=\"radio\" name=\"art\" value=\"firma\" id=\"firma\"> <label class=\"form-check-label\" for=\"firma\">Firma</label> </div> </div> <!-- Anrede --> <div class=\"form-floating col-12\"> <select class=\"form-select\" id=\"anrede\" name=\"anrede\"> <option value=\"1\" selected disabled hidden>Anrede ausw\u00e4hlen</option> <option value=\"1\">\ud83d\udc66 - Mann</option> <option value=\"2\">\ud83d\udc69 - Frau</option> <option value=\"3\">\ud83d\ude81 - Kampfhelikopter</option> </select> <label for=\"anrede\">Anrede</label> </div> <!-- Vorname & Nachname --> <div class=\"form-floating col-12 col-md-6\"> <input type=\"text\" class=\"form-control\" id=\"vorname\" name=\"vorname\" placeholder=\"Vorname\" required> <label for=\"vorname\">Vorname</label> </div> <div class=\"form-floating col-12 col-md-6\"> <input type=\"text\" class=\"form-control\" id=\"nachname\" name=\"nachname\" placeholder=\"Nachname\" required> <label for=\"nachname\">Nachname</label> </div> <!-- E-Mail --> <div class=\"form-floating col-12\"> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Email\" required> <label for=\"email\">Email</label> </div> <!-- Sorte --> <hr /> <div class=\"form-floating col-12\"> <select class=\"form-select\" id=\"sorte\" name=\"sorte\"> <option value=\"1\" selected disabled hidden>Sorte ausw\u00e4hlen</option> <option value=\"1\">\ud83c\udf69 - Donut</option> <option value=\"2\">\ud83c\udf69 - Donut mit Schokolade</option> <option value=\"3\">\ud83c\udf69 - Donut mit Schokolade und N\u00fcssen</option> </select> <label for=\"sorte\">Sorte</label> </div> <!-- Anzahl --> <div class=\"form-floating col-12\"> <input type=\"number\" class=\"form-control\" id=\"anzahl\" name=\"anzahl\" min=\"1\" max=\"500\" placeholder=\"Anzahl\" required> <label for=\"anzahl\">Anzahl</label> </div> <!-- Adresse --> <hr /> <div class=\"form-floating col-12\"> <input type=\"text\" class=\"form-control\" id=\"zusatz\" name=\"zusatz\" placeholder=\"Adresszusatz\"> <label for=\"zusatz\">Adresszusatz</label> </div> <div class=\"form-floating col-9 col-md-8\"> <input type=\"text\" class=\"form-control\" id=\"strasse\" name=\"strasse\" placeholder=\"Strasse\" required> <label for=\"strasse\">Strasse</label> </div> <div class=\"form-floating col-3 col-md-4\"> <input type=\"text\" class=\"form-control\" id=\"hausnummer\" name=\"hausnummer\" placeholder=\"Hausnummer\"> <label for=\"hausnummer\">Hausnummer</label> </div> <div class=\"form-floating col-3 col-md-4\"> <input type=\"text\" class=\"form-control\" id=\"plz\" name=\"plz\" placeholder=\"PLZ\" required> <label for=\"plz\">PLZ</label> </div> <div class=\"form-floating col-9 col-md-8\"> <input type=\"text\" class=\"form-control\" id=\"ort\" name=\"ort\" placeholder=\"Ort\" required> <label for=\"ort\">Ort</label> </div> <!-- Lieferdatum --> <hr /> <div class=\"form-floating col-12\"> <input type=\"date\" class=\"form-control\" id=\"lieferdatum\" name=\"lieferdatum\" placeholder=\"Lieferdatum\" value=\" <?php echo ( new DateTime ()) -> format ( 'Y-m-d' ) ?> \" required> <label for=\"lieferdatum\">Lieferdatum</label> </div> <!-- Weitere Informationen --> <div class=\"form-floating col-12\"> <textarea class=\"form-control\" placeholder=\"Freitext\" id=\"freitext\" name=\"freitext\" style=\"height: 120px;\" rows=\" 5\"></textarea> <label for=\"freitext\">Weitere Informationen</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Bestellen \ud83d\udce6</button> </form>","title":"Formular"},{"location":"PHP/Aufgaben/Formular/#auswertung","text":"Auswertung <!-- Auswertung --> <div class=\"offcanvas offcanvas-bottom <?php echo empty ( $_POST ) && empty ( $_GET ) ? '' : 'show' ; ?> \" tabindex=\"-1\" id=\"uebersichtBestellung\" aria-labelledby=\"offcanvasTopLabel\"> <div class=\"offcanvas-header\"> <h2 class=\"offcanvas-title\" id=\"offcanvasTopLabel\">Bestellung</h2> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button> </div> <div class=\"offcanvas-body\"> <table class=\"table mb-5\"> <thead> <tr> <th scope=\"col\">Besteller</th> <th scope=\"col\">Anrede</th> <th scope=\"col\">Vorname</th> <th scope=\"col\">Nachname</th> <th scope=\"col\">Email</th> <th scope=\"col\">Sorte</th> <th scope=\"col\">Anzahl</th> <th scope=\"col\">Lieferdatum</th> <th scope=\"col\">Freitext</th> </tr> </thead> <tbody> <?php $bestellung = empty ( $_POST ) ? $_GET : $_POST ; if ( ! empty ( $bestellung )) { echo \"<tr>\" ; echo \"<td>\" . ( isset ( $bestellung [ 'art' ]) && $bestellung [ 'art' ] == 'firma' ? 'Firma' : 'Privatperson' ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'anrede' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'vorname' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'nachname' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'email' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'sorte' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'anzahl' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'lieferdatum' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'freitext' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"</tr>\" ; } ?> </tbody> </table> <hr /> <table class=\" table\"> <thead> <tr> <th scope=\"col\">Adresszusatz</th> <th scope=\"col\">Strasse</th> <th scope=\"col\">Hausnummer</th> <th scope=\"col\">PLZ</th> <th scope=\"col\">Ort</th> </tr> </thead> <tbody> <?php $bestellung = empty ( $_POST ) ? $_GET : $_POST ; if ( ! empty ( $bestellung )) { echo \"<tr>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'zusatz' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'strasse' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'hausnummer' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'plz' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"<td>\" . htmlspecialchars ( $bestellung [ 'ort' ] ?? '' , ENT_QUOTES , \"utf-8\" ) . \"</td>\" ; echo \"</tr>\" ; } ?> </tbody> </table> </div> </div>","title":"Auswertung"},{"location":"PHP/Aufgaben/HTTP-Parameter/","tags":["PHP","Aufgaben"],"text":"HTTP Parameter # HTTP Parameter werden in der URL \u00fcbergeben. Sie werden mit einem ? getrennt von der URL. Die Parameter werden mit einem & getrennt. Ein Parameter besteht aus einem Namen und einem Wert. Der Wert wird mit einem = getrennt. Der Wert kann auch leer sein. Der Name und der Wert werden URL-kodiert. Das bedeutet, dass Leerzeichen mit einem + ersetzt werden und Sonderzeichen mit % und einem Hexadezimalwert ersetzt werden. Der Wert kann auch ein Array sein. Dann wird der Name mehrfach verwendet. Der Wert eines Arrays wird mit einem , getrennt. GET und POST # GET wird in der URL \u00fcbergeben. POST wird im Body \u00fcbergeben. GET wird in der URL angezeigt, wobei POST nicht angezeigt wird. GET ist limitiert auf 2048 Zeichen, POST ist unbegrenzt. GET ist f\u00fcr Suchanfragen, POST f\u00fcr Formulare. Wenn die Werte nicht \u00fcbergeben wurden, dann wird eine Warnung angezeigt. Um diese zu verhindern kann mit isset() gepr\u00fcft werden, ob der Wert \u00fcbergeben wurde. Mithilfe von empty() kann gepr\u00fcft werden, ob der Wert leer ist. In PHP wird ein assoziatives Array hinterlegt, mit dem Namen des Parameters. \u00dcber sogenannte SuperGlobals kann auf die Parameter zugegriffen werden. \u00dcber $_SERVER[\"PHP_SELF\"] kann direkt auf die aktuelle Seite verwiesen werden. GET POST < form action = '<?php echo $_SERVER[\"PHP_SELF\"] ?>' method = \"get\" > Name: < input type = \"text\" name = \"name\" />< br /> Alter: < input type = \"number\" name = \"alter\" />< br /> < input type = \"Submit\" value = \"Absenden\" /> </ form > <?php //http://localhost:3000/?name=Manuel&alter=18 if ( isset ( $_GET [ \"name\" ])) { echo $_GET [ \"name\" ]; //Manuel } if ( isset ( $_GET [ \"alter\" ])) { echo $_GET [ \"alter\" ]; //18 } < form action = \"seite2.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" />< br /> Alter: < input type = \"number\" name = \"alter\" />< br /> < input type = \"Submit\" value = \"Absenden\" /> </ form > <?php echo $_POST [ \"name\" ]; //Manuel echo $_POST [ \"alter\" ]; //18 Anwendungsf\u00e4lle # Aufgabe GET GET Cacheable Browser & Server Wiederaufrufbar Sichtbarkeit Sichtbar in URL Nicht sichtbar Sicherheit Sensitive Daten sichtbar Sensitive Daten versteckt Zeichenlimit 2048 Unbegrenzt (Limit bei Server) Zeichenart Nur ASCII Alles erlaubt (Bilder, Audio, Binary, ...) Abfrage Daten anfordern Daten modifizieren Redirects # Ein Redirect ist ein HTTP-Header, der den Browser dazu auffordert, eine andere URL aufzurufen. Ein Redirect kann mit header() gesendet werden. Der erste Parameter ist der HTTP-Statuscode. Der zweite Parameter ist die URL. Der Statuscode 301 ist permanent, 302 ist tempor\u00e4r. Der Browser speichert den Redirect und f\u00fchrt ihn bei einem erneuten Aufruf aus. <?php header ( \"Location: https://neueUrl.dev\" , true , 301 ); exit ();","title":"HTTP-Parameter"},{"location":"PHP/Aufgaben/HTTP-Parameter/#http-parameter","text":"HTTP Parameter werden in der URL \u00fcbergeben. Sie werden mit einem ? getrennt von der URL. Die Parameter werden mit einem & getrennt. Ein Parameter besteht aus einem Namen und einem Wert. Der Wert wird mit einem = getrennt. Der Wert kann auch leer sein. Der Name und der Wert werden URL-kodiert. Das bedeutet, dass Leerzeichen mit einem + ersetzt werden und Sonderzeichen mit % und einem Hexadezimalwert ersetzt werden. Der Wert kann auch ein Array sein. Dann wird der Name mehrfach verwendet. Der Wert eines Arrays wird mit einem , getrennt.","title":"HTTP Parameter"},{"location":"PHP/Aufgaben/HTTP-Parameter/#get-und-post","text":"GET wird in der URL \u00fcbergeben. POST wird im Body \u00fcbergeben. GET wird in der URL angezeigt, wobei POST nicht angezeigt wird. GET ist limitiert auf 2048 Zeichen, POST ist unbegrenzt. GET ist f\u00fcr Suchanfragen, POST f\u00fcr Formulare. Wenn die Werte nicht \u00fcbergeben wurden, dann wird eine Warnung angezeigt. Um diese zu verhindern kann mit isset() gepr\u00fcft werden, ob der Wert \u00fcbergeben wurde. Mithilfe von empty() kann gepr\u00fcft werden, ob der Wert leer ist. In PHP wird ein assoziatives Array hinterlegt, mit dem Namen des Parameters. \u00dcber sogenannte SuperGlobals kann auf die Parameter zugegriffen werden. \u00dcber $_SERVER[\"PHP_SELF\"] kann direkt auf die aktuelle Seite verwiesen werden. GET POST < form action = '<?php echo $_SERVER[\"PHP_SELF\"] ?>' method = \"get\" > Name: < input type = \"text\" name = \"name\" />< br /> Alter: < input type = \"number\" name = \"alter\" />< br /> < input type = \"Submit\" value = \"Absenden\" /> </ form > <?php //http://localhost:3000/?name=Manuel&alter=18 if ( isset ( $_GET [ \"name\" ])) { echo $_GET [ \"name\" ]; //Manuel } if ( isset ( $_GET [ \"alter\" ])) { echo $_GET [ \"alter\" ]; //18 } < form action = \"seite2.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" />< br /> Alter: < input type = \"number\" name = \"alter\" />< br /> < input type = \"Submit\" value = \"Absenden\" /> </ form > <?php echo $_POST [ \"name\" ]; //Manuel echo $_POST [ \"alter\" ]; //18","title":"GET und POST"},{"location":"PHP/Aufgaben/HTTP-Parameter/#anwendungsfalle","text":"Aufgabe GET GET Cacheable Browser & Server Wiederaufrufbar Sichtbarkeit Sichtbar in URL Nicht sichtbar Sicherheit Sensitive Daten sichtbar Sensitive Daten versteckt Zeichenlimit 2048 Unbegrenzt (Limit bei Server) Zeichenart Nur ASCII Alles erlaubt (Bilder, Audio, Binary, ...) Abfrage Daten anfordern Daten modifizieren","title":"Anwendungsf\u00e4lle"},{"location":"PHP/Aufgaben/HTTP-Parameter/#redirects","text":"Ein Redirect ist ein HTTP-Header, der den Browser dazu auffordert, eine andere URL aufzurufen. Ein Redirect kann mit header() gesendet werden. Der erste Parameter ist der HTTP-Statuscode. Der zweite Parameter ist die URL. Der Statuscode 301 ist permanent, 302 ist tempor\u00e4r. Der Browser speichert den Redirect und f\u00fchrt ihn bei einem erneuten Aufruf aus. <?php header ( \"Location: https://neueUrl.dev\" , true , 301 ); exit ();","title":"Redirects"},{"location":"PHP/Aufgaben/Rechnen/","tags":["PHP","Aufgaben"],"text":"Rechnen mit Variablen # PHP verf\u00fcgt wie alle anderen Programmiersprachen \u00fcber die Grundrechenarten . Diese k\u00f6nnen mit Variablen durchgef\u00fchrt werden. Die Rechenzeichen sind + , - , * und / . Wichtig zu beachten ist, dass Kommazahlen im englischen Format, mit einem . geschrieben werden. Berechnungen mit Variablen <?php $zahl1 = 10 ; $zahl2 = 5.5 ; echo $zahl1 + $zahl2 ; //addieren echo $zahl1 - $zahl2 ; //subtrahieren echo $zahl1 * $zahl2 ; //multiplizieren echo $zahl1 / $zahl2 ; //dividieren echo $zahl1 % $zahl2 ; //modulo (Rest der Division) echo $zahl1 ** $zahl2 ; //potenzieren echo 2 * $zahl1 + 5 * $zahl2 - 3 ; //Berechnet (2*10) + (5*5) - 3 Kurzschreibweise # Einfache Rechnungen k\u00f6nnen auch mit der Kurzschreibweise durchgef\u00fchrt werden. Dazu wird der Operator vor die Variable geschrieben. Es kann += , -= , *= , /= und %= verwendet werden. Das %= ist die Modulo-Operation, welche den Rest einer Division zur\u00fcckgibt. F\u00fcr das einfache Plus eins rechnen kann auch ++ / -- verwendet werden. Kurzschreibweise <? echo ++ $zahl1 ; //Inkrementieren echo $zahl1 += 5 ; //Addieren echo $zahl1 -- ; //Dekrementieren echo $zahl1 -= 5 ; //Subtrahieren Mathematische Funktionen # F\u00fcr das Rechnen mit Variablen gibt es auch Mathematische Funktionen . Diese k\u00f6nnen mit Math:: vorangestellt werden. Die Funktionen sind abs() , ceil() , floor() , round() , max() , min() , pow() , sqrt() und rand() . Die Funktion abs() gibt den positiven Wert einer Zahl zur\u00fcck. ceil() rundet eine Zahl auf und gibt die n\u00e4chste ganze Zahl zur\u00fcck. Mithilfe von floor() rundet man eine Zahl ab und gibt die n\u00e4chste ganze Zahl zur\u00fcck. Die Funktion round() rundet eine Zahl auf die Anzahl Kommastellen. Die h\u00f6chste Zahl bekommt man mit max() , wobei min() die niedrigste Zahl zur\u00fcck gibt. Die Potenz einer Zahl kann mit pow() Berechnet werden. Wurzel zieht man mit sqrt() . Eine zuf\u00e4llige Zahl, zwischen zwei Bereichen, erh\u00e4lt man mit rand() . Mathematische Funktionen <? echo abs ( - 5 ); // 5 (Positive Zahl) echo ceil ( 3.1415 ); // 4 (Rundet auf) echo floor ( 3.1415 ); // 3 (Rundet ab) echo round ( 3.1415 , 2 ); // 3.14 (2 Nachkommastellen) echo max ( 5 , 10 , 15 ); // 15 (die h\u00f6chste Zahl) echo min ( 5 , 10 , 15 ); // 5 (kleinstes Argument) echo pow ( 2 , 3 ); // 8 (Hoch: 2^3) echo sqrt ( 64 ); // 8 (Wurzel von \u221a64) echo rand ( 1 , 10 ); // Zufallszahl zwischen 1 und 10 Strings # Strings sind wie in allen Programmiersprachen immutable . Jedoch wurde beim zusammenf\u00fcgen von Strings etwas vom Ordin\u00e4ren abgewichen. Dies passiert in PHP mithilfe eines Punktes . , welcher sich zwischen den Zeichenketten befindet. Der Grund wieso ein Punkt verwendet wurde wird, ist, da die Verwendung eines + in einer Sprache mit freier Typisierung nicht sonderlich praktisch w\u00e4re. Beispiel + f\u00fcr Zusammenf\u00fcgung <? echo \"a\" + \"b\" // ASCII, Binary oder \"ab\" echo \"2a\" + 2 // 4 oder \"2a2\" echo 1 + 2 ; // 12 oder 3 ergeben? Dies ist ein grosses Problem bei losen Typisierung , da nie klar ist was genau mit dem Datentyp passieren sollte. Im Falle von JavaScript kommt dann ein solches Durcheinander heraus. Mit einem Punkt ist klar, dass Strings kombiniert werden sollten.","title":"Rechnen mit Variablen"},{"location":"PHP/Aufgaben/Rechnen/#rechnen-mit-variablen","text":"PHP verf\u00fcgt wie alle anderen Programmiersprachen \u00fcber die Grundrechenarten . Diese k\u00f6nnen mit Variablen durchgef\u00fchrt werden. Die Rechenzeichen sind + , - , * und / . Wichtig zu beachten ist, dass Kommazahlen im englischen Format, mit einem . geschrieben werden. Berechnungen mit Variablen <?php $zahl1 = 10 ; $zahl2 = 5.5 ; echo $zahl1 + $zahl2 ; //addieren echo $zahl1 - $zahl2 ; //subtrahieren echo $zahl1 * $zahl2 ; //multiplizieren echo $zahl1 / $zahl2 ; //dividieren echo $zahl1 % $zahl2 ; //modulo (Rest der Division) echo $zahl1 ** $zahl2 ; //potenzieren echo 2 * $zahl1 + 5 * $zahl2 - 3 ; //Berechnet (2*10) + (5*5) - 3","title":"Rechnen mit Variablen"},{"location":"PHP/Aufgaben/Rechnen/#kurzschreibweise","text":"Einfache Rechnungen k\u00f6nnen auch mit der Kurzschreibweise durchgef\u00fchrt werden. Dazu wird der Operator vor die Variable geschrieben. Es kann += , -= , *= , /= und %= verwendet werden. Das %= ist die Modulo-Operation, welche den Rest einer Division zur\u00fcckgibt. F\u00fcr das einfache Plus eins rechnen kann auch ++ / -- verwendet werden. Kurzschreibweise <? echo ++ $zahl1 ; //Inkrementieren echo $zahl1 += 5 ; //Addieren echo $zahl1 -- ; //Dekrementieren echo $zahl1 -= 5 ; //Subtrahieren","title":"Kurzschreibweise"},{"location":"PHP/Aufgaben/Rechnen/#mathematische-funktionen","text":"F\u00fcr das Rechnen mit Variablen gibt es auch Mathematische Funktionen . Diese k\u00f6nnen mit Math:: vorangestellt werden. Die Funktionen sind abs() , ceil() , floor() , round() , max() , min() , pow() , sqrt() und rand() . Die Funktion abs() gibt den positiven Wert einer Zahl zur\u00fcck. ceil() rundet eine Zahl auf und gibt die n\u00e4chste ganze Zahl zur\u00fcck. Mithilfe von floor() rundet man eine Zahl ab und gibt die n\u00e4chste ganze Zahl zur\u00fcck. Die Funktion round() rundet eine Zahl auf die Anzahl Kommastellen. Die h\u00f6chste Zahl bekommt man mit max() , wobei min() die niedrigste Zahl zur\u00fcck gibt. Die Potenz einer Zahl kann mit pow() Berechnet werden. Wurzel zieht man mit sqrt() . Eine zuf\u00e4llige Zahl, zwischen zwei Bereichen, erh\u00e4lt man mit rand() . Mathematische Funktionen <? echo abs ( - 5 ); // 5 (Positive Zahl) echo ceil ( 3.1415 ); // 4 (Rundet auf) echo floor ( 3.1415 ); // 3 (Rundet ab) echo round ( 3.1415 , 2 ); // 3.14 (2 Nachkommastellen) echo max ( 5 , 10 , 15 ); // 15 (die h\u00f6chste Zahl) echo min ( 5 , 10 , 15 ); // 5 (kleinstes Argument) echo pow ( 2 , 3 ); // 8 (Hoch: 2^3) echo sqrt ( 64 ); // 8 (Wurzel von \u221a64) echo rand ( 1 , 10 ); // Zufallszahl zwischen 1 und 10","title":"Mathematische Funktionen"},{"location":"PHP/Aufgaben/Rechnen/#strings","text":"Strings sind wie in allen Programmiersprachen immutable . Jedoch wurde beim zusammenf\u00fcgen von Strings etwas vom Ordin\u00e4ren abgewichen. Dies passiert in PHP mithilfe eines Punktes . , welcher sich zwischen den Zeichenketten befindet. Der Grund wieso ein Punkt verwendet wurde wird, ist, da die Verwendung eines + in einer Sprache mit freier Typisierung nicht sonderlich praktisch w\u00e4re. Beispiel + f\u00fcr Zusammenf\u00fcgung <? echo \"a\" + \"b\" // ASCII, Binary oder \"ab\" echo \"2a\" + 2 // 4 oder \"2a2\" echo 1 + 2 ; // 12 oder 3 ergeben? Dies ist ein grosses Problem bei losen Typisierung , da nie klar ist was genau mit dem Datentyp passieren sollte. Im Falle von JavaScript kommt dann ein solches Durcheinander heraus. Mit einem Punkt ist klar, dass Strings kombiniert werden sollten.","title":"Strings"},{"location":"PHP/Aufgaben/Schleifen/","tags":["PHP","Aufgaben"],"text":"Schleifen # Schleifen sind eine M\u00f6glichkeit, Code mehrmals auszuf\u00fchren. In PHP gibt es vier verschiedene Arten von Schleifen: Schleifenart Beschreibung for Solange die Bedingung erf\u00fcllt ist und z\u00e4hlt einen Index hoch foreach F\u00fcr jedes Element in einem Array while Solange die Bedingung erf\u00fcllt ist do while Solange die Bedingung erf\u00fcllt ist (mindestens 1x) For # Die for -Schleife ist die einfachste Schleife. Sie z\u00e4hlt einen Index hoch und pr\u00fcft, ob die Bedingung erf\u00fcllt ist. Wenn die Bedingung erf\u00fcllt ist, wird der Code ausgef\u00fchrt. Anschlie\u00dfend wird der Index um 1 erh\u00f6ht und die Bedingung erneut gepr\u00fcft. Dieser Vorgang wird solange wiederholt, bis die Bedingung nicht mehr erf\u00fcllt ist. Ausgabe 0 bis 10 <? for ( $i = 0 ; $i <= 10 ; $i ++ ) { echo $i ; } Foreach # Die foreach -Schleife ist eine spezielle Schleife, die nur f\u00fcr Arrays verwendet werden kann. Sie iteriert \u00fcber jedes Element im Array und gibt den Wert des Elements aus. Ausgabe von Array-Elementen <? $names = [ \"Max\" , \"Moritz\" , \"Erika\" ]; foreach ( $names as $name ) { echo $name ; } While # Die while -Schleife ist eine Schleife, die solange ausgef\u00fchrt wird, bis die Bedingung nicht mehr erf\u00fcllt ist. Sie ist sehr \u00e4hnlich zur for -Schleife, nur dass die Bedingung am Ende gepr\u00fcft wird. Ausgabe 0 bis 10 <? $i = 0 ; while ( $i <= 10 ) { echo $i ; $i ++ ; } Do While # Die do while -Schleife ist eine Schleife, die mindestens einmal ausgef\u00fchrt wird. Sie ist sehr \u00e4hnlich zur while -Schleife, nur dass die Bedingung am Ende gepr\u00fcft wird. Ausgabe 0 bis 10 <? $i = 0 ; do { echo $i ; $i ++ ; } while ( $i <= 10 ); Abbrechen & \u00dcberspringen # Es gibt zwei M\u00f6glichkeiten, eine Schleife zu beenden: break beendet die Schleife continue \u00fcberspringt den aktuellen Durchlauf Dies kann behilflich sein, wenn Werte ausgelassen werden sollen oder die Schleife abgebrochen werden soll, wenn eine Bedingung erf\u00fcllt ist. \u00dcblicherweise wird return eher als break verwendet, da der Code schwer nachzufolgen ist. Ausgabe 0 bis 10, aber 5 wird \u00fcbersprungen <? for ( $i = 0 ; $i <= 10 ; $i ++ ) { if ( $i == 5 ) { continue ; } echo $i ; }","title":"Schleifen"},{"location":"PHP/Aufgaben/Schleifen/#schleifen","text":"Schleifen sind eine M\u00f6glichkeit, Code mehrmals auszuf\u00fchren. In PHP gibt es vier verschiedene Arten von Schleifen: Schleifenart Beschreibung for Solange die Bedingung erf\u00fcllt ist und z\u00e4hlt einen Index hoch foreach F\u00fcr jedes Element in einem Array while Solange die Bedingung erf\u00fcllt ist do while Solange die Bedingung erf\u00fcllt ist (mindestens 1x)","title":"Schleifen"},{"location":"PHP/Aufgaben/Schleifen/#for","text":"Die for -Schleife ist die einfachste Schleife. Sie z\u00e4hlt einen Index hoch und pr\u00fcft, ob die Bedingung erf\u00fcllt ist. Wenn die Bedingung erf\u00fcllt ist, wird der Code ausgef\u00fchrt. Anschlie\u00dfend wird der Index um 1 erh\u00f6ht und die Bedingung erneut gepr\u00fcft. Dieser Vorgang wird solange wiederholt, bis die Bedingung nicht mehr erf\u00fcllt ist. Ausgabe 0 bis 10 <? for ( $i = 0 ; $i <= 10 ; $i ++ ) { echo $i ; }","title":"For"},{"location":"PHP/Aufgaben/Schleifen/#foreach","text":"Die foreach -Schleife ist eine spezielle Schleife, die nur f\u00fcr Arrays verwendet werden kann. Sie iteriert \u00fcber jedes Element im Array und gibt den Wert des Elements aus. Ausgabe von Array-Elementen <? $names = [ \"Max\" , \"Moritz\" , \"Erika\" ]; foreach ( $names as $name ) { echo $name ; }","title":"Foreach"},{"location":"PHP/Aufgaben/Schleifen/#while","text":"Die while -Schleife ist eine Schleife, die solange ausgef\u00fchrt wird, bis die Bedingung nicht mehr erf\u00fcllt ist. Sie ist sehr \u00e4hnlich zur for -Schleife, nur dass die Bedingung am Ende gepr\u00fcft wird. Ausgabe 0 bis 10 <? $i = 0 ; while ( $i <= 10 ) { echo $i ; $i ++ ; }","title":"While"},{"location":"PHP/Aufgaben/Schleifen/#do-while","text":"Die do while -Schleife ist eine Schleife, die mindestens einmal ausgef\u00fchrt wird. Sie ist sehr \u00e4hnlich zur while -Schleife, nur dass die Bedingung am Ende gepr\u00fcft wird. Ausgabe 0 bis 10 <? $i = 0 ; do { echo $i ; $i ++ ; } while ( $i <= 10 );","title":"Do While"},{"location":"PHP/Aufgaben/Schleifen/#abbrechen-uberspringen","text":"Es gibt zwei M\u00f6glichkeiten, eine Schleife zu beenden: break beendet die Schleife continue \u00fcberspringt den aktuellen Durchlauf Dies kann behilflich sein, wenn Werte ausgelassen werden sollen oder die Schleife abgebrochen werden soll, wenn eine Bedingung erf\u00fcllt ist. \u00dcblicherweise wird return eher als break verwendet, da der Code schwer nachzufolgen ist. Ausgabe 0 bis 10, aber 5 wird \u00fcbersprungen <? for ( $i = 0 ; $i <= 10 ; $i ++ ) { if ( $i == 5 ) { continue ; } echo $i ; }","title":"Abbrechen &amp; \u00dcberspringen"},{"location":"PHP/Aufgaben/Vergleiche/","tags":["PHP","Aufgaben"],"text":"Vergleiche # H\u00e4ufig ist es notwendig, Werte miteinander zu vergleichen, um die Ausgabe oder den Ablauf zu ver\u00e4ndern. Da PHP lose Datentypen verwendet, ist es nicht immer einfach, die richtigen Vergleichsoperatoren zu finden. In diesem Kapitel werden die wichtigsten Vergleichsoperatoren vorgestellt. PHP kennt folgende Operatoren: Operator Name Erl\u00e4uterung $a == $b Gleich $a und $b haben den selben Wert unabh\u00e4ngig vom Typ (Typen werden konvertiert) $a === $b Identisch $a und $b haben den selben Typ und Inhalt $a != $b Ungleich $a und $b haben nicht den selben Wert unabh\u00e4ngig vom Typ $a !== $b Nicht Identisch $a und $b haben einen unterschiedlichen Typ oder unterschiedliche Werte $a < $b Kleiner $a muss kleiner als $b sein $a <= $b Kleiner Gleich $a muss kleiner oder gleich $b sein $a > $b Gr\u00f6sser $a muss gr\u00f6sser als $b sein $a >= $b Gr\u00f6sser Gleich $a muss gr\u00f6sser oder gleich $b sein Unterschied == und === # PHP hat schwache Typen, dass heisst es gibt zwei Arten von Vergleichen: == und === . == vergleicht nur den Wert, === vergleicht Wert und Typ. <? echo 1 == \"1\" ; // true echo 1 === \"1\" ; // false Logische Operatoren # Logische Operatoren werden verwendet, um mehrere Vergleiche zu verkn\u00fcpfen. Die wichtigsten Operatoren sind: Operator Name Erl\u00e4uterung and / && Und Wahr, wenn Links und Rechts wahr sind or / || Oder Wahr, wenn eine Seite wahr ist xor Entweder Order Wahr, wenn nur eine Seite wahr ist ! Nicht Invertiert wahr in falsch <=> Spaceship Gibt einen Int zur\u00fcck (Wie C# CompareTo () ) If - Statements # Die Vergleiche alleine bringen ohne eine \u00dcberpr\u00fcfung nicht sehr viel. Mit dem if k\u00f6nnen wir \u00fcberpr\u00fcfen, ob eine Bedingung erf\u00fcllt ist. Wenn die Bedingung erf\u00fcllt ist, wird der Codeblock ausgef\u00fchrt. Wenn die Bedingung nicht erf\u00fcllt ist, wird der Codeblock \u00fcbersprungen. Der Codeblock wird immer mit geschweiften Klammern {} umschlossen. Die Bedingung wird in runden Klammern () geschrieben. If Else Else If <? if ( 1 === 1 ) { echo \"1 ist 1\" ; } Mit else k\u00f6nnen wir einen Codeblock definieren, der ausgef\u00fchrt wird, wenn die Bedingung nicht erf\u00fcllt ist. <? if ( 1 === 1 ) { echo \"1 ist 1\" ; } else { echo \"1 ist nicht 1\" ; } Mit else if k\u00f6nnen wir weitere Bedingungen definieren, die \u00fcberpr\u00fcft werden, wenn die erste Bedingung nicht erf\u00fcllt ist. <? if ( 1 === \"1\" ) { echo \"1 ist 1\" ; } else if ( 1 == \"1\" ) { echo \"1 ist \\\" 1 \\\" (String)\" ; } else { echo \"1 ist nicht 1 und \\\" 1 \\\" (String)\" ; } Switch # Mit switch k\u00f6nnen wir eine Variable auf verschiedene Werte \u00fcberpr\u00fcfen. Dies kann n\u00fctzlich sein, wenn mehre \u00dcberpr\u00fcfungen nacheinander ausgef\u00fchrt werden sollen. Der Codeblock wird ausgef\u00fchrt, wenn der Wert der Variable mit dem Wert des case \u00fcbereinstimmt. Mit break k\u00f6nnen wir den Codeblock beenden. Ohne break wird der Codeblock bis zum Ende ausgef\u00fchrt. Mit default k\u00f6nnen wir einen Codeblock definieren, der ausgef\u00fchrt wird, wenn keine der Bedingungen erf\u00fcllt ist. <? $a = 1 ; switch ( $a ) { case 1 : echo \"a ist 1\" ; break ; case 2 : echo \"a ist 2\" ; break ; default : echo \"a ist nicht 1 oder 2\" ; break ; }","title":"Vergleiche"},{"location":"PHP/Aufgaben/Vergleiche/#vergleiche","text":"H\u00e4ufig ist es notwendig, Werte miteinander zu vergleichen, um die Ausgabe oder den Ablauf zu ver\u00e4ndern. Da PHP lose Datentypen verwendet, ist es nicht immer einfach, die richtigen Vergleichsoperatoren zu finden. In diesem Kapitel werden die wichtigsten Vergleichsoperatoren vorgestellt. PHP kennt folgende Operatoren: Operator Name Erl\u00e4uterung $a == $b Gleich $a und $b haben den selben Wert unabh\u00e4ngig vom Typ (Typen werden konvertiert) $a === $b Identisch $a und $b haben den selben Typ und Inhalt $a != $b Ungleich $a und $b haben nicht den selben Wert unabh\u00e4ngig vom Typ $a !== $b Nicht Identisch $a und $b haben einen unterschiedlichen Typ oder unterschiedliche Werte $a < $b Kleiner $a muss kleiner als $b sein $a <= $b Kleiner Gleich $a muss kleiner oder gleich $b sein $a > $b Gr\u00f6sser $a muss gr\u00f6sser als $b sein $a >= $b Gr\u00f6sser Gleich $a muss gr\u00f6sser oder gleich $b sein","title":"Vergleiche"},{"location":"PHP/Aufgaben/Vergleiche/#unterschied-und","text":"PHP hat schwache Typen, dass heisst es gibt zwei Arten von Vergleichen: == und === . == vergleicht nur den Wert, === vergleicht Wert und Typ. <? echo 1 == \"1\" ; // true echo 1 === \"1\" ; // false","title":"Unterschied == und ==="},{"location":"PHP/Aufgaben/Vergleiche/#logische-operatoren","text":"Logische Operatoren werden verwendet, um mehrere Vergleiche zu verkn\u00fcpfen. Die wichtigsten Operatoren sind: Operator Name Erl\u00e4uterung and / && Und Wahr, wenn Links und Rechts wahr sind or / || Oder Wahr, wenn eine Seite wahr ist xor Entweder Order Wahr, wenn nur eine Seite wahr ist ! Nicht Invertiert wahr in falsch <=> Spaceship Gibt einen Int zur\u00fcck (Wie C# CompareTo () )","title":"Logische Operatoren"},{"location":"PHP/Aufgaben/Vergleiche/#if-statements","text":"Die Vergleiche alleine bringen ohne eine \u00dcberpr\u00fcfung nicht sehr viel. Mit dem if k\u00f6nnen wir \u00fcberpr\u00fcfen, ob eine Bedingung erf\u00fcllt ist. Wenn die Bedingung erf\u00fcllt ist, wird der Codeblock ausgef\u00fchrt. Wenn die Bedingung nicht erf\u00fcllt ist, wird der Codeblock \u00fcbersprungen. Der Codeblock wird immer mit geschweiften Klammern {} umschlossen. Die Bedingung wird in runden Klammern () geschrieben. If Else Else If <? if ( 1 === 1 ) { echo \"1 ist 1\" ; } Mit else k\u00f6nnen wir einen Codeblock definieren, der ausgef\u00fchrt wird, wenn die Bedingung nicht erf\u00fcllt ist. <? if ( 1 === 1 ) { echo \"1 ist 1\" ; } else { echo \"1 ist nicht 1\" ; } Mit else if k\u00f6nnen wir weitere Bedingungen definieren, die \u00fcberpr\u00fcft werden, wenn die erste Bedingung nicht erf\u00fcllt ist. <? if ( 1 === \"1\" ) { echo \"1 ist 1\" ; } else if ( 1 == \"1\" ) { echo \"1 ist \\\" 1 \\\" (String)\" ; } else { echo \"1 ist nicht 1 und \\\" 1 \\\" (String)\" ; }","title":"If - Statements"},{"location":"PHP/Aufgaben/Vergleiche/#switch","text":"Mit switch k\u00f6nnen wir eine Variable auf verschiedene Werte \u00fcberpr\u00fcfen. Dies kann n\u00fctzlich sein, wenn mehre \u00dcberpr\u00fcfungen nacheinander ausgef\u00fchrt werden sollen. Der Codeblock wird ausgef\u00fchrt, wenn der Wert der Variable mit dem Wert des case \u00fcbereinstimmt. Mit break k\u00f6nnen wir den Codeblock beenden. Ohne break wird der Codeblock bis zum Ende ausgef\u00fchrt. Mit default k\u00f6nnen wir einen Codeblock definieren, der ausgef\u00fchrt wird, wenn keine der Bedingungen erf\u00fcllt ist. <? $a = 1 ; switch ( $a ) { case 1 : echo \"a ist 1\" ; break ; case 2 : echo \"a ist 2\" ; break ; default : echo \"a ist nicht 1 oder 2\" ; break ; }","title":"Switch"},{"location":"PHP/Framework/Aufbau/","tags":["PHP","Framework"],"text":"Framework # Dieses Framework arbeitet mit dem MVC-Pattern . Das bedeutet, dass es eine klare Trennung zwischen der Logik, der Darstellung und der Datenbank gibt. \u00dcber die URL wird gesteuert was f\u00fcr ein Controller und welche Methode davon ausgef\u00fchrt werden soll. In diesem Kapitel wird beschrieben wie der Aufbau ist, was f\u00fcr Komponenten vorhanden sind und wie sie hinzugef\u00fcgt werden k\u00f6nnen. Ordnerstruktur # Das Framework hat eine klare Ordnerstruktur, die sich wie folgt darstellt: Ordnerstruktur . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 controllers \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 views \u2502 \u2514\u2500\u2500 core \u2514\u2500\u2500 ... Der Ordner app enth\u00e4lt alle Dateien, die f\u00fcr das Framework relevant sind. In diesem Ordner befinden sich die Controller, Models und Views. Ausserdem befindet sich hier der core -Ordner, der die Grundfunktionen des Frameworks enth\u00e4lt. Die Controller, welche f\u00fcr die Annahme der Requests zust\u00e4ndig sind, befinden sich im Ordner controllers . Die Views ist das Aussehen der Seite und befindet sich im Ordner views . F\u00fcr die Datenbankanbindung und die Verarbeitung der Daten sind die Models zust\u00e4ndig und befinden sich im Ordner models . Das Klassendiagramm zeigt diese Hirarchie nochmals grafisch auf. URL-Aufbau # Die URL ist nach einem ganz bestimmten Schema aufgebaut, welche aus drei Teilen besteht. Die URL besteht aus dem Controller , der Methode und den Parametern . Wie der Ablauf einer Abfrage genau aussieht wird im Sequenziagramm dargestellt. Die URL sieht folgendermassen aus: URL-Aufbau http :// localhost : 8080 / controller / method / parameter Die URL wird durch den Router ( .htaccess ) als Parameter url an das index.php weitergeleitet: http :// localhost : 8080 / index . php ? url =/ controller / method / parameter Klassendiagramm # Das Framework hat ein Klassendiagramm, welches die wichtigsten Klassen und deren Beziehungen darstellt. Das Diagramm sieht wie folgt aus: Abl\u00e4ufe # Das folgende Sequenziagramm zeigt den Ablauf einer Anfrage . Die Anfrage wird \u00fcber die URL gesteuert. Die URL wird in drei Teile aufgeteilt. Der erste Teil ist der Controller, der zweite Teil ist die Methode und der dritte Teil sind die Parameter . Die Parameter werden in einem Array gespeichert und an die Methode \u00fcbergeben. Die Methode wird ausgef\u00fchrt und gibt die View zur\u00fcck. Die View wird dann gerendert und ausgegeben.","title":"Aufbau"},{"location":"PHP/Framework/Aufbau/#framework","text":"Dieses Framework arbeitet mit dem MVC-Pattern . Das bedeutet, dass es eine klare Trennung zwischen der Logik, der Darstellung und der Datenbank gibt. \u00dcber die URL wird gesteuert was f\u00fcr ein Controller und welche Methode davon ausgef\u00fchrt werden soll. In diesem Kapitel wird beschrieben wie der Aufbau ist, was f\u00fcr Komponenten vorhanden sind und wie sie hinzugef\u00fcgt werden k\u00f6nnen.","title":"Framework"},{"location":"PHP/Framework/Aufbau/#ordnerstruktur","text":"Das Framework hat eine klare Ordnerstruktur, die sich wie folgt darstellt: Ordnerstruktur . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 controllers \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 views \u2502 \u2514\u2500\u2500 core \u2514\u2500\u2500 ... Der Ordner app enth\u00e4lt alle Dateien, die f\u00fcr das Framework relevant sind. In diesem Ordner befinden sich die Controller, Models und Views. Ausserdem befindet sich hier der core -Ordner, der die Grundfunktionen des Frameworks enth\u00e4lt. Die Controller, welche f\u00fcr die Annahme der Requests zust\u00e4ndig sind, befinden sich im Ordner controllers . Die Views ist das Aussehen der Seite und befindet sich im Ordner views . F\u00fcr die Datenbankanbindung und die Verarbeitung der Daten sind die Models zust\u00e4ndig und befinden sich im Ordner models . Das Klassendiagramm zeigt diese Hirarchie nochmals grafisch auf.","title":"Ordnerstruktur"},{"location":"PHP/Framework/Aufbau/#url-aufbau","text":"Die URL ist nach einem ganz bestimmten Schema aufgebaut, welche aus drei Teilen besteht. Die URL besteht aus dem Controller , der Methode und den Parametern . Wie der Ablauf einer Abfrage genau aussieht wird im Sequenziagramm dargestellt. Die URL sieht folgendermassen aus: URL-Aufbau http :// localhost : 8080 / controller / method / parameter Die URL wird durch den Router ( .htaccess ) als Parameter url an das index.php weitergeleitet: http :// localhost : 8080 / index . php ? url =/ controller / method / parameter","title":"URL-Aufbau"},{"location":"PHP/Framework/Aufbau/#klassendiagramm","text":"Das Framework hat ein Klassendiagramm, welches die wichtigsten Klassen und deren Beziehungen darstellt. Das Diagramm sieht wie folgt aus:","title":"Klassendiagramm"},{"location":"PHP/Framework/Aufbau/#ablaufe","text":"Das folgende Sequenziagramm zeigt den Ablauf einer Anfrage . Die Anfrage wird \u00fcber die URL gesteuert. Die URL wird in drei Teile aufgeteilt. Der erste Teil ist der Controller, der zweite Teil ist die Methode und der dritte Teil sind die Parameter . Die Parameter werden in einem Array gespeichert und an die Methode \u00fcbergeben. Die Methode wird ausgef\u00fchrt und gibt die View zur\u00fcck. Die View wird dann gerendert und ausgegeben.","title":"Abl\u00e4ufe"},{"location":"PHP/Framework/Hinzuf%C3%BCgen/","tags":["PHP","Framework"],"text":"Hinzuf\u00fcgen einer Datei # Eine der wichtigsten T\u00e4tigkeiten ist das Hinzuf\u00fcgen von Dateien am richtigen Ort. Das ist nicht immer ganz einfach, da die Ordnerstruktur nicht immer ganz klar ist. Zudem sollte die Vererbung beachtet werden. Im Folgenden wird erkl\u00e4rt wie Dateien hinzugef\u00fcgt werden sollten und wie die Vererbung funktioniert. Controller # Die Controller werden in der Regel in der Ordnerstruktur app/Controller abgelegt. Die Datei sollte den Namen des Controllers haben, also z.B. app/Controller/CarCompany.php . Der Controller sollte die Klasse Controller erweitern. Die Datei sollte folgenden Inhalt haben: CarCompany Base Controller <?php class CarCompany extends Controller { public function index () { echo 'carCompany/index' ; } public function test () { // Model laden (1) $car = $this -> loadModel ( 'Car' ); // Werte initialisieren $car -> brand = 'BMW' ; $car -> model = 'M3' ; $car -> color = 'schwarz' ; $car -> description = 'This is a BMW M3' ; $car -> year = '2018' ; $car -> price = '100000' ; // View erstellen (2) $this -> loadView ( 'home/car-company' , [ 'car' => $car ]); } } Das Model wird aus dem Ordner app/models geladen und instanziiert. Aus dem Ordner app/views wird die Datei home/car-company.php geladen. Parameter, welche \u00fcbergeben werden sollten, k\u00f6nnen am Ende als assoziatives Array hinterlegt werden. <?php class Controller { protected function loadModel ( string $model ) { if ( file_exists ( '../app/models/' . $model . '.php' )) { require_once '../app/models/' . $model . '.php' ; return new $model (); } else { echo 'Error : Model does not exists!' ; } } protected function loadView ( string $view , $data = []) { if ( file_exists ( '../app/views/' . $view . '.php' )) { require_once '../app/views/' . $view . '.php' ; } else { echo 'Error : View does not exists!' ; } } } Model # Die Models sind Entit\u00e4ten , welche in der Datenbank gespeichert werden oder eine andere Businesslogik besitzen. Die Models werden unter app/Model abgelegt. Es w\u00e4re sinnvoll, wenn die Entit\u00e4t Getter/Setter besitzt, um die Zugriffe zu limitieren. <?php class Car { public string $brand ; public string $model ; public string $color ; public string $description ; public int $year ; public float $price ; } View # Die Views sind die Darstellung der Daten zust\u00e4ndig. Sie werden mit PHP geschrieben und nehmen aus einem assoziativen Array die Daten entgegen. So k\u00f6nnte jeder Controller die View benutzen. Die Views werden unter app/View gespeichert. Ausgabe Source Brand: BMW Model M3 Color schwarz Description This is a BMW M3 Year 2018 Price 100000 < table class = \"table table-hover\" > < thead > < tr > < th scope = \"row\" > Brand: </ th > < th > <?= $data['car']->brand ?> </ th > </ thead > < tbody class = \"table-group-divider\" > < tr > < th scope = \"row\" > Model </ th > < td > <?= $data['car']->model ?> </ td > </ tr > < tr > < th scope = \"row\" > Color </ th > < td > <?= $data['car']->color ?> </ td > </ tr > < tr > < th scope = \"row\" > Description </ th > < td > <?= $data['car']->description ?> </ td > </ tr > < tr > < th scope = \"row\" > Year </ th > < td > <?= $data['car']->year ?> </ td > </ tr > < tr > < th scope = \"row\" > Price </ th > < td > <?= $data['car']->price ?> </ td > </ tr > </ tbody > </ table >","title":"Hinzuf\u00fcgen"},{"location":"PHP/Framework/Hinzuf%C3%BCgen/#hinzufugen-einer-datei","text":"Eine der wichtigsten T\u00e4tigkeiten ist das Hinzuf\u00fcgen von Dateien am richtigen Ort. Das ist nicht immer ganz einfach, da die Ordnerstruktur nicht immer ganz klar ist. Zudem sollte die Vererbung beachtet werden. Im Folgenden wird erkl\u00e4rt wie Dateien hinzugef\u00fcgt werden sollten und wie die Vererbung funktioniert.","title":"Hinzuf\u00fcgen einer Datei"},{"location":"PHP/Framework/Hinzuf%C3%BCgen/#controller","text":"Die Controller werden in der Regel in der Ordnerstruktur app/Controller abgelegt. Die Datei sollte den Namen des Controllers haben, also z.B. app/Controller/CarCompany.php . Der Controller sollte die Klasse Controller erweitern. Die Datei sollte folgenden Inhalt haben: CarCompany Base Controller <?php class CarCompany extends Controller { public function index () { echo 'carCompany/index' ; } public function test () { // Model laden (1) $car = $this -> loadModel ( 'Car' ); // Werte initialisieren $car -> brand = 'BMW' ; $car -> model = 'M3' ; $car -> color = 'schwarz' ; $car -> description = 'This is a BMW M3' ; $car -> year = '2018' ; $car -> price = '100000' ; // View erstellen (2) $this -> loadView ( 'home/car-company' , [ 'car' => $car ]); } } Das Model wird aus dem Ordner app/models geladen und instanziiert. Aus dem Ordner app/views wird die Datei home/car-company.php geladen. Parameter, welche \u00fcbergeben werden sollten, k\u00f6nnen am Ende als assoziatives Array hinterlegt werden. <?php class Controller { protected function loadModel ( string $model ) { if ( file_exists ( '../app/models/' . $model . '.php' )) { require_once '../app/models/' . $model . '.php' ; return new $model (); } else { echo 'Error : Model does not exists!' ; } } protected function loadView ( string $view , $data = []) { if ( file_exists ( '../app/views/' . $view . '.php' )) { require_once '../app/views/' . $view . '.php' ; } else { echo 'Error : View does not exists!' ; } } }","title":"Controller"},{"location":"PHP/Framework/Hinzuf%C3%BCgen/#model","text":"Die Models sind Entit\u00e4ten , welche in der Datenbank gespeichert werden oder eine andere Businesslogik besitzen. Die Models werden unter app/Model abgelegt. Es w\u00e4re sinnvoll, wenn die Entit\u00e4t Getter/Setter besitzt, um die Zugriffe zu limitieren. <?php class Car { public string $brand ; public string $model ; public string $color ; public string $description ; public int $year ; public float $price ; }","title":"Model"},{"location":"PHP/Framework/Hinzuf%C3%BCgen/#view","text":"Die Views sind die Darstellung der Daten zust\u00e4ndig. Sie werden mit PHP geschrieben und nehmen aus einem assoziativen Array die Daten entgegen. So k\u00f6nnte jeder Controller die View benutzen. Die Views werden unter app/View gespeichert. Ausgabe Source Brand: BMW Model M3 Color schwarz Description This is a BMW M3 Year 2018 Price 100000 < table class = \"table table-hover\" > < thead > < tr > < th scope = \"row\" > Brand: </ th > < th > <?= $data['car']->brand ?> </ th > </ thead > < tbody class = \"table-group-divider\" > < tr > < th scope = \"row\" > Model </ th > < td > <?= $data['car']->model ?> </ td > </ tr > < tr > < th scope = \"row\" > Color </ th > < td > <?= $data['car']->color ?> </ td > </ tr > < tr > < th scope = \"row\" > Description </ th > < td > <?= $data['car']->description ?> </ td > </ tr > < tr > < th scope = \"row\" > Year </ th > < td > <?= $data['car']->year ?> </ td > </ tr > < tr > < th scope = \"row\" > Price </ th > < td > <?= $data['car']->price ?> </ td > </ tr > </ tbody > </ table >","title":"View"},{"location":"PHP/Framework/Validation/","tags":["PHP","Framework"],"text":"Validation # Die Validation von Formularen ist ein wichtiger Bestandteil eines jeden Frameworks. In diesem Kapitel wird die Validation von unserem eigenen Framework vorgestellt. Die Validation passiert f\u00fcr jedes Formular einzeln und wird \u00fcber HTTP-Methoden gesteuert. Controller # Im Controller wird \u00fcberpr\u00fcft ob das Formular angefragt wird oder validiert werden sollte. Wenn das Formular \u00fcber GET angefragt wird, wird die View geladen und ein leeres Formular zur\u00fcckgegeben. Wenn das Formular validiert werden soll, wird dies mit der HTTP-Methode POST gekennzeichnet. Die Validation passiert dann Serverseitig und die View wird erneut geladen. Wichtig ist, dass man alle Wertebereiche \u00fcberpr\u00fcft und mit Extremwerten testet. <?php public function validierungBeispiel () { // \u00dcberpr\u00fcfen ob das Formular angefragt wird oder validiert werden soll (1) if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // Formular in eine gesunde Form bringen (2) $username = trim ( htmlspecialchars ( $_POST [ 'username' ])); $comment = trim ( htmlspecialchars ( $_POST [ 'comment' ])); $email = trim ( filter_input ( INPUT_POST , 'email' , FILTER_SANITIZE_EMAIL )); // Daten in Formular setzen $data = [ 'username' => $username , // Form-Feld-Daten 'username_err' => '' , // Fehlermeldung das Feld 'comment' => $comment // Hat keine Validierung 'email' => $email , 'email_err' => '' , ]; // Validierung (3) if ( empty ( $data [ 'username' ])) { // Fehlermeldung setzen $data [ 'username_err' ] = 'Der Benutzername darf nicht leer sein' ; } if ( empty ( $data [ 'email' ])) { $data [ 'email_err' ] = 'Die E-Mail darf nicht leer sein' ; } else if ( ! filter_var ( $data [ 'email' ], FILTER_VALIDATE_EMAIL )) { // E-Mail Format \u00fcberpr\u00fcfen (4) $data [ 'email_err' ] = 'Die E-Mail hat ein ung\u00fcltiges Format' ; } // \u00dcberpr\u00fcfen, ob Fehlermeldungen vorhanden sind if ( empty ( $data [ 'username_err' ]) && empty ( $data [ 'email_err' ])) { // TODO: Hier m\u00fcsste jetzt etwas mit den validen Daten passieren } else { // Fehler vorhanden - Fehler anzeigen echo $this -> twig -> render ( 'seitenname.twig.html' , [ 'data' => $data ]); } } else { // Leeres Formular anzeigen $data = [ 'username' => '' , // Form-Feld-Daten 'username_err' => '' , // Keine Fehlermeldung anzeigen 'comment' => '' 'email' => '' , // 'email_err' => '' , ]; // Fomular anzeigen echo $this -> twig -> render ( 'seitenname.twig.html' , [ 'data' => $data ]); } } Wenn das Formular \u00fcber GET angefragt wird, wird die View geladen und ein leeres Formular zur\u00fcckgegeben. \u00dcber POST wird die Validation gestartet und danach die Daten verarbeitet. Mithilfe von htmlspecialchars und filter_input werden die Daten in eine gesunde Form gebracht. Dies ist wichtig, um XSS -Attacken zu verhindern. Um zu \u00fcberpr\u00fcfen, ob das Feld einen Wert hat kann empty verwendet werden. Wenn das Feld leer ist, wird eine Fehlermeldung gesetzt. Das richtige Format einer E-Mail kann mit filter_var \u00fcberpr\u00fcft werden. View # In der View wird \u00fcberpr\u00fcft, ob die Formulardaten g\u00fcltig sind, oder ob Fehler aufgetreten sind. Wenn Fehler aufgetreten sind, werden diese in der View ausgegeben. Das Feld wird dann rot umrandet und die Fehlermeldung wird angezeigt. Bestehende Daten sind auch nach dem Absenden des Formulars noch vorhanden, auch wenn Fehler aufgetreten sind. Dies ist leider nicht bei allen Formularen im Internet der Fall. <div class=\"form-group\"> <label for=\"username\">Kundenname: <sup>*</sup></label> {% if data.username_err is empty %} <input type=\"text\" name=\"username\" value=\" {{ data.username }} \" class=\"form-control form-control-lg\"> {% else %} <input type=\"text\" name=\"username\" value=\" {{ data.username }} \" class=\"form-control form-control-lg is-invalid\"> <span class=\"invalid-feedback\"> {{ data.username_err }} </span> {% endif %} </div>","title":"Validation"},{"location":"PHP/Framework/Validation/#validation","text":"Die Validation von Formularen ist ein wichtiger Bestandteil eines jeden Frameworks. In diesem Kapitel wird die Validation von unserem eigenen Framework vorgestellt. Die Validation passiert f\u00fcr jedes Formular einzeln und wird \u00fcber HTTP-Methoden gesteuert.","title":"Validation"},{"location":"PHP/Framework/Validation/#controller","text":"Im Controller wird \u00fcberpr\u00fcft ob das Formular angefragt wird oder validiert werden sollte. Wenn das Formular \u00fcber GET angefragt wird, wird die View geladen und ein leeres Formular zur\u00fcckgegeben. Wenn das Formular validiert werden soll, wird dies mit der HTTP-Methode POST gekennzeichnet. Die Validation passiert dann Serverseitig und die View wird erneut geladen. Wichtig ist, dass man alle Wertebereiche \u00fcberpr\u00fcft und mit Extremwerten testet. <?php public function validierungBeispiel () { // \u00dcberpr\u00fcfen ob das Formular angefragt wird oder validiert werden soll (1) if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // Formular in eine gesunde Form bringen (2) $username = trim ( htmlspecialchars ( $_POST [ 'username' ])); $comment = trim ( htmlspecialchars ( $_POST [ 'comment' ])); $email = trim ( filter_input ( INPUT_POST , 'email' , FILTER_SANITIZE_EMAIL )); // Daten in Formular setzen $data = [ 'username' => $username , // Form-Feld-Daten 'username_err' => '' , // Fehlermeldung das Feld 'comment' => $comment // Hat keine Validierung 'email' => $email , 'email_err' => '' , ]; // Validierung (3) if ( empty ( $data [ 'username' ])) { // Fehlermeldung setzen $data [ 'username_err' ] = 'Der Benutzername darf nicht leer sein' ; } if ( empty ( $data [ 'email' ])) { $data [ 'email_err' ] = 'Die E-Mail darf nicht leer sein' ; } else if ( ! filter_var ( $data [ 'email' ], FILTER_VALIDATE_EMAIL )) { // E-Mail Format \u00fcberpr\u00fcfen (4) $data [ 'email_err' ] = 'Die E-Mail hat ein ung\u00fcltiges Format' ; } // \u00dcberpr\u00fcfen, ob Fehlermeldungen vorhanden sind if ( empty ( $data [ 'username_err' ]) && empty ( $data [ 'email_err' ])) { // TODO: Hier m\u00fcsste jetzt etwas mit den validen Daten passieren } else { // Fehler vorhanden - Fehler anzeigen echo $this -> twig -> render ( 'seitenname.twig.html' , [ 'data' => $data ]); } } else { // Leeres Formular anzeigen $data = [ 'username' => '' , // Form-Feld-Daten 'username_err' => '' , // Keine Fehlermeldung anzeigen 'comment' => '' 'email' => '' , // 'email_err' => '' , ]; // Fomular anzeigen echo $this -> twig -> render ( 'seitenname.twig.html' , [ 'data' => $data ]); } } Wenn das Formular \u00fcber GET angefragt wird, wird die View geladen und ein leeres Formular zur\u00fcckgegeben. \u00dcber POST wird die Validation gestartet und danach die Daten verarbeitet. Mithilfe von htmlspecialchars und filter_input werden die Daten in eine gesunde Form gebracht. Dies ist wichtig, um XSS -Attacken zu verhindern. Um zu \u00fcberpr\u00fcfen, ob das Feld einen Wert hat kann empty verwendet werden. Wenn das Feld leer ist, wird eine Fehlermeldung gesetzt. Das richtige Format einer E-Mail kann mit filter_var \u00fcberpr\u00fcft werden.","title":"Controller"},{"location":"PHP/Framework/Validation/#view","text":"In der View wird \u00fcberpr\u00fcft, ob die Formulardaten g\u00fcltig sind, oder ob Fehler aufgetreten sind. Wenn Fehler aufgetreten sind, werden diese in der View ausgegeben. Das Feld wird dann rot umrandet und die Fehlermeldung wird angezeigt. Bestehende Daten sind auch nach dem Absenden des Formulars noch vorhanden, auch wenn Fehler aufgetreten sind. Dies ist leider nicht bei allen Formularen im Internet der Fall. <div class=\"form-group\"> <label for=\"username\">Kundenname: <sup>*</sup></label> {% if data.username_err is empty %} <input type=\"text\" name=\"username\" value=\" {{ data.username }} \" class=\"form-control form-control-lg\"> {% else %} <input type=\"text\" name=\"username\" value=\" {{ data.username }} \" class=\"form-control form-control-lg is-invalid\"> <span class=\"invalid-feedback\"> {{ data.username_err }} </span> {% endif %} </div>","title":"View"},{"location":"PHP/SessionCookie/Anwendung/","tags":["PHP","Sessions & Cookies","Beispiele"],"text":"Anwendung # In diesem Abschnitt wird beschrieben wir Cookies und Sessions in einer Anwendung verwendet werden k\u00f6nnen. Dazu wird ein kleines Beispielprogramm erstellt, welches die Anzahl einzigartiger Besucher einer Webseite z\u00e4hlt. Dies ist sozusagen das Hello World des Session-Handlings und der Web analytics. Das Endresultat kann live getestet werden. Der vollst\u00e4ndige Quellcode ist wie immer auf GitHub zu finden. Aufbau # Das Programm besteht aus einer PHP-Datei, welche die Anzahl der Besucher z\u00e4hlt und in einer JSON-Datei speichert. Die JSON-Datei wird automatisch erstellt, wenn sie noch nicht existiert. Die Anzahl wird in der Datei gespeichert und bei jedem Aufruf der Seite, wenn die Session oder das Cookie noch nicht existiert, um eins erh\u00f6ht. Dateistruktur \u251c\u2500\u2500\u2500docker-compose.yml \u2514\u2500\u2500\u2500app \u251c\u2500\u2500\u2500data.json \u2514\u2500\u2500\u2500index.php Im JSON wird die Uhrzeit und die Anzahl der einzigartigen Benutzer angezeigt. Die Uhrzeit wird auf 10 Minuten gerundet, damit die Anzahl der Besucher nicht zu oft aktualisiert wird. Zudem k\u00f6nnen so besser Auswertungen gemacht werden. { \"2022-12-07 21:00:00\" : 2 , \"2022-12-07 21:10:00\" : 1 , \"2022-12-07 21:20:00\" : 8 } Programm # In der PHP-Datei wird zuerst eine Session gestartet, da dies vor allen anderen Ausgaben gemacht werden muss. Danach wird \u00fcberpr\u00fcft, ob die Session und das Cookie gesetzt sind. Wenn dies nicht der Fall ist, wird die Session gesetzt und das Cookie gespeichert. Das Cookie ist daf\u00fcr zust\u00e4ndig, dass auch bei einer neuen Session der Benutzer wiedererkannt wird. Das Cookie wird f\u00fcr eine einzige Woche gespeichert. Danach wird die aktuelle Zeit geholt und auf 10 Minuten gerundet. Als n\u00e4chstes wird die JSON-Datei gelesen und in ein assoziatives Array umgewandelt. Wenn die aktuelle Zeit bereits in der JSON-Datei ist, wird die Anzahl der Besucher um eins erh\u00f6ht. Wenn dies nicht der Fall ist, wird die aktuelle Zeit mit der Anzahl 1 in das Array geschrieben. Danach wird das Array wieder in eine JSON-Datei umgewandelt und gespeichert. <?php // Start the session (1) session_start (); // Check if hasVisited is set in session and cookie if ( ! isset ( $_SESSION [ 'hasVisited' ]) && ! isset ( $_COOKIE [ 'hasVisited' ])) { // Set hasVisited to true $_SESSION [ 'hasVisited' ] = true ; // Save in cookie (2) setcookie ( 'hasVisited' , true , time () + 60 * 60 * 24 * 7 ); // Get the current date and round it to 10 minutes $time = round ( time () / 600 ) * 600 ; // Convert the time to a date (3) $time = date ( 'Y-m-d H:i:s' , $time ); // Check if the json file exists if ( ! file_exists ( 'data.json' )) { // Create the json file file_put_contents ( 'data.json' , '{}' ); } // Get the json $json = file_get_contents ( 'data.json' ); // Decode the json $data = json_decode ( $json , true ); // Check if the time is already in the json (4) if ( isset ( $data [ $time ])) { // Add 1 to the time $data [ $time ] ++ ; } else { // Set the time to 1 $data [ $time ] = 1 ; } // Encode the json $json = json_encode ( $data ); // Save the json file_put_contents ( 'data.json' , $json ); } ?> Muss am Anfang der PHP-Datei gemacht werden, damit die Session gestartet wird. Auch wenn die Session beendet wird sollte der Benutzer wiedererkannt werden. Deshalb wird das Cookie gespeichert. Dieses Format ist wichtig, damit JavaScript das Datum richtig lesen kann. F\u00fcgt die Anzahl der Besucher um eins hinzu, wenn die Zeit bereits in der JSON-Datei ist. Wenn dies nicht der Fall ist, wird die Zeit mit der Anzahl 1 in das Array geschrieben. Ausgabe # Solche sch\u00f6nen Daten sollten auch entsprechend angezeigt werden. Aus diesem Grund wird das JSON mithilfe von JavaScript ausgelesen und in ein Diagramm umgewandelt. Daf\u00fcr wird CanvasJS verwendet, was eine sehr einfache und schnelle M\u00f6glichkeit bietet, Diagramme zu erstellen. F\u00fcr die Erstellung m\u00fcssen nur die X- und Y-Achse angegeben werden. Die Daten werden automatisch ausgelesen und in das Diagramm eingef\u00fcgt. Dieser Schritt ist optional und dient nur zur Sch\u00f6nheit","title":"Anwendung"},{"location":"PHP/SessionCookie/Anwendung/#anwendung","text":"In diesem Abschnitt wird beschrieben wir Cookies und Sessions in einer Anwendung verwendet werden k\u00f6nnen. Dazu wird ein kleines Beispielprogramm erstellt, welches die Anzahl einzigartiger Besucher einer Webseite z\u00e4hlt. Dies ist sozusagen das Hello World des Session-Handlings und der Web analytics. Das Endresultat kann live getestet werden. Der vollst\u00e4ndige Quellcode ist wie immer auf GitHub zu finden.","title":"Anwendung"},{"location":"PHP/SessionCookie/Anwendung/#aufbau","text":"Das Programm besteht aus einer PHP-Datei, welche die Anzahl der Besucher z\u00e4hlt und in einer JSON-Datei speichert. Die JSON-Datei wird automatisch erstellt, wenn sie noch nicht existiert. Die Anzahl wird in der Datei gespeichert und bei jedem Aufruf der Seite, wenn die Session oder das Cookie noch nicht existiert, um eins erh\u00f6ht. Dateistruktur \u251c\u2500\u2500\u2500docker-compose.yml \u2514\u2500\u2500\u2500app \u251c\u2500\u2500\u2500data.json \u2514\u2500\u2500\u2500index.php Im JSON wird die Uhrzeit und die Anzahl der einzigartigen Benutzer angezeigt. Die Uhrzeit wird auf 10 Minuten gerundet, damit die Anzahl der Besucher nicht zu oft aktualisiert wird. Zudem k\u00f6nnen so besser Auswertungen gemacht werden. { \"2022-12-07 21:00:00\" : 2 , \"2022-12-07 21:10:00\" : 1 , \"2022-12-07 21:20:00\" : 8 }","title":"Aufbau"},{"location":"PHP/SessionCookie/Anwendung/#programm","text":"In der PHP-Datei wird zuerst eine Session gestartet, da dies vor allen anderen Ausgaben gemacht werden muss. Danach wird \u00fcberpr\u00fcft, ob die Session und das Cookie gesetzt sind. Wenn dies nicht der Fall ist, wird die Session gesetzt und das Cookie gespeichert. Das Cookie ist daf\u00fcr zust\u00e4ndig, dass auch bei einer neuen Session der Benutzer wiedererkannt wird. Das Cookie wird f\u00fcr eine einzige Woche gespeichert. Danach wird die aktuelle Zeit geholt und auf 10 Minuten gerundet. Als n\u00e4chstes wird die JSON-Datei gelesen und in ein assoziatives Array umgewandelt. Wenn die aktuelle Zeit bereits in der JSON-Datei ist, wird die Anzahl der Besucher um eins erh\u00f6ht. Wenn dies nicht der Fall ist, wird die aktuelle Zeit mit der Anzahl 1 in das Array geschrieben. Danach wird das Array wieder in eine JSON-Datei umgewandelt und gespeichert. <?php // Start the session (1) session_start (); // Check if hasVisited is set in session and cookie if ( ! isset ( $_SESSION [ 'hasVisited' ]) && ! isset ( $_COOKIE [ 'hasVisited' ])) { // Set hasVisited to true $_SESSION [ 'hasVisited' ] = true ; // Save in cookie (2) setcookie ( 'hasVisited' , true , time () + 60 * 60 * 24 * 7 ); // Get the current date and round it to 10 minutes $time = round ( time () / 600 ) * 600 ; // Convert the time to a date (3) $time = date ( 'Y-m-d H:i:s' , $time ); // Check if the json file exists if ( ! file_exists ( 'data.json' )) { // Create the json file file_put_contents ( 'data.json' , '{}' ); } // Get the json $json = file_get_contents ( 'data.json' ); // Decode the json $data = json_decode ( $json , true ); // Check if the time is already in the json (4) if ( isset ( $data [ $time ])) { // Add 1 to the time $data [ $time ] ++ ; } else { // Set the time to 1 $data [ $time ] = 1 ; } // Encode the json $json = json_encode ( $data ); // Save the json file_put_contents ( 'data.json' , $json ); } ?> Muss am Anfang der PHP-Datei gemacht werden, damit die Session gestartet wird. Auch wenn die Session beendet wird sollte der Benutzer wiedererkannt werden. Deshalb wird das Cookie gespeichert. Dieses Format ist wichtig, damit JavaScript das Datum richtig lesen kann. F\u00fcgt die Anzahl der Besucher um eins hinzu, wenn die Zeit bereits in der JSON-Datei ist. Wenn dies nicht der Fall ist, wird die Zeit mit der Anzahl 1 in das Array geschrieben.","title":"Programm"},{"location":"PHP/SessionCookie/Anwendung/#ausgabe","text":"Solche sch\u00f6nen Daten sollten auch entsprechend angezeigt werden. Aus diesem Grund wird das JSON mithilfe von JavaScript ausgelesen und in ein Diagramm umgewandelt. Daf\u00fcr wird CanvasJS verwendet, was eine sehr einfache und schnelle M\u00f6glichkeit bietet, Diagramme zu erstellen. F\u00fcr die Erstellung m\u00fcssen nur die X- und Y-Achse angegeben werden. Die Daten werden automatisch ausgelesen und in das Diagramm eingef\u00fcgt. Dieser Schritt ist optional und dient nur zur Sch\u00f6nheit","title":"Ausgabe"},{"location":"PHP/SessionCookie/Cookies/","tags":["PHP","Sessions & Cookies"],"text":"Cookies # Ein Cookie ist eine kleine Textdatei, die vom Webserver lokal im Browser des Clients gespeichert wird. Cookies haben ein Ablaufdatum , wor\u00fcber die G\u00fcltigkeit des Cookies bestimmt wird. Cookies k\u00f6nnen auch gel\u00f6scht werden, wenn der Benutzer dies m\u00f6chte. Zudem ist es m\u00f6glich, dass sie \u00fcber Domains hinweg ( CORS ) weitergegeben werden. Sinn und Zweck von Cookies # Im Allgemeinen werden Cookies verwendet, um Benutzerinformationen zu speichern, wie z.B. die bevorzugte Sprache, die Produkte, die im Warenkorb liegen, oder die Session ID , wenn der Benutzer eine Website besucht. Sie k\u00f6nnen auch verwendet werden, um die Besuche auf einer Website zu z\u00e4hlen, um die Benutzerfreundlichkeit zu verbessern. Sehr oft werden sie auch f\u00fcr die Anmeldung auf einer Website verwendet, damit sich der Benutzer nicht jedes Mal neu anmelden muss. Der Vorteil von Cookies besteht darin, dass die Informationen auf dem Computer des Benutzers gespeichert werden. Wenn die Session durch das Schliessen des Browsers beendet wird, dann bleiben die Cookies bestehen . So k\u00f6nnen Daten \u00fcber mehrere Seitenaufrufe hinweg gespeichert werden. Dies ist besonders n\u00fctzlich, wenn der Benutzer eine Website besucht, die mehrere Seiten hat, wie z.B. ein Online-Shop. Unterschied zwischen Sessions und Cookies # Sessions und Cookies sind nicht dasselbe . Sessions werden verwendet, um Benutzerinformationen auf dem Server zu speichern, w\u00e4hrend eine Website besucht wird. Cookies werden verwendet, um Benutzerinformationen lokal beim Benutzer zu speichern, welche \u00fcber Sessions hinaus verwendet werden k\u00f6nnen. Zudem haben Cookies eine Lebensdauer , w\u00e4hrend Sessions nur bis zum Schliessen des Browsers bestehen. Da die Cookies im Browser gespeichert werden k\u00f6nnen diese manipuliert und eingesehen werden. Dies ist ein Sicherheitsrisiko , welches durch die Verwendung von Sessions vermieden werden kann. Aus diesem Grund d\u00fcrfen sensible Informationen wie Passw\u00f6rter nicht in Cookies gespeichert werden. Aus diesem Grund sollte man Cookies nicht trauen und diese mit Vorsicht behandeln. Gleich wie die Session haben Cookies eine eindeutige ID , welche verwendet wird, um die Informationen zu identifizieren. Die ID wird in einem Cookie gespeichert, welches auf dem Computer des Benutzers gespeichert wird. Wenn der Benutzer eine Seite aufruft, dann wird die ID aus dem Cookie ausgelesen und verwendet, um die Informationen zu identifizieren . Wie funktionieren Cookies? # Nachdem eine Anfrage an den Server gesendet wurde, kann der Server eine Antwort mit einem Cookie \u00fcber den Header Set-Cookie senden. Dieses Cookie wird vom Browser gespeichert und bei jeder weiteren Anfrage an den Server gesendet. Der Server kann dann die Informationen aus dem Cookie auslesen und verwenden. Die Informationen k\u00f6nnen auch ge\u00e4ndert werden, indem ein neues Cookie mit dem gleichen Namen gesendet wird. Dieses Cookie \u00fcberschreibt das alte Cookie. Wenn das Cookie ein Ablaufdatum hat, dann wird es nach Ablauf des Datums gel\u00f6scht. Wenn das Cookie gel\u00f6scht werden soll, dann kann dies durch das Setzen eines Cookies mit dem gleichen Namen und einem Ablaufdatum in der Vergangenheit erreicht werden. Die Cookies werden nicht vom Server gel\u00f6scht, wenn der Benutzer die Website verl\u00e4sst. Sie bleiben bestehen , bis sie vom Benutzer gel\u00f6scht werden oder das Ablaufdatum erreicht wird. Je nach Browser werden Cookies unterschiedlich gespeichert und verwaltet. Die meisten Browser speichern Cookies in einem eigenen Verzeichnis oder einer SQLite-Datenbank . Sie werden jedoch immer in einem Key-Value-Format gespeichert. Der Key ist der Name des Cookies und der Value ist der Wert des Cookies. Die meisten Browser erlauben es, Cookies zu l\u00f6schen und zu verwalten . Die meisten Browser erlauben es auch, Cookies zu blockieren . Wenn Cookies blockiert werden, dann werden sie nicht gespeichert und k\u00f6nnen auch nicht verwendet werden. Dies kann zu Problemen f\u00fchren, wenn die Website auf Cookies angewiesen ist. Wie kann ich Cookies setzen? # Um ein Cookie zu setzen, muss der Server eine Antwort mit dem Header Set-Cookie senden. Dieser Header enth\u00e4lt den Namen und den Wert des Cookies. Es k\u00f6nnen auch weitere Attribute gesetzt werden, um das Cookie zu verwalten . Die Attribute werden durch ein Semikolon getrennt. Set-Cookie: <cookie-name>=<cookie-value> In PHP kann dies mit der Funktion setcookie() erreicht werden. Diese Funktion muss vor dem Senden der Antwort aufgerufen werden. Wenn die Funktion nicht aufgerufen wird, dann wird das Cookie nicht gesetzt. Cookie bis zum Ende der Session <?php setcookie ( \"cookie-name\" , \"cookie-value\" , 0 ); Cookie mit Ablaufdatum <?php setcookie ( \"cookie-name\" , \"cookie-value\" , time () + ( 3600 * 24 )); //(1)! Dieser Cookie w\u00fcrde jetzt 3600 * 24 Sekunden halten und das entspricht 24 Stunden . Wie kann ich Cookies auslesen? # Um die Informationen aus einem Cookie auszulesen , muss der Server die Anfrage auswerten und den Header Cookie auslesen. In PHP kann dies mit der globalen Variable $_COOKIE erreicht werden. Cookie auslesen <?php $cookieValue = $_COOKIE [ \"cookie-name\" ]; Bei dem Auslesen von Cookies ist ausserdem noch zu beachten das sie nur in dem Verzeichnis wo ein Cookie gesetzt wurde, der Cookie auch ausgelesen werden kann. In einem anderen Verzeichnis ist er nicht auslesbar . Wie kann ich Cookies l\u00f6schen? # Um ein Cookie zu l\u00f6schen , muss der Server eine Antwort mit dem Header Set-Cookie senden. Dieser Header enth\u00e4lt den Namen des Cookies und ein Ablaufdatum in der Vergangenheit . Durch den selben Namen wird der bestehende Cookie \u00fcberschrieben und gel\u00f6scht. <?php setcookie ( \"cookie-name\" , \"\" , time () - 3600 );","title":"Cookies"},{"location":"PHP/SessionCookie/Cookies/#cookies","text":"Ein Cookie ist eine kleine Textdatei, die vom Webserver lokal im Browser des Clients gespeichert wird. Cookies haben ein Ablaufdatum , wor\u00fcber die G\u00fcltigkeit des Cookies bestimmt wird. Cookies k\u00f6nnen auch gel\u00f6scht werden, wenn der Benutzer dies m\u00f6chte. Zudem ist es m\u00f6glich, dass sie \u00fcber Domains hinweg ( CORS ) weitergegeben werden.","title":"Cookies"},{"location":"PHP/SessionCookie/Cookies/#sinn-und-zweck-von-cookies","text":"Im Allgemeinen werden Cookies verwendet, um Benutzerinformationen zu speichern, wie z.B. die bevorzugte Sprache, die Produkte, die im Warenkorb liegen, oder die Session ID , wenn der Benutzer eine Website besucht. Sie k\u00f6nnen auch verwendet werden, um die Besuche auf einer Website zu z\u00e4hlen, um die Benutzerfreundlichkeit zu verbessern. Sehr oft werden sie auch f\u00fcr die Anmeldung auf einer Website verwendet, damit sich der Benutzer nicht jedes Mal neu anmelden muss. Der Vorteil von Cookies besteht darin, dass die Informationen auf dem Computer des Benutzers gespeichert werden. Wenn die Session durch das Schliessen des Browsers beendet wird, dann bleiben die Cookies bestehen . So k\u00f6nnen Daten \u00fcber mehrere Seitenaufrufe hinweg gespeichert werden. Dies ist besonders n\u00fctzlich, wenn der Benutzer eine Website besucht, die mehrere Seiten hat, wie z.B. ein Online-Shop.","title":"Sinn und Zweck von Cookies"},{"location":"PHP/SessionCookie/Cookies/#unterschied-zwischen-sessions-und-cookies","text":"Sessions und Cookies sind nicht dasselbe . Sessions werden verwendet, um Benutzerinformationen auf dem Server zu speichern, w\u00e4hrend eine Website besucht wird. Cookies werden verwendet, um Benutzerinformationen lokal beim Benutzer zu speichern, welche \u00fcber Sessions hinaus verwendet werden k\u00f6nnen. Zudem haben Cookies eine Lebensdauer , w\u00e4hrend Sessions nur bis zum Schliessen des Browsers bestehen. Da die Cookies im Browser gespeichert werden k\u00f6nnen diese manipuliert und eingesehen werden. Dies ist ein Sicherheitsrisiko , welches durch die Verwendung von Sessions vermieden werden kann. Aus diesem Grund d\u00fcrfen sensible Informationen wie Passw\u00f6rter nicht in Cookies gespeichert werden. Aus diesem Grund sollte man Cookies nicht trauen und diese mit Vorsicht behandeln. Gleich wie die Session haben Cookies eine eindeutige ID , welche verwendet wird, um die Informationen zu identifizieren. Die ID wird in einem Cookie gespeichert, welches auf dem Computer des Benutzers gespeichert wird. Wenn der Benutzer eine Seite aufruft, dann wird die ID aus dem Cookie ausgelesen und verwendet, um die Informationen zu identifizieren .","title":"Unterschied zwischen Sessions und Cookies"},{"location":"PHP/SessionCookie/Cookies/#wie-funktionieren-cookies","text":"Nachdem eine Anfrage an den Server gesendet wurde, kann der Server eine Antwort mit einem Cookie \u00fcber den Header Set-Cookie senden. Dieses Cookie wird vom Browser gespeichert und bei jeder weiteren Anfrage an den Server gesendet. Der Server kann dann die Informationen aus dem Cookie auslesen und verwenden. Die Informationen k\u00f6nnen auch ge\u00e4ndert werden, indem ein neues Cookie mit dem gleichen Namen gesendet wird. Dieses Cookie \u00fcberschreibt das alte Cookie. Wenn das Cookie ein Ablaufdatum hat, dann wird es nach Ablauf des Datums gel\u00f6scht. Wenn das Cookie gel\u00f6scht werden soll, dann kann dies durch das Setzen eines Cookies mit dem gleichen Namen und einem Ablaufdatum in der Vergangenheit erreicht werden. Die Cookies werden nicht vom Server gel\u00f6scht, wenn der Benutzer die Website verl\u00e4sst. Sie bleiben bestehen , bis sie vom Benutzer gel\u00f6scht werden oder das Ablaufdatum erreicht wird. Je nach Browser werden Cookies unterschiedlich gespeichert und verwaltet. Die meisten Browser speichern Cookies in einem eigenen Verzeichnis oder einer SQLite-Datenbank . Sie werden jedoch immer in einem Key-Value-Format gespeichert. Der Key ist der Name des Cookies und der Value ist der Wert des Cookies. Die meisten Browser erlauben es, Cookies zu l\u00f6schen und zu verwalten . Die meisten Browser erlauben es auch, Cookies zu blockieren . Wenn Cookies blockiert werden, dann werden sie nicht gespeichert und k\u00f6nnen auch nicht verwendet werden. Dies kann zu Problemen f\u00fchren, wenn die Website auf Cookies angewiesen ist.","title":"Wie funktionieren Cookies?"},{"location":"PHP/SessionCookie/Cookies/#wie-kann-ich-cookies-setzen","text":"Um ein Cookie zu setzen, muss der Server eine Antwort mit dem Header Set-Cookie senden. Dieser Header enth\u00e4lt den Namen und den Wert des Cookies. Es k\u00f6nnen auch weitere Attribute gesetzt werden, um das Cookie zu verwalten . Die Attribute werden durch ein Semikolon getrennt. Set-Cookie: <cookie-name>=<cookie-value> In PHP kann dies mit der Funktion setcookie() erreicht werden. Diese Funktion muss vor dem Senden der Antwort aufgerufen werden. Wenn die Funktion nicht aufgerufen wird, dann wird das Cookie nicht gesetzt. Cookie bis zum Ende der Session <?php setcookie ( \"cookie-name\" , \"cookie-value\" , 0 ); Cookie mit Ablaufdatum <?php setcookie ( \"cookie-name\" , \"cookie-value\" , time () + ( 3600 * 24 )); //(1)! Dieser Cookie w\u00fcrde jetzt 3600 * 24 Sekunden halten und das entspricht 24 Stunden .","title":"Wie kann ich Cookies setzen?"},{"location":"PHP/SessionCookie/Cookies/#wie-kann-ich-cookies-auslesen","text":"Um die Informationen aus einem Cookie auszulesen , muss der Server die Anfrage auswerten und den Header Cookie auslesen. In PHP kann dies mit der globalen Variable $_COOKIE erreicht werden. Cookie auslesen <?php $cookieValue = $_COOKIE [ \"cookie-name\" ]; Bei dem Auslesen von Cookies ist ausserdem noch zu beachten das sie nur in dem Verzeichnis wo ein Cookie gesetzt wurde, der Cookie auch ausgelesen werden kann. In einem anderen Verzeichnis ist er nicht auslesbar .","title":"Wie kann ich Cookies auslesen?"},{"location":"PHP/SessionCookie/Cookies/#wie-kann-ich-cookies-loschen","text":"Um ein Cookie zu l\u00f6schen , muss der Server eine Antwort mit dem Header Set-Cookie senden. Dieser Header enth\u00e4lt den Namen des Cookies und ein Ablaufdatum in der Vergangenheit . Durch den selben Namen wird der bestehende Cookie \u00fcberschrieben und gel\u00f6scht. <?php setcookie ( \"cookie-name\" , \"\" , time () - 3600 );","title":"Wie kann ich Cookies l\u00f6schen?"},{"location":"PHP/SessionCookie/Sessions/","tags":["PHP","Sessions & Cookies"],"text":"Sessions # Eine Session ist eine tempor\u00e4re Verbindung zwischen einem Client und einem Server. Sie wird verwendet, um Informationen \u00fcber mehrere Seiten hinweg zu speichern. Eine Session wird durch einen Session-ID und einen Session-Wert definiert. Der Session-ID ist eine eindeutige ID , der verwendet wird, um auf die Session zuzugreifen. Der Session-Wert ist der Wert, der mit dem Session-IDs verkn\u00fcpft ist. Der Session-Wert kann ein beliebiger Datentyp sein, einschliesslich eines Arrays oder eines Objekts. Sinn und Zweck von Sessions # Das Ziel einer Session ist es, dass Daten \u00fcber Abfragen hinweg gespeichert werden k\u00f6nnen. Dies ist insbesondere dann n\u00fctzlich, wenn eine Anwendung mehrere Seiten hat, die aufeinander aufbauen. Das HTTP-Protokoll ist stateless , d.h. es speichert keine Informationen \u00fcber den Client. Wenn ein Client eine Anfrage an den Server sendet, wird die Anfrage bearbeitet und die Antwort gesendet. Die Antwort enth\u00e4lt keine Informationen \u00fcber den Client. Somit sind alle Anfragen unabh\u00e4ngig voneinander. Eine Session erm\u00f6glicht es, Informationen \u00fcber mehrere Anfragen hinweg zu speichern. Wie funktionieren Sessions? # Jeder Benutzer hat eine eigene Session . Wenn ein Benutzer eine Website besucht, wird eine Session-ID generiert und k\u00f6nnte wie folgt aussehen 82081052a03b87a0055d59d776bb5fd3 . Wer das Muster erkennt weiss, dass dies in PHP ein md5-Hash ist. Mithilfe von session_id() kann die Session-ID ausgelesen werden. Die Session-ID wird in einem Session Cookie gespeichert, das auf dem Client gespeichert wird. Wenn der Benutzer die Website erneut besucht, wird die Session-ID aus dem Cookie ausgelesen und an den Server gesendet. Der Server kann dann die Session-ID mit den gespeicherten Session-Daten abgleichen. Wenn die Session-ID mit den gespeicherten Daten \u00fcbereinstimmt, wird die Session wiederhergestellt . Da die Session auf dem Server gespeichert und verwaltet wird, kann sie vom Client nicht manipuliert werden. So k\u00f6nnen Werte, welche der Benutzer nicht sehen sollte versteckt werden. Die Session-ID ist eindeutig und kann nicht von einem anderen Benutzer verwendet werden. So kann sichergestellt werden, dass nur der Benutzer auf die Session zugreifen kann, der sie erstellt hat. Durch das stehlen der Session-ID k\u00f6nnte Session-Hijacking m\u00f6glich sein. Cluster von Webservern # Standardm\u00e4ssig werden Sessions auf dem Server gespeichert, auf dem sie erstellt wurden. Wenn eine Anwendung auf mehreren Servern l\u00e4uft, kann es vorkommen, dass eine Session auf einem anderen Server wiederhergestellt wird. Dies kann zu Problemen f\u00fchren, wenn die Session auf einem anderen Server wiederhergestellt wird, als sie erstellt wurde. Somit braucht es eine andere L\u00f6sung, um die Session-Daten zu speichern. Daf\u00fcr wird heutzutage meist Redis als In-Memory-Datenbank verwendet, da es eine hohe Performance bietet. Es gibt auch andere L\u00f6sungen, wie z.B. Memcached , SQLite oder MongoDB . Diese L\u00f6sungen sind jedoch nicht so performant wie Redis. Die Session-Daten werden dann auf einem externen Server gespeichert und k\u00f6nnen von allen Servern aus gelesen werden. Wie erstelle ich eine Session? # Eine Session wird mit session_start() erstellt. Diese Funktion muss immer aufgerufen werden, bevor auf die Session zugegriffen werden kann. Wichtig zu beachten ist, dass diese Funktion am Start der Datei geschrieben werden muss. Wenn die Session bereits erstellt wurde, wird die Funktion nichts tun. Wenn die Session noch nicht erstellt wurde, wird sie erstellt. Die Funktion session_status() kann verwendet werden, um zu \u00fcberpr\u00fcfen , ob die Session bereits erstellt wurde. Wie verwalte ich Daten in einer Session? # Um Daten in einer Session zu speichern , muss der Session-Name und der Session-Wert ( Key-Value-Pair ) definiert werden. Dies wird mit $_SESSION erreicht, dass ein as\u00adso\u00adzi\u00ada\u00adtives Array ist, welches die Session-Daten speichert. Der Session-Wert kann ein beliebiger Datentyp sein, einschliesslich eines Arrays oder eines Objekts. Bei der n\u00e4chsten Abfrage wird der Session-Wert wiederhergestellt . und kann \u00fcber denselben Namen abgerufen werden. Session starten & Speichern von Daten <?php session_start (); $_SESSION [ 'visited' ] = true ; Daten auslesen <?php session_start (); if ( $_SESSION [ 'visited' ]) { echo 'Die Seite wurde bereits besucht.' ; } Session beenden <?php session_start (); session_destroy ();","title":"Sessions"},{"location":"PHP/SessionCookie/Sessions/#sessions","text":"Eine Session ist eine tempor\u00e4re Verbindung zwischen einem Client und einem Server. Sie wird verwendet, um Informationen \u00fcber mehrere Seiten hinweg zu speichern. Eine Session wird durch einen Session-ID und einen Session-Wert definiert. Der Session-ID ist eine eindeutige ID , der verwendet wird, um auf die Session zuzugreifen. Der Session-Wert ist der Wert, der mit dem Session-IDs verkn\u00fcpft ist. Der Session-Wert kann ein beliebiger Datentyp sein, einschliesslich eines Arrays oder eines Objekts.","title":"Sessions"},{"location":"PHP/SessionCookie/Sessions/#sinn-und-zweck-von-sessions","text":"Das Ziel einer Session ist es, dass Daten \u00fcber Abfragen hinweg gespeichert werden k\u00f6nnen. Dies ist insbesondere dann n\u00fctzlich, wenn eine Anwendung mehrere Seiten hat, die aufeinander aufbauen. Das HTTP-Protokoll ist stateless , d.h. es speichert keine Informationen \u00fcber den Client. Wenn ein Client eine Anfrage an den Server sendet, wird die Anfrage bearbeitet und die Antwort gesendet. Die Antwort enth\u00e4lt keine Informationen \u00fcber den Client. Somit sind alle Anfragen unabh\u00e4ngig voneinander. Eine Session erm\u00f6glicht es, Informationen \u00fcber mehrere Anfragen hinweg zu speichern.","title":"Sinn und Zweck von Sessions"},{"location":"PHP/SessionCookie/Sessions/#wie-funktionieren-sessions","text":"Jeder Benutzer hat eine eigene Session . Wenn ein Benutzer eine Website besucht, wird eine Session-ID generiert und k\u00f6nnte wie folgt aussehen 82081052a03b87a0055d59d776bb5fd3 . Wer das Muster erkennt weiss, dass dies in PHP ein md5-Hash ist. Mithilfe von session_id() kann die Session-ID ausgelesen werden. Die Session-ID wird in einem Session Cookie gespeichert, das auf dem Client gespeichert wird. Wenn der Benutzer die Website erneut besucht, wird die Session-ID aus dem Cookie ausgelesen und an den Server gesendet. Der Server kann dann die Session-ID mit den gespeicherten Session-Daten abgleichen. Wenn die Session-ID mit den gespeicherten Daten \u00fcbereinstimmt, wird die Session wiederhergestellt . Da die Session auf dem Server gespeichert und verwaltet wird, kann sie vom Client nicht manipuliert werden. So k\u00f6nnen Werte, welche der Benutzer nicht sehen sollte versteckt werden. Die Session-ID ist eindeutig und kann nicht von einem anderen Benutzer verwendet werden. So kann sichergestellt werden, dass nur der Benutzer auf die Session zugreifen kann, der sie erstellt hat. Durch das stehlen der Session-ID k\u00f6nnte Session-Hijacking m\u00f6glich sein.","title":"Wie funktionieren Sessions?"},{"location":"PHP/SessionCookie/Sessions/#cluster-von-webservern","text":"Standardm\u00e4ssig werden Sessions auf dem Server gespeichert, auf dem sie erstellt wurden. Wenn eine Anwendung auf mehreren Servern l\u00e4uft, kann es vorkommen, dass eine Session auf einem anderen Server wiederhergestellt wird. Dies kann zu Problemen f\u00fchren, wenn die Session auf einem anderen Server wiederhergestellt wird, als sie erstellt wurde. Somit braucht es eine andere L\u00f6sung, um die Session-Daten zu speichern. Daf\u00fcr wird heutzutage meist Redis als In-Memory-Datenbank verwendet, da es eine hohe Performance bietet. Es gibt auch andere L\u00f6sungen, wie z.B. Memcached , SQLite oder MongoDB . Diese L\u00f6sungen sind jedoch nicht so performant wie Redis. Die Session-Daten werden dann auf einem externen Server gespeichert und k\u00f6nnen von allen Servern aus gelesen werden.","title":"Cluster von Webservern"},{"location":"PHP/SessionCookie/Sessions/#wie-erstelle-ich-eine-session","text":"Eine Session wird mit session_start() erstellt. Diese Funktion muss immer aufgerufen werden, bevor auf die Session zugegriffen werden kann. Wichtig zu beachten ist, dass diese Funktion am Start der Datei geschrieben werden muss. Wenn die Session bereits erstellt wurde, wird die Funktion nichts tun. Wenn die Session noch nicht erstellt wurde, wird sie erstellt. Die Funktion session_status() kann verwendet werden, um zu \u00fcberpr\u00fcfen , ob die Session bereits erstellt wurde.","title":"Wie erstelle ich eine Session?"},{"location":"PHP/SessionCookie/Sessions/#wie-verwalte-ich-daten-in-einer-session","text":"Um Daten in einer Session zu speichern , muss der Session-Name und der Session-Wert ( Key-Value-Pair ) definiert werden. Dies wird mit $_SESSION erreicht, dass ein as\u00adso\u00adzi\u00ada\u00adtives Array ist, welches die Session-Daten speichert. Der Session-Wert kann ein beliebiger Datentyp sein, einschliesslich eines Arrays oder eines Objekts. Bei der n\u00e4chsten Abfrage wird der Session-Wert wiederhergestellt . und kann \u00fcber denselben Namen abgerufen werden. Session starten & Speichern von Daten <?php session_start (); $_SESSION [ 'visited' ] = true ; Daten auslesen <?php session_start (); if ( $_SESSION [ 'visited' ]) { echo 'Die Seite wurde bereits besucht.' ; } Session beenden <?php session_start (); session_destroy ();","title":"Wie verwalte ich Daten in einer Session?"},{"location":"PHP/Twig/Design/","tags":["PHP","Twig"],"text":"Design # Der HTML-Code kann in Komponente untergebracht werden, damit er wiederverwendbar ist. Dazu muss nur eine Datei mit der Endung .twig.html erstellt werden. Twig hat unglaublich viele Funktionen, die es erm\u00f6glichen, den HTML-Code zu vereinfachen. Die gesamte Liste ist hier zu finden. Hier werden die wichtigsten Anwendungen vorgestellt und erkl\u00e4rt. Wie die Komponenten eingesetzt werden, wird im Logik Kapitel erkl\u00e4rt. Einbinden # In einer Komponente kann HTMl ausgelagert werden, damit es wiederverwendbar ist. Der Inhalt kann dann nach Belieben eingebunden werden. Das Einbinden funktioniert \u00fcber folgenden Inhalt: {{ include ( 'ordner/dateiname.twig.html' ) }} Dabei wird der gesamte Inhalt in die Stelle eingef\u00fcgt, an der der Befehl steht. Es k\u00f6nnen auch Variablen an die Komponente weitergegeben werden. {% set vars = { 'foo' : 'bar' } %} {% include 'template.html' with vars %} Erweitern # Eine bestehende Komponente kann auch erweitert werden, um Daten darin anzuzeigen. Dies ist sehr n\u00fctzlich um Inhalte von Komponenten zu definieren. F\u00fcr die Erweiterung wird eine Basisklasse ben\u00f6tigt, die mit block einen \u00fcberschreibbaren Bereich definiert. Wenn die Komponente erweitert wird, kann der Inhalt des Blocks anhand des Namens \u00fcberschrieben werden. Der Inhalt wird angezeigt, wenn die Komponente nicht erweitert wird. Basislayout <div> {% block content %} <p>Dieser Bereich kann \u00fcberschrieben werden</p> {% endblock %} </div> Im gegensatz zum Einbinden wird das Basislayout \u00fcber extends eingebunden. Mit dem Namen des Blockes kann der Inhalt \u00fcberschrieben werden. Wenn der vorherige Inhalt noch ben\u00f6tigt wird, dann kann er mit parent() eingebunden werden. Erweiterung {% extends 'ordner/dateiname.twig.html' %} {% block content %} {{ parent () }} <p>Der Inhalt wird angezeigt, wenn die Komponente erweitert wird</p> {% endblock %} If / Else # Fast am h\u00e4ufigsten m\u00f6chte man abh\u00e4ngig einer Kondition etwas anderes anzeigen. Dies kann mit if und else gemacht werden. Wenn die Kondition erf\u00fcllt ist, wird der Inhalt des if -Blocks angezeigt. Ansonsten die des else -Blocks. Es verh\u00e4lt sich somit gleich wie das PHP If . Mithilfe von endif wird das Ende einer Bedingung gekennzeichnet. {% if condition %} <p>Kondition ist wahr</p> {% elseif condition2 %} <p>Die Kondition ist nicht wahr, aber die Alternative ist wahr</p> {% else %} <p>Keine der Konditionen ist wahr</p> {% endif %} For # Eine Liste \u00fcber PHP anzuzeigen ist sehr einfach, jedoch semantisch schwer zu lesen, da mit echo gearbeitet werden muss. Twig bietet die M\u00f6glichkeit, eine Liste \u00fcber eine Schleife einfach anzuzeigen. Dazu wird eine Variable ben\u00f6tigt, die eine Liste enth\u00e4lt. Mit for wird die Schleife definiert, welche \u00fcblicherweise ein Foreach abbildet. Mit in wird die Variable angegeben, die die Liste enth\u00e4lt. Gleich wie beim If wird das Ende gekennzeichnet, was mit endfor geschieht. {% for item in list %} <p> {{ item }} </p> {% else %} <p>Liste enth\u00e4lt keine Elemente</p> {% endfor %} Wenn eine Liste keine Elemente enth\u00e4lt kann mit else ein Inhalt angezeigt werden. Durch das Hinzuf\u00fcgen von key k\u00f6nnte auch der Index angezeigt werden. {% for key , item in list %} <p> {{ key }} : {{ item }} </p> {% endfor %} Escape # H\u00e4ufig werden Eingaben von Kunden an einem anderen Ort angezeigt. Diese Eingaben k\u00f6nnen HTML-Code enthalten, der nicht ausgef\u00fchrt werden soll. Twig bietet die M\u00f6glichkeit, den HTML-Code zu escapen . Dies kann mit |escape gemacht werden. Wenn eine bestimmte Sprache nicht erlaubt ist, dann kann mit autoescape ein Bereich definiert werden, in welchem diese Sprache escaped wird. {% autoescape \"html\" %} {{ var }} {{ var | raw }} {# var won't be escaped #} {{ var | escape }} {# var won't be doubled-escaped #} {% endautoescape %} So kann XSS verhindert werden, da JavaScript nicht ausgef\u00fchrt wird. Twig bietet auch die M\u00f6glichkeit dies nur auf eine Variable anzuwenden. Dies kann mit |e('Sprache') gemacht werden. {{ '<script>alert(\"XSS\")</script>' | e ( 'js' ) }}","title":"Design"},{"location":"PHP/Twig/Design/#design","text":"Der HTML-Code kann in Komponente untergebracht werden, damit er wiederverwendbar ist. Dazu muss nur eine Datei mit der Endung .twig.html erstellt werden. Twig hat unglaublich viele Funktionen, die es erm\u00f6glichen, den HTML-Code zu vereinfachen. Die gesamte Liste ist hier zu finden. Hier werden die wichtigsten Anwendungen vorgestellt und erkl\u00e4rt. Wie die Komponenten eingesetzt werden, wird im Logik Kapitel erkl\u00e4rt.","title":"Design"},{"location":"PHP/Twig/Design/#einbinden","text":"In einer Komponente kann HTMl ausgelagert werden, damit es wiederverwendbar ist. Der Inhalt kann dann nach Belieben eingebunden werden. Das Einbinden funktioniert \u00fcber folgenden Inhalt: {{ include ( 'ordner/dateiname.twig.html' ) }} Dabei wird der gesamte Inhalt in die Stelle eingef\u00fcgt, an der der Befehl steht. Es k\u00f6nnen auch Variablen an die Komponente weitergegeben werden. {% set vars = { 'foo' : 'bar' } %} {% include 'template.html' with vars %}","title":"Einbinden"},{"location":"PHP/Twig/Design/#erweitern","text":"Eine bestehende Komponente kann auch erweitert werden, um Daten darin anzuzeigen. Dies ist sehr n\u00fctzlich um Inhalte von Komponenten zu definieren. F\u00fcr die Erweiterung wird eine Basisklasse ben\u00f6tigt, die mit block einen \u00fcberschreibbaren Bereich definiert. Wenn die Komponente erweitert wird, kann der Inhalt des Blocks anhand des Namens \u00fcberschrieben werden. Der Inhalt wird angezeigt, wenn die Komponente nicht erweitert wird. Basislayout <div> {% block content %} <p>Dieser Bereich kann \u00fcberschrieben werden</p> {% endblock %} </div> Im gegensatz zum Einbinden wird das Basislayout \u00fcber extends eingebunden. Mit dem Namen des Blockes kann der Inhalt \u00fcberschrieben werden. Wenn der vorherige Inhalt noch ben\u00f6tigt wird, dann kann er mit parent() eingebunden werden. Erweiterung {% extends 'ordner/dateiname.twig.html' %} {% block content %} {{ parent () }} <p>Der Inhalt wird angezeigt, wenn die Komponente erweitert wird</p> {% endblock %}","title":"Erweitern"},{"location":"PHP/Twig/Design/#if-else","text":"Fast am h\u00e4ufigsten m\u00f6chte man abh\u00e4ngig einer Kondition etwas anderes anzeigen. Dies kann mit if und else gemacht werden. Wenn die Kondition erf\u00fcllt ist, wird der Inhalt des if -Blocks angezeigt. Ansonsten die des else -Blocks. Es verh\u00e4lt sich somit gleich wie das PHP If . Mithilfe von endif wird das Ende einer Bedingung gekennzeichnet. {% if condition %} <p>Kondition ist wahr</p> {% elseif condition2 %} <p>Die Kondition ist nicht wahr, aber die Alternative ist wahr</p> {% else %} <p>Keine der Konditionen ist wahr</p> {% endif %}","title":"If / Else"},{"location":"PHP/Twig/Design/#for","text":"Eine Liste \u00fcber PHP anzuzeigen ist sehr einfach, jedoch semantisch schwer zu lesen, da mit echo gearbeitet werden muss. Twig bietet die M\u00f6glichkeit, eine Liste \u00fcber eine Schleife einfach anzuzeigen. Dazu wird eine Variable ben\u00f6tigt, die eine Liste enth\u00e4lt. Mit for wird die Schleife definiert, welche \u00fcblicherweise ein Foreach abbildet. Mit in wird die Variable angegeben, die die Liste enth\u00e4lt. Gleich wie beim If wird das Ende gekennzeichnet, was mit endfor geschieht. {% for item in list %} <p> {{ item }} </p> {% else %} <p>Liste enth\u00e4lt keine Elemente</p> {% endfor %} Wenn eine Liste keine Elemente enth\u00e4lt kann mit else ein Inhalt angezeigt werden. Durch das Hinzuf\u00fcgen von key k\u00f6nnte auch der Index angezeigt werden. {% for key , item in list %} <p> {{ key }} : {{ item }} </p> {% endfor %}","title":"For"},{"location":"PHP/Twig/Design/#escape","text":"H\u00e4ufig werden Eingaben von Kunden an einem anderen Ort angezeigt. Diese Eingaben k\u00f6nnen HTML-Code enthalten, der nicht ausgef\u00fchrt werden soll. Twig bietet die M\u00f6glichkeit, den HTML-Code zu escapen . Dies kann mit |escape gemacht werden. Wenn eine bestimmte Sprache nicht erlaubt ist, dann kann mit autoescape ein Bereich definiert werden, in welchem diese Sprache escaped wird. {% autoescape \"html\" %} {{ var }} {{ var | raw }} {# var won't be escaped #} {{ var | escape }} {# var won't be doubled-escaped #} {% endautoescape %} So kann XSS verhindert werden, da JavaScript nicht ausgef\u00fchrt wird. Twig bietet auch die M\u00f6glichkeit dies nur auf eine Variable anzuwenden. Dies kann mit |e('Sprache') gemacht werden. {{ '<script>alert(\"XSS\")</script>' | e ( 'js' ) }}","title":"Escape"},{"location":"PHP/Twig/Installation/","tags":["PHP","Anleitung","Twig"],"text":"Installation # Um Twig \u00fcberhaupt zu benutzen muss es zuerst verf\u00fcgbar gemacht werden. Dazu muss es \u00fcber Composer installiert werden, was wiederum gleich wie PHP \u00fcber Docker gemacht werden kann. Dazu wird Composer ben\u00f6tigt, was der Paketmanager f\u00fcr PHP ist. Es verwaltet die Abh\u00e4ngigkeiten und Versionen von Bibliotheken, damit diese nicht manuell installiert und aktualisiert werden m\u00fcssen. Composer wird \u00fcber den folgenden Befehl in Docker installiert werden: Composer installieren RUN curl -sS https://getcomposer.org/installer | php -- --install-dir = /usr/local/bin --filename = composer \\ && ln -s $( composer config --global home ) /root/composer ENV PATH = $PATH :/root/composer/vendor/bin COMPOSER_ALLOW_SUPERUSER = 1 Wenn Composer installiert ist, dann m\u00fcssen noch die Bibliotheken installiert werden. Dazu wird ein composer.json -File erstellt, welches die Bibliotheken mit den Versionen enth\u00e4lt, die installiert werden sollen. In diesem Fall wird nur Twig installiert. Die Datei befindet sich unter dem PHP-Ordner ( /php/composer.json ) und k\u00f6nnte wie folgt aussehen: composer.json { \"require\" : { \"twig/twig\" : \"^2.0\" //(1) } } Die Versionen sind nach Major.Minor.Patch aufgebaut, wobei ein ^ vor der Version steht, was bedeutet, dass nur die Minor und Patch-Versionen aktualisieren d\u00fcrfen, was Breaking-Changes verhindert. \u00dcber ~ wird gekennzeichnet dass nur die Patch-Versionen aktualisiert werden d\u00fcrfen. Ohne ^ oder ~ wird die exakte Version installiert. Mehr Informationen dazu gibt es in der Composer Dokumentation oder auf Medium . Im letzten Schritt werden die Bibliotheken installiert. Dabei wird die Konfiguration in den Composer-Ordner kopiert. \u00dcber den Befehl composer install werden die Bibliotheken installiert. Bibliotheken installieren RUN mkdir /var/composer COPY composer.json /var/composer/ RUN cd /var/composer/ && composer install Wenn alles richtig gemacht wurde, dann sollte Twig mit der Version 2.0 installiert sein. Twig laden # Twig wird nicht direkt vom Webserver verarbeitet, sondern muss \u00fcber PHP geladen werden. Dies kann zum Beispiel in einer Basisklasse f\u00fcr den Controller gemacht werden. Twig laden <?php class BaseController { protected $twig ; public function __construct () { $this -> loadTwig (); //(1) } private function loadTwig () { // Load our autoloader require_once '/var/composer/vendor/autoload.php' ; // Specify our Twig templates location $loader = new Twig_Loader_Filesystem ( __DIR__ . '/../views' ); $this -> twig = new Twig_Environment ( $loader , array ( 'debug' => true )); //(2) $this -> twig -> addExtension ( new Twig_Extension_Debug ()); //(3) } } Die Methode wird bei jeder Vererbung aufgerufen und instanziiert. Dadurch ist Twig immer verf\u00fcgbar. Twig wird instanziiert und die Templates werden aus dem Ordner views geladen. Zus\u00e4tzlich wird der Debug-Modus aktiviert. Die Debugging-Extension ist nur f\u00fcr die Entwicklung notwendig, sollte aber nicht in der Produktivumgebung aktiviert sein. Dort kann das Array weggelassen werden.","title":"Installation"},{"location":"PHP/Twig/Installation/#installation","text":"Um Twig \u00fcberhaupt zu benutzen muss es zuerst verf\u00fcgbar gemacht werden. Dazu muss es \u00fcber Composer installiert werden, was wiederum gleich wie PHP \u00fcber Docker gemacht werden kann. Dazu wird Composer ben\u00f6tigt, was der Paketmanager f\u00fcr PHP ist. Es verwaltet die Abh\u00e4ngigkeiten und Versionen von Bibliotheken, damit diese nicht manuell installiert und aktualisiert werden m\u00fcssen. Composer wird \u00fcber den folgenden Befehl in Docker installiert werden: Composer installieren RUN curl -sS https://getcomposer.org/installer | php -- --install-dir = /usr/local/bin --filename = composer \\ && ln -s $( composer config --global home ) /root/composer ENV PATH = $PATH :/root/composer/vendor/bin COMPOSER_ALLOW_SUPERUSER = 1 Wenn Composer installiert ist, dann m\u00fcssen noch die Bibliotheken installiert werden. Dazu wird ein composer.json -File erstellt, welches die Bibliotheken mit den Versionen enth\u00e4lt, die installiert werden sollen. In diesem Fall wird nur Twig installiert. Die Datei befindet sich unter dem PHP-Ordner ( /php/composer.json ) und k\u00f6nnte wie folgt aussehen: composer.json { \"require\" : { \"twig/twig\" : \"^2.0\" //(1) } } Die Versionen sind nach Major.Minor.Patch aufgebaut, wobei ein ^ vor der Version steht, was bedeutet, dass nur die Minor und Patch-Versionen aktualisieren d\u00fcrfen, was Breaking-Changes verhindert. \u00dcber ~ wird gekennzeichnet dass nur die Patch-Versionen aktualisiert werden d\u00fcrfen. Ohne ^ oder ~ wird die exakte Version installiert. Mehr Informationen dazu gibt es in der Composer Dokumentation oder auf Medium . Im letzten Schritt werden die Bibliotheken installiert. Dabei wird die Konfiguration in den Composer-Ordner kopiert. \u00dcber den Befehl composer install werden die Bibliotheken installiert. Bibliotheken installieren RUN mkdir /var/composer COPY composer.json /var/composer/ RUN cd /var/composer/ && composer install Wenn alles richtig gemacht wurde, dann sollte Twig mit der Version 2.0 installiert sein.","title":"Installation"},{"location":"PHP/Twig/Installation/#twig-laden","text":"Twig wird nicht direkt vom Webserver verarbeitet, sondern muss \u00fcber PHP geladen werden. Dies kann zum Beispiel in einer Basisklasse f\u00fcr den Controller gemacht werden. Twig laden <?php class BaseController { protected $twig ; public function __construct () { $this -> loadTwig (); //(1) } private function loadTwig () { // Load our autoloader require_once '/var/composer/vendor/autoload.php' ; // Specify our Twig templates location $loader = new Twig_Loader_Filesystem ( __DIR__ . '/../views' ); $this -> twig = new Twig_Environment ( $loader , array ( 'debug' => true )); //(2) $this -> twig -> addExtension ( new Twig_Extension_Debug ()); //(3) } } Die Methode wird bei jeder Vererbung aufgerufen und instanziiert. Dadurch ist Twig immer verf\u00fcgbar. Twig wird instanziiert und die Templates werden aus dem Ordner views geladen. Zus\u00e4tzlich wird der Debug-Modus aktiviert. Die Debugging-Extension ist nur f\u00fcr die Entwicklung notwendig, sollte aber nicht in der Produktivumgebung aktiviert sein. Dort kann das Array weggelassen werden.","title":"Twig laden"},{"location":"PHP/Twig/Logik/","tags":["PHP","Twig"],"text":"Logik # Das Hinzuf\u00fcgen von neuen Dateien funktioniert genau gleich wie ohne Twig. Dieser Vorgang wurde bereits in einem vorherigen Kapitel erl\u00e4utert. Die Dateien werden in den entsprechenden Ordnern abgelegt und k\u00f6nnen \u00fcber den Controller geladen werden. Im Gegensatz zum Framework muss Twig \u00fcber eine render Methode geladen werden. Der Aufruf davon sieht wie folgt aus: Render Methode Controller Model <?php // Die Variable $twig ist vom Typ Twig_Environment (1) echo $this -> twig -> render ( 'pfad/zu/view.twig.html' , [ 'variablen' => 'werte' ]); Die Variable $twig wurde in der Base Klasse definiert und ist vom Typ Twig_Environment . Der genaue Vorgang wurde in der Installation beschrieben. <?php require_once '../app/models/FlugiTypen.php' ; class Flugzeug extends Controller { public function index ( $name = '' ) { // Flugzeug Model laden und bef\u00fcllen $flugzeug = $this -> model ( 'Flugi' ); $flugzeug -> id = 1 ; $flugzeug -> name = \"Boing 747\" ; $flugzeug -> speed = 1000 ; $flugzeug -> typ = FlugiTypen :: Ballon ; // Typen laden (1) $typen = array_map ( fn ( $enumItem ) => \" { $enumItem -> value } \" , FlugiTypen :: cases () ); // View laden echo $this -> twig -> render ( 'flugzeug/index.twig.html' , [ 'title' => \"Flugzeug / Index\" , 'flugzeug' => $flugzeug , 'typen' => $typen ]); } } Die Typen sind ein Enum vom Typ string . Sie werden in ein assoziatives Array umgewandelt, damit der Text und die Nummer getrennt sind. <?php class Flugi { public int $id ; public string $name ; public FlugiTypen $typ ; public float $speed ; } Flugzeug Typen Enum <?php enum FlugiTypen : string { case Ballon = 'Ballon \ud83c\udf88' ; case Flugzeug = 'Flugzeug \ud83d\udee9' ; case Hubschrauber = 'Hubschrauber \ud83d\ude81' ; case Rakete = 'Rakete \ud83d\ude80' ; case Ufo = 'Ufo \ud83d\udef8' ; } Formular # Ein Formular verh\u00e4lt sich exakt gleich wie im HTML. Der einzige Unterschied ist, dass die Werte der Felder \u00fcber Twig eingef\u00fcgt werden. So enth\u00e4lt die Datei kein PHP und nur g\u00fcltiges HTML. Hier wird das Basislayout \u00fcberschrieben , welches den Block content enth\u00e4lt. So konnten alle Imports in einer einzigen Datei gesammelt werden. Formular Resultat {% extends \"base/layout.twig.html\" %} <!-- Wir \u00fcberschreiben den Content-Block --> {% block content %} <h1 class=\"mt-5\"> {{ title }} </h1> <form> <div class=\"form-group\"> <label for=\"id\">Flugzeug ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" value=\" {{ flugzeug.id }} \"> </div> <div class=\"form-group\"> <label for=\"name\">Flugzeug Name</label> <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" value=\" {{ flugzeug.name }} \"> </div> <div class=\"form-group\"> <label for=\"speed\">Geschwindigkeit</label> <input type=\"number\" class=\"form-control\" id=\"speed\" name=\"speed\" value=\" {{ flugzeug.speed }} \"> </div> </form> {% endblock %} Dropdown # Ein Dropdown mit dynamischem Inhalt ist \u00fcber HTML nicht m\u00f6glich. Mithilfe von Twig kann dies jedoch mit Leichtigkeit erm\u00f6glicht werden. Dazu wird am besten ein Macro erstellt, damit das Dropdown wiederverwendbar ist. Hier wird der Name des Dropdowns und die Optionen \u00fcbergeben. Die Optionen werden in einer Schleife durchlaufen und die aktuelle Option wird mit dem Wert verglichen. Ist dies der Fall, wird das Attribut selected gesetzt. Dieses Attribut ist f\u00fcr das Dropdown notwendig, damit die Option bereits ausgew\u00e4hlt ist. Makro Resultat {% macro dropdown ( name , values , selected ) %} <select name=\" {{ name }} \"> {% for key , value in values %} <option value=\" {{ key }} \" {% if ( key == selected ) %} selected {% endif %} > {{ value }} </option> {% endfor %} </select> {% endmacro %} Flugzeug Typ Ballon \ud83c\udf88 Flugzeug \ud83d\udee9 Hubschrauber \ud83d\ude81 Rakete \ud83d\ude80 Ufo \ud83d\udef8 Damit das Makro verf\u00fcgbar ist muss es auch in der View geladen werden. Dies geschieht mit dem import Befehl. Nun kann das Makro wie eine normale Funktion aufgerufen werden. Das daraus generierte HTML wird dann in die View eingef\u00fcgt. Dropdown verwenden {% import \"helpers/dropdown.twig.html\" as dHelper %} {{ dHelper.dropdown ( 'typ' , typen , flugzeug.typ ) }}","title":"Logik"},{"location":"PHP/Twig/Logik/#logik","text":"Das Hinzuf\u00fcgen von neuen Dateien funktioniert genau gleich wie ohne Twig. Dieser Vorgang wurde bereits in einem vorherigen Kapitel erl\u00e4utert. Die Dateien werden in den entsprechenden Ordnern abgelegt und k\u00f6nnen \u00fcber den Controller geladen werden. Im Gegensatz zum Framework muss Twig \u00fcber eine render Methode geladen werden. Der Aufruf davon sieht wie folgt aus: Render Methode Controller Model <?php // Die Variable $twig ist vom Typ Twig_Environment (1) echo $this -> twig -> render ( 'pfad/zu/view.twig.html' , [ 'variablen' => 'werte' ]); Die Variable $twig wurde in der Base Klasse definiert und ist vom Typ Twig_Environment . Der genaue Vorgang wurde in der Installation beschrieben. <?php require_once '../app/models/FlugiTypen.php' ; class Flugzeug extends Controller { public function index ( $name = '' ) { // Flugzeug Model laden und bef\u00fcllen $flugzeug = $this -> model ( 'Flugi' ); $flugzeug -> id = 1 ; $flugzeug -> name = \"Boing 747\" ; $flugzeug -> speed = 1000 ; $flugzeug -> typ = FlugiTypen :: Ballon ; // Typen laden (1) $typen = array_map ( fn ( $enumItem ) => \" { $enumItem -> value } \" , FlugiTypen :: cases () ); // View laden echo $this -> twig -> render ( 'flugzeug/index.twig.html' , [ 'title' => \"Flugzeug / Index\" , 'flugzeug' => $flugzeug , 'typen' => $typen ]); } } Die Typen sind ein Enum vom Typ string . Sie werden in ein assoziatives Array umgewandelt, damit der Text und die Nummer getrennt sind. <?php class Flugi { public int $id ; public string $name ; public FlugiTypen $typ ; public float $speed ; } Flugzeug Typen Enum <?php enum FlugiTypen : string { case Ballon = 'Ballon \ud83c\udf88' ; case Flugzeug = 'Flugzeug \ud83d\udee9' ; case Hubschrauber = 'Hubschrauber \ud83d\ude81' ; case Rakete = 'Rakete \ud83d\ude80' ; case Ufo = 'Ufo \ud83d\udef8' ; }","title":"Logik"},{"location":"PHP/Twig/Logik/#formular","text":"Ein Formular verh\u00e4lt sich exakt gleich wie im HTML. Der einzige Unterschied ist, dass die Werte der Felder \u00fcber Twig eingef\u00fcgt werden. So enth\u00e4lt die Datei kein PHP und nur g\u00fcltiges HTML. Hier wird das Basislayout \u00fcberschrieben , welches den Block content enth\u00e4lt. So konnten alle Imports in einer einzigen Datei gesammelt werden. Formular Resultat {% extends \"base/layout.twig.html\" %} <!-- Wir \u00fcberschreiben den Content-Block --> {% block content %} <h1 class=\"mt-5\"> {{ title }} </h1> <form> <div class=\"form-group\"> <label for=\"id\">Flugzeug ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" value=\" {{ flugzeug.id }} \"> </div> <div class=\"form-group\"> <label for=\"name\">Flugzeug Name</label> <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" value=\" {{ flugzeug.name }} \"> </div> <div class=\"form-group\"> <label for=\"speed\">Geschwindigkeit</label> <input type=\"number\" class=\"form-control\" id=\"speed\" name=\"speed\" value=\" {{ flugzeug.speed }} \"> </div> </form> {% endblock %}","title":"Formular"},{"location":"PHP/Twig/Logik/#dropdown","text":"Ein Dropdown mit dynamischem Inhalt ist \u00fcber HTML nicht m\u00f6glich. Mithilfe von Twig kann dies jedoch mit Leichtigkeit erm\u00f6glicht werden. Dazu wird am besten ein Macro erstellt, damit das Dropdown wiederverwendbar ist. Hier wird der Name des Dropdowns und die Optionen \u00fcbergeben. Die Optionen werden in einer Schleife durchlaufen und die aktuelle Option wird mit dem Wert verglichen. Ist dies der Fall, wird das Attribut selected gesetzt. Dieses Attribut ist f\u00fcr das Dropdown notwendig, damit die Option bereits ausgew\u00e4hlt ist. Makro Resultat {% macro dropdown ( name , values , selected ) %} <select name=\" {{ name }} \"> {% for key , value in values %} <option value=\" {{ key }} \" {% if ( key == selected ) %} selected {% endif %} > {{ value }} </option> {% endfor %} </select> {% endmacro %} Flugzeug Typ Ballon \ud83c\udf88 Flugzeug \ud83d\udee9 Hubschrauber \ud83d\ude81 Rakete \ud83d\ude80 Ufo \ud83d\udef8 Damit das Makro verf\u00fcgbar ist muss es auch in der View geladen werden. Dies geschieht mit dem import Befehl. Nun kann das Makro wie eine normale Funktion aufgerufen werden. Das daraus generierte HTML wird dann in die View eingef\u00fcgt. Dropdown verwenden {% import \"helpers/dropdown.twig.html\" as dHelper %} {{ dHelper.dropdown ( 'typ' , typen , flugzeug.typ ) }}","title":"Dropdown"},{"location":"Reflexion/000_Vorlage/","text":"Anforderungen # Nach folgenden Anforderungen sollte das Journal aufgebaut werden. Checkliste # Was haben wir gemacht? Beispiele, Code & Verlinkung Wie haben wir es behandelt? Materialien, Dateien & Tools Was habe ich gelernt? Was w\u00fcrde ich anders machen? Wobei kann es behilflich sein? (Anwendungszweck) Was war neu / bereits bekannt? Merksatz Kurze Zusammenfassung Min 2 S\u00e4tze Was ist mir aufgefallen? (Fazit) Zusammenfassung der Inhalte # 10% Wesentliche Erkenntnisse nachvollziehbar erl\u00e4utert Zusammenfassung der behandelten Inhalte 30% Folgerungen f\u00fcr die eigene Berufspraxis festgehalten / Eigene Reflexion ist erkennbar Learnings ist der Zusammenfassung ersichtlich Merks\u00e4tze und Folgerungen sind ersichtlich 10% Bezug zu den Modulinhalte erkl\u00e4rt Wie haben wir die Inhalte behandelt Beispiele aus dem Unterricht sind nachgef\u00fchrt 20% Es werden die korrekten Fachbegriffe verwendet Die Formulierungen der Inhalte sind professionell Form des Lernportfolios # Werden automatisch durch MkDocs gemacht 20% Das Lernjournal ist in der Endfassung als Lernhilfe zu gebrauchen Verlinkungen innerhalb der Inhalte Inhaltsverzeichnisse sind vorhanden 10% Saubere Gestaltung des Lernjournals Listings Aufz\u00e4hlungen Tabellen","title":"Journal Anforderungen"},{"location":"Reflexion/000_Vorlage/#anforderungen","text":"Nach folgenden Anforderungen sollte das Journal aufgebaut werden.","title":"Anforderungen"},{"location":"Reflexion/000_Vorlage/#checkliste","text":"Was haben wir gemacht? Beispiele, Code & Verlinkung Wie haben wir es behandelt? Materialien, Dateien & Tools Was habe ich gelernt? Was w\u00fcrde ich anders machen? Wobei kann es behilflich sein? (Anwendungszweck) Was war neu / bereits bekannt? Merksatz Kurze Zusammenfassung Min 2 S\u00e4tze Was ist mir aufgefallen? (Fazit)","title":"Checkliste"},{"location":"Reflexion/000_Vorlage/#zusammenfassung-der-inhalte","text":"10% Wesentliche Erkenntnisse nachvollziehbar erl\u00e4utert Zusammenfassung der behandelten Inhalte 30% Folgerungen f\u00fcr die eigene Berufspraxis festgehalten / Eigene Reflexion ist erkennbar Learnings ist der Zusammenfassung ersichtlich Merks\u00e4tze und Folgerungen sind ersichtlich 10% Bezug zu den Modulinhalte erkl\u00e4rt Wie haben wir die Inhalte behandelt Beispiele aus dem Unterricht sind nachgef\u00fchrt 20% Es werden die korrekten Fachbegriffe verwendet Die Formulierungen der Inhalte sind professionell","title":"Zusammenfassung der Inhalte"},{"location":"Reflexion/000_Vorlage/#form-des-lernportfolios","text":"Werden automatisch durch MkDocs gemacht 20% Das Lernjournal ist in der Endfassung als Lernhilfe zu gebrauchen Verlinkungen innerhalb der Inhalte Inhaltsverzeichnisse sind vorhanden 10% Saubere Gestaltung des Lernjournals Listings Aufz\u00e4hlungen Tabellen","title":"Form des Lernportfolios"},{"location":"Reflexion/001_Woche/","tags":["Reflexion"],"text":"1. Woche 18.08.2022 # Zusammenfassung Dokumentation eingerichtet Docker angeschaut PHP aufgesetzt PHP Basics Dokumentation eingerichtet # Heute richteten wir als Erstes diese Dokumentation ein. Von Herrn Inauen bekamen wir eine Vorlage , welche bereits mit Docsify eingerichtet war. Ich pers\u00f6nlich pr\u00e4feriere MkDocs , da es mehr eingebaute Komponenten und Einstellungen besitzt. Das Aufsetzen und Lernen des Syntax ist daf\u00fcr etwas schwieriger. Mithilfe von GitHub Actions automatisierte ich das Erstellen und Ver\u00f6ffentlichen der Dokumentation. Die Dokumentation richtete jeder selbst ein. W\u00e4hrend dieser Zeit ging ich im Klassenzimmer herum und half beim Aufsetzen. Ich half beim Einrichten der automatischen Ver\u00f6ffentlichung in GitHub. Um dies nicht jedes Mal erneut zu zeigen, erstellte ich hier auch eine kurze Anleitung dazu. Dadurch habe ich gelernt, dass es f\u00fcr Anf\u00e4nger einfacher ist, auf einer gegebenen Vorlage weiterzuarbeiten als von Grund auf etwas aufzubauen. Wenn ich n\u00e4chstes Mal meinem Unterstift eine Aufgabe geben muss, dann werde ich ihm Beispiele oder eine Vorlage beilegen, damit er ein Grundger\u00fcst hat. Da ich das Einrichten der GitHub Seite schon sehr oft gemacht hatte, konnte ich das ohne Schwierigkeiten erledigen. Zus\u00e4tzlich hatte ich von der letzten Projektarbeit bereits eine Vorlage f\u00fcr MkDocs. Merksatz: Anleitungen zu schreiben hilft, das Thema zu vertiefen und genauer zu verstehen. Vorlagen sind f\u00fcr Anf\u00e4nger einfacher zu verstehen als von Grund auf etwas aufzubauen. Mir ist aufgefallen, dass das Lernjournal mehrere Anforderungen besitzt. Um diese im \u00dcberblick zu behalten, erstellte ich eine Liste. Nach der Checkliste ist dieses und die folgenden Journale aufgebaut. Docker angeschaut # F\u00fcr die Dokumentation und unser PHP-Projekt werden wir Docker verwenden. So kommt es nicht drauf an, ob Windows oder Linux als Betriebssystem verwendet wird. Zudem haben alle Beteiligten dieselbe PHP-Version und k\u00f6nnen so Fehler besser finden. Da ich Docker bereits kenne, konnte ich mir die Dokumentation durchlesen und mir die wichtigsten Befehle merken. Ich habe mir die Dokumentation von Docker und Docker Compose durchgelesen. Die wichtigsten Komponenten notierte ich mir. Gelernt habe ich, dass Docker f\u00fcr das Beheben von Sicherheitsl\u00fccken unheimlich n\u00fctzlich ist. Da Docker Container isoliert sind, k\u00f6nnen sie nicht auf andere Container zugreifen. Wenn ein Container gehackt wird, dann kann er nur auf die Daten des Containers zugreifen, nicht aber auf die Daten der anderen Container. F\u00fcr das L\u00f6sen einer Sicherheitsl\u00fccke im Programm, das im Container l\u00e4uft, muss nur der Container mit einem Patch neu gestartet werden. Merksatz: Mithilfe Docker kann eine einheitliche Umgebung erstellt werden. Docker und virtuelle Maschinen sollte man nicht mischen. In meinem Unternehmen wird Docker nicht verwendet, da alle dieselbe Installation haben und auf Windows arbeiten. Dies erlaubt keine Pr\u00e4ferenzen. Zus\u00e4tzlich haben wir nur einen Server, was das Isolieren unn\u00f6tig macht. PHP aufgesetzt # In diesem Modul verwenden wir PHP, was nat\u00fcrlich auch eine Installation von PHP ben\u00f6tigt. Wie bereits erw\u00e4hnt, haben wir PHP \u00fcber Docker installiert . Zus\u00e4tzlich zu PHP ist auch eine Datenbank hinterlegt. Diese Datenbank wird von Adminer verwaltet. Es ist eine Alternative , welche sich leichter bedienen l\u00e4sst als phpMyAdmin. F\u00fcr die Installation von PHP mit Docker bekamen wir eine Vorlage von Herrn Inauen. Diese Vorlage beinhaltet bereits eine docker-compose.yml Datei, welche die Container erstellt. Aufsetzen machte jeder selbst, da man eigentlich nur den Container ausf\u00fchren musste. Merksatz: Docker sollte \u00fcber All-In-One Installationen ( XAMPP ) bevorzugt werden. Eine einheitliche Verwaltung von Entwicklungstools vereinfacht das Fehler finden. Ich pers\u00f6nlich pr\u00e4feriere phpMyAdmin , da ich damit schon Erfahrung habe. Mit Adminer besch\u00e4ftigte ich mich aber auch und konnte es bedienen. Beide Benutzeroberfl\u00e4chen finde ich vom Aussehen jedoch veraltet . Ich hoffe, dass die Entwickler in Zukunft etwas Moderneres erstellen. Mein eigenes Hosting von MariaDB l\u00e4uft \u00fcber phpMyAdmin, weswegen ich dies besser kenne. Im Betrieb verwenden wir SQL Server und PostgreSQL . Zum Managen verwenden wir jedoch die offiziellen Tools von Microsoft ( SSMS ) und PostgreSQL ( pgAdmin ). Den Syntax einer weiteren Datenbank zu kennen ist f\u00fcr mich sehr wichtig, da ich in Zukunft mit anderen Datenbanken arbeiten m\u00f6chte. PHP Basics # Um die Grundlagen von PHP zu verstehen, habe ich mir unterschiedliche Dokumentationen \u00fcber PHP durchgelesen. Den Inhalt der Seiten fasste ich in einer Zusammenfassung zusammen. In der habe ich Beispiele erstellt und beschrieben. Die Ausgaben zeigte ich auch, damit man das Skript nicht selbst ausf\u00fchren muss. Im Unterricht verwenden wir die PHP Einfach Seite. Sie ist sehr gut f\u00fcr Anf\u00e4nger geeignet, da sie die Grundlagen erkl\u00e4rt und nicht zu kompliziert ist. Der Inhalt der ersten Kapitel geht es um das Ausgeben von Werten, Schreiben von Kommentaren und den Umgang mit Variablen. Es gibt aber auch Abschnitte \u00fcber SQL und erweiterte PHP-Methoden. Zus\u00e4tzlich verwendete ich W3School , was f\u00fcr mich eine etwas \u00fcbersichtlichere Seite ist. Den Unterschied zwischen Funktion und Methode habe ich gelernt. Bisher habe ich einfach akzeptiert, dass etwas mit Name und danach zwei Klammern name() eine Methode ist. Dies ist jedoch nur der Fall, wenn die Methode in einer Klasse oder einem Objekt definiert ist. Eine Funktion ist eine Methode, die nicht in einer Klasse oder einem Objekt definiert ist. Da PHP auch ausserhalb von Klassen verwendet werden kann, ist es wichtig zu wissen, wie man dies fachbegrifflich nennt. Merksatz: Eine Methode ist eigentlich eine Funktion, die im Kontext einer Klasse oder eines Objekts verwendet wird. ~ StackOverflow Mir ist aufgefallen, dass ich vom \u00dcK ( M307 ) alle Basics bereits kenne. Dort haben wir eigentlich alles, was auf der PHP-Einfach Seite steht, schon \u00fcberflogen. Sp\u00e4ter in diesem Modul werden wir jedoch Fortgeschritteneres machen. F\u00fcr das ist es notwendig, dass die Grundlagen sitzen.","title":"1. Woche"},{"location":"Reflexion/001_Woche/#1-woche-18082022","text":"Zusammenfassung Dokumentation eingerichtet Docker angeschaut PHP aufgesetzt PHP Basics","title":"1. Woche 18.08.2022"},{"location":"Reflexion/001_Woche/#dokumentation-eingerichtet","text":"Heute richteten wir als Erstes diese Dokumentation ein. Von Herrn Inauen bekamen wir eine Vorlage , welche bereits mit Docsify eingerichtet war. Ich pers\u00f6nlich pr\u00e4feriere MkDocs , da es mehr eingebaute Komponenten und Einstellungen besitzt. Das Aufsetzen und Lernen des Syntax ist daf\u00fcr etwas schwieriger. Mithilfe von GitHub Actions automatisierte ich das Erstellen und Ver\u00f6ffentlichen der Dokumentation. Die Dokumentation richtete jeder selbst ein. W\u00e4hrend dieser Zeit ging ich im Klassenzimmer herum und half beim Aufsetzen. Ich half beim Einrichten der automatischen Ver\u00f6ffentlichung in GitHub. Um dies nicht jedes Mal erneut zu zeigen, erstellte ich hier auch eine kurze Anleitung dazu. Dadurch habe ich gelernt, dass es f\u00fcr Anf\u00e4nger einfacher ist, auf einer gegebenen Vorlage weiterzuarbeiten als von Grund auf etwas aufzubauen. Wenn ich n\u00e4chstes Mal meinem Unterstift eine Aufgabe geben muss, dann werde ich ihm Beispiele oder eine Vorlage beilegen, damit er ein Grundger\u00fcst hat. Da ich das Einrichten der GitHub Seite schon sehr oft gemacht hatte, konnte ich das ohne Schwierigkeiten erledigen. Zus\u00e4tzlich hatte ich von der letzten Projektarbeit bereits eine Vorlage f\u00fcr MkDocs. Merksatz: Anleitungen zu schreiben hilft, das Thema zu vertiefen und genauer zu verstehen. Vorlagen sind f\u00fcr Anf\u00e4nger einfacher zu verstehen als von Grund auf etwas aufzubauen. Mir ist aufgefallen, dass das Lernjournal mehrere Anforderungen besitzt. Um diese im \u00dcberblick zu behalten, erstellte ich eine Liste. Nach der Checkliste ist dieses und die folgenden Journale aufgebaut.","title":"Dokumentation eingerichtet"},{"location":"Reflexion/001_Woche/#docker-angeschaut","text":"F\u00fcr die Dokumentation und unser PHP-Projekt werden wir Docker verwenden. So kommt es nicht drauf an, ob Windows oder Linux als Betriebssystem verwendet wird. Zudem haben alle Beteiligten dieselbe PHP-Version und k\u00f6nnen so Fehler besser finden. Da ich Docker bereits kenne, konnte ich mir die Dokumentation durchlesen und mir die wichtigsten Befehle merken. Ich habe mir die Dokumentation von Docker und Docker Compose durchgelesen. Die wichtigsten Komponenten notierte ich mir. Gelernt habe ich, dass Docker f\u00fcr das Beheben von Sicherheitsl\u00fccken unheimlich n\u00fctzlich ist. Da Docker Container isoliert sind, k\u00f6nnen sie nicht auf andere Container zugreifen. Wenn ein Container gehackt wird, dann kann er nur auf die Daten des Containers zugreifen, nicht aber auf die Daten der anderen Container. F\u00fcr das L\u00f6sen einer Sicherheitsl\u00fccke im Programm, das im Container l\u00e4uft, muss nur der Container mit einem Patch neu gestartet werden. Merksatz: Mithilfe Docker kann eine einheitliche Umgebung erstellt werden. Docker und virtuelle Maschinen sollte man nicht mischen. In meinem Unternehmen wird Docker nicht verwendet, da alle dieselbe Installation haben und auf Windows arbeiten. Dies erlaubt keine Pr\u00e4ferenzen. Zus\u00e4tzlich haben wir nur einen Server, was das Isolieren unn\u00f6tig macht.","title":"Docker angeschaut"},{"location":"Reflexion/001_Woche/#php-aufgesetzt","text":"In diesem Modul verwenden wir PHP, was nat\u00fcrlich auch eine Installation von PHP ben\u00f6tigt. Wie bereits erw\u00e4hnt, haben wir PHP \u00fcber Docker installiert . Zus\u00e4tzlich zu PHP ist auch eine Datenbank hinterlegt. Diese Datenbank wird von Adminer verwaltet. Es ist eine Alternative , welche sich leichter bedienen l\u00e4sst als phpMyAdmin. F\u00fcr die Installation von PHP mit Docker bekamen wir eine Vorlage von Herrn Inauen. Diese Vorlage beinhaltet bereits eine docker-compose.yml Datei, welche die Container erstellt. Aufsetzen machte jeder selbst, da man eigentlich nur den Container ausf\u00fchren musste. Merksatz: Docker sollte \u00fcber All-In-One Installationen ( XAMPP ) bevorzugt werden. Eine einheitliche Verwaltung von Entwicklungstools vereinfacht das Fehler finden. Ich pers\u00f6nlich pr\u00e4feriere phpMyAdmin , da ich damit schon Erfahrung habe. Mit Adminer besch\u00e4ftigte ich mich aber auch und konnte es bedienen. Beide Benutzeroberfl\u00e4chen finde ich vom Aussehen jedoch veraltet . Ich hoffe, dass die Entwickler in Zukunft etwas Moderneres erstellen. Mein eigenes Hosting von MariaDB l\u00e4uft \u00fcber phpMyAdmin, weswegen ich dies besser kenne. Im Betrieb verwenden wir SQL Server und PostgreSQL . Zum Managen verwenden wir jedoch die offiziellen Tools von Microsoft ( SSMS ) und PostgreSQL ( pgAdmin ). Den Syntax einer weiteren Datenbank zu kennen ist f\u00fcr mich sehr wichtig, da ich in Zukunft mit anderen Datenbanken arbeiten m\u00f6chte.","title":"PHP aufgesetzt"},{"location":"Reflexion/001_Woche/#php-basics","text":"Um die Grundlagen von PHP zu verstehen, habe ich mir unterschiedliche Dokumentationen \u00fcber PHP durchgelesen. Den Inhalt der Seiten fasste ich in einer Zusammenfassung zusammen. In der habe ich Beispiele erstellt und beschrieben. Die Ausgaben zeigte ich auch, damit man das Skript nicht selbst ausf\u00fchren muss. Im Unterricht verwenden wir die PHP Einfach Seite. Sie ist sehr gut f\u00fcr Anf\u00e4nger geeignet, da sie die Grundlagen erkl\u00e4rt und nicht zu kompliziert ist. Der Inhalt der ersten Kapitel geht es um das Ausgeben von Werten, Schreiben von Kommentaren und den Umgang mit Variablen. Es gibt aber auch Abschnitte \u00fcber SQL und erweiterte PHP-Methoden. Zus\u00e4tzlich verwendete ich W3School , was f\u00fcr mich eine etwas \u00fcbersichtlichere Seite ist. Den Unterschied zwischen Funktion und Methode habe ich gelernt. Bisher habe ich einfach akzeptiert, dass etwas mit Name und danach zwei Klammern name() eine Methode ist. Dies ist jedoch nur der Fall, wenn die Methode in einer Klasse oder einem Objekt definiert ist. Eine Funktion ist eine Methode, die nicht in einer Klasse oder einem Objekt definiert ist. Da PHP auch ausserhalb von Klassen verwendet werden kann, ist es wichtig zu wissen, wie man dies fachbegrifflich nennt. Merksatz: Eine Methode ist eigentlich eine Funktion, die im Kontext einer Klasse oder eines Objekts verwendet wird. ~ StackOverflow Mir ist aufgefallen, dass ich vom \u00dcK ( M307 ) alle Basics bereits kenne. Dort haben wir eigentlich alles, was auf der PHP-Einfach Seite steht, schon \u00fcberflogen. Sp\u00e4ter in diesem Modul werden wir jedoch Fortgeschritteneres machen. F\u00fcr das ist es notwendig, dass die Grundlagen sitzen.","title":"PHP Basics"},{"location":"Reflexion/002_Woche/","tags":["Reflexion"],"text":"2. Woche 25.08.2022 # Zusammenfassung Docker Auftr\u00e4ge Was ist YAML Images anzeigen MySQL Struktur PHP Rechnen PHP Arrays PHP HTTP Parameter Docker Auftr\u00e4ge # Unser Wissen \u00fcber Docker haben wir anhand von unterschiedlichen Aufgaben aufgefrischt. Zuerst dokumentierte ich die wichtigsten Befehle und was der Sinn und Zweck einer YAML-Datei ist. Den Aufbau des Basisprojektes schauten wir im Unterricht an. Dort starteten wir alle Containers und \u00f6ffneten die Webinterface. Als n\u00e4chstes habe ich Whalesay und Hello-World Images auf meinem Rechner installiert, ausgef\u00fchrt und dokumentiert. Zum Schluss habe ich einen MySQL -Container aufgesetzt und mich damit \u00fcber die Konsole verbunden. F\u00fcr die Dokumentationen habe ich die offizielle Docker und RedHat Seiten verwendet. Diese haben meist ausf\u00fchrliche und verst\u00e4ndliche Beschreibungen mit funktionst\u00fcchtigen Beispielen. Die Auftr\u00e4ge waren aus einem PDF, welche wir im Unterricht erhalten haben. Die Auftr\u00e4ge waren sehr gut strukturiert und haben mir geholfen, mein bestehendes Wissen zu vertiefen. Wie die Struktur des Projektes ist, besprachen wir in der Klasse gemeinsam. Durch die Aufgaben habe ich gelernt, wie man Container im Hintergrund ausf\u00fchrt und damit interagiert. Dazu waren die Befehle ausserordentlich hilfreich, da ich so sehen konnte was ausgef\u00fchrt wird und wie der Container heisst. Das Verbinden zu einem Container war f\u00fcr mich komplett neu und lernte somit sehr vile \u00fcber das Networking von Docker. Den Auftrag habe ich \u00fcber die Konsole gemacht, was auf Zeit sehr aufw\u00e4ndig war. N\u00e4chstes Mal w\u00fcrde ich ein Compose File erstellen, um die Container zu starten, da so die Umgebungsvariablen sofort ersichtlich sind. Whalesay kannte ich zuvor schon von Linuxdistributionen ( Cowsay ), jedoch nicht in dieser modifizierten Form. Merksatz: YAML ist eine Sprache zur Serialisierung von Daten, die h\u00e4ufig zum Schreiben von Konfigurationsdateien verwendet wird. Container k\u00f6nnen mithilfe von docker images aufgelistet werden. Mir ist aufgefallen, dass wir Applikationsentwickler Docker gar nie als richtiges Modul behandelt haben, sondern es als selbstverst\u00e4ndliches K\u00f6nnen angesehen haben. Aus diesem Grund denke ich, dass es sehr wichtig ist, dass wir uns mit Docker auseinandersetzen und verstehen. Ich habe mich sehr gefreut, dass wir diese Woche mit Docker Auftr\u00e4ge begonnen haben, da ich so mein Wissen vertiefen konnte. PHP Rechnen # In jeder Programmiersprache ist es notwendig, dass man die grundlegenden Rechnungsoperatoren kennt. Wie man mit Variablen rechnet schauten wir deshalb in dieser Woche genauer an. Dazu erstellte ich eine Dokumentation \u00fcber die bekannten Operatoren . In der Dokumentation war es mir wichtig, dass es Beispiele hat, da diese schneller \u00fcberflogen werden k\u00f6nnen. Als Vorlage verwendete ich PHP Einfach , was bereits Beispiele enthielt. Diese Beispiele schrieb ich mit meinen Pr\u00e4ferenzen ab. Mithilfe meines eigenen Wissens erweiterte ich diese, damit sie vollst\u00e4ndiger sind. Bitwise Operatoren habe ich jedoch weggelassen, da sie selten verwendet werden. Bei diesen Aufgaben habe ich gelernt wie man Strings verkn\u00fcpft. Alle anderen Operatoren verhalten sich gleich wie in anderen mir bekannten Programmiersprachen. Ich kann nun mit Variablen umgehen und sie nach belieben anwenden. F\u00fcr mich war bisher nicht klar wieso Strings mit einem Punkt zusammengef\u00fcgt werden. Nun weiss ich den Grund daf\u00fcr und finde es sogar Sinnvoll. Merksatz: Rechenoperatoren sind in grunds\u00e4tzlich in allen Programmiersprachen dieselben. Strings werden in PHP mit einem Punkt . zusammengef\u00fcgt. Bemerkt habe ich, dass Programmiersprachen grunds\u00e4tzlich alle dieselben Rechenoperatoren haben. Die einzigen Unterschiede sind die Syntax und die Semantik . Die Semantik ist die Bedeutung der Operatoren. In PHP ist es zum Beispiel so, dass ein Punkt zwischen zwei Strings die beiden Strings zusammenf\u00fcgt. Die Syntax ist die Schreibweise der Operatoren. Alle anderen Operatoren funktionieren in PHP gleich wie in anderen Sprachen auch. PHP Arrays # Sehr oft arbeitet man nicht nur mit einer Variable alleine sondern braucht eine Sammlung von Werten. Dazu werden in PHP Arrays verwendet, welche etwas Komplexer sind als man sich gew\u00f6hnt ist. Dabei wird zwischen Numerisch und Assoziativ unterschieden. Die wichtigsten Funktionen , welche f\u00fcr die Arbeit mit Arrays ben\u00f6tigt werden schrieb ich mir auf. Als Zusatzaufgabe habe ich einen eigenen Sortieralgorithmus anhand von Quicksort implementiert. Als Lehrmittel verwendeten wir PHP Einfach um die Aufgaben herauszusuchen. Von dort schrieb ich die einfachen Anwendungen heraus. F\u00fcr die Sammlung aller Funktionen war mit GitHub Copilot sehr behilflich. Dieser Schlug mir gleich eine Auflistung der Funktionen vor, anhand welchen ich dann die Beispiele machen konnte. Ich habe gelernt, dass Arrays in PHP nicht vergleichbar mit Arrays aus anderen Sprachen sind. Sie sind eher eine ArrayList anstatt ein Array mit einer fixen L\u00e4nge. Beim schreiben des Sortieralgorithmus lernte ich, dass PHP standardm\u00e4ssig alle Attribute als Call-By-Value \u00fcbergeben werden. Zus\u00e4tzlich ist das \u00dcberladen von Methoden nicht m\u00f6glich. Merksatz: Numerisch und Assoziativ sind die zwei verschieden Arten von Arrays die PHP unterst\u00fctzt. In PHP muss jede Methode einen anderen Namen besitzend, da es keine Methoden\u00fcberschreibung gibt. In PHP muss & verwendet werden um Parameter als Call-By-Reference zu \u00fcbergeben. Ansonsten werden sie als Call-By-Value \u00fcbergeben. Mir ist aufgefallen, dass PHP sich als OOP-Sprache ausgibt, jedoch in Wirklichkeit gar keine ist. Sie hat zwar Klassen, welche vererbt werden k\u00f6nnen, jedoch keine der wichtigen Eigenschaften von Methoden. HTTP Parameter # Was HTTP-Parameter sind und wie diese verwendet werden k\u00f6nnen, lernten wir in dieser Woche. Beim verwenden muss man beachten, dass man nicht vorhandene Schl\u00fcssel nicht abfragt. Die zwei Parameter GET und POST haben unterschiedliche Charakteristiken mit Vor- und Nachteilen. F\u00fcr eine schnelle \u00dcbersicht erstellte ich eine Tabelle . Je nach Anforderungen kann dann abgeglichen werden was f\u00fcr ein Parameter verwendet werden sollte. Das Anwenden lernten wir anhand von Beispielen , in welchen wir ein Formular erstellen mussten. Die Werte des Formulars werden beim Absenden ausgegeben. Mit Learning-By-Doing erlebten wir Hindernisse und wie diese behoben werden k\u00f6nnen. Die Eigenschaften der Parameter stammen aus dem Internet und von der Pr\u00e4sentation aus dem Unterricht. Ein Verst\u00e4ndnis \u00fcber HTTP-Parameter hatte ich bereits aus dem PHP-\u00dcK , in welchem wir diese verwendet haben. Die Unterschiede zwischen GET und POST habe ich nun besser verstanden. Die Unterschiede zwischen den beiden Parameter sind, dass GET die Parameter in der URL anzeigt und POST die Parameter im Body der HTTP-Anfrage. Beim GET-Parameter ist die L\u00e4nge der Parameter begrenzt, da diese in der URL angezeigt werden. Beim POST-Parameter ist die L\u00e4nge der Parameter nicht begrenzt, da diese im Body der HTTP-Anfrage angezeigt werden. Merksatz: Vor dem Zugreifen auf einen Parameter muss \u00fcberpr\u00fcft werden, ob dieser \u00fcberhaupt gesetzt wurde. GET und POST sind die zwei HTTP-Methoden, die in PHP verwendet werden k\u00f6nnen. Herausgestochen ist mir, dass nur zwei HTTP-Methoden unterst\u00fctzt werden. Es gibt noch viele weitere Methoden , welche aber nicht unterst\u00fctzt werden. Die HTTP-Methoden sind GET, POST, PUT, DELETE, HEAD, OPTIONS, CONNECT und TRACE. Sie k\u00f6nnen zwar \u00fcber die $_SERVER Variable abgefragt werden, jedoch nicht \u00fcber SuperGlobals.","title":"2. Woche"},{"location":"Reflexion/002_Woche/#2-woche-25082022","text":"Zusammenfassung Docker Auftr\u00e4ge Was ist YAML Images anzeigen MySQL Struktur PHP Rechnen PHP Arrays PHP HTTP Parameter","title":"2. Woche 25.08.2022"},{"location":"Reflexion/002_Woche/#docker-auftrage","text":"Unser Wissen \u00fcber Docker haben wir anhand von unterschiedlichen Aufgaben aufgefrischt. Zuerst dokumentierte ich die wichtigsten Befehle und was der Sinn und Zweck einer YAML-Datei ist. Den Aufbau des Basisprojektes schauten wir im Unterricht an. Dort starteten wir alle Containers und \u00f6ffneten die Webinterface. Als n\u00e4chstes habe ich Whalesay und Hello-World Images auf meinem Rechner installiert, ausgef\u00fchrt und dokumentiert. Zum Schluss habe ich einen MySQL -Container aufgesetzt und mich damit \u00fcber die Konsole verbunden. F\u00fcr die Dokumentationen habe ich die offizielle Docker und RedHat Seiten verwendet. Diese haben meist ausf\u00fchrliche und verst\u00e4ndliche Beschreibungen mit funktionst\u00fcchtigen Beispielen. Die Auftr\u00e4ge waren aus einem PDF, welche wir im Unterricht erhalten haben. Die Auftr\u00e4ge waren sehr gut strukturiert und haben mir geholfen, mein bestehendes Wissen zu vertiefen. Wie die Struktur des Projektes ist, besprachen wir in der Klasse gemeinsam. Durch die Aufgaben habe ich gelernt, wie man Container im Hintergrund ausf\u00fchrt und damit interagiert. Dazu waren die Befehle ausserordentlich hilfreich, da ich so sehen konnte was ausgef\u00fchrt wird und wie der Container heisst. Das Verbinden zu einem Container war f\u00fcr mich komplett neu und lernte somit sehr vile \u00fcber das Networking von Docker. Den Auftrag habe ich \u00fcber die Konsole gemacht, was auf Zeit sehr aufw\u00e4ndig war. N\u00e4chstes Mal w\u00fcrde ich ein Compose File erstellen, um die Container zu starten, da so die Umgebungsvariablen sofort ersichtlich sind. Whalesay kannte ich zuvor schon von Linuxdistributionen ( Cowsay ), jedoch nicht in dieser modifizierten Form. Merksatz: YAML ist eine Sprache zur Serialisierung von Daten, die h\u00e4ufig zum Schreiben von Konfigurationsdateien verwendet wird. Container k\u00f6nnen mithilfe von docker images aufgelistet werden. Mir ist aufgefallen, dass wir Applikationsentwickler Docker gar nie als richtiges Modul behandelt haben, sondern es als selbstverst\u00e4ndliches K\u00f6nnen angesehen haben. Aus diesem Grund denke ich, dass es sehr wichtig ist, dass wir uns mit Docker auseinandersetzen und verstehen. Ich habe mich sehr gefreut, dass wir diese Woche mit Docker Auftr\u00e4ge begonnen haben, da ich so mein Wissen vertiefen konnte.","title":"Docker Auftr\u00e4ge"},{"location":"Reflexion/002_Woche/#php-rechnen","text":"In jeder Programmiersprache ist es notwendig, dass man die grundlegenden Rechnungsoperatoren kennt. Wie man mit Variablen rechnet schauten wir deshalb in dieser Woche genauer an. Dazu erstellte ich eine Dokumentation \u00fcber die bekannten Operatoren . In der Dokumentation war es mir wichtig, dass es Beispiele hat, da diese schneller \u00fcberflogen werden k\u00f6nnen. Als Vorlage verwendete ich PHP Einfach , was bereits Beispiele enthielt. Diese Beispiele schrieb ich mit meinen Pr\u00e4ferenzen ab. Mithilfe meines eigenen Wissens erweiterte ich diese, damit sie vollst\u00e4ndiger sind. Bitwise Operatoren habe ich jedoch weggelassen, da sie selten verwendet werden. Bei diesen Aufgaben habe ich gelernt wie man Strings verkn\u00fcpft. Alle anderen Operatoren verhalten sich gleich wie in anderen mir bekannten Programmiersprachen. Ich kann nun mit Variablen umgehen und sie nach belieben anwenden. F\u00fcr mich war bisher nicht klar wieso Strings mit einem Punkt zusammengef\u00fcgt werden. Nun weiss ich den Grund daf\u00fcr und finde es sogar Sinnvoll. Merksatz: Rechenoperatoren sind in grunds\u00e4tzlich in allen Programmiersprachen dieselben. Strings werden in PHP mit einem Punkt . zusammengef\u00fcgt. Bemerkt habe ich, dass Programmiersprachen grunds\u00e4tzlich alle dieselben Rechenoperatoren haben. Die einzigen Unterschiede sind die Syntax und die Semantik . Die Semantik ist die Bedeutung der Operatoren. In PHP ist es zum Beispiel so, dass ein Punkt zwischen zwei Strings die beiden Strings zusammenf\u00fcgt. Die Syntax ist die Schreibweise der Operatoren. Alle anderen Operatoren funktionieren in PHP gleich wie in anderen Sprachen auch.","title":"PHP Rechnen"},{"location":"Reflexion/002_Woche/#php-arrays","text":"Sehr oft arbeitet man nicht nur mit einer Variable alleine sondern braucht eine Sammlung von Werten. Dazu werden in PHP Arrays verwendet, welche etwas Komplexer sind als man sich gew\u00f6hnt ist. Dabei wird zwischen Numerisch und Assoziativ unterschieden. Die wichtigsten Funktionen , welche f\u00fcr die Arbeit mit Arrays ben\u00f6tigt werden schrieb ich mir auf. Als Zusatzaufgabe habe ich einen eigenen Sortieralgorithmus anhand von Quicksort implementiert. Als Lehrmittel verwendeten wir PHP Einfach um die Aufgaben herauszusuchen. Von dort schrieb ich die einfachen Anwendungen heraus. F\u00fcr die Sammlung aller Funktionen war mit GitHub Copilot sehr behilflich. Dieser Schlug mir gleich eine Auflistung der Funktionen vor, anhand welchen ich dann die Beispiele machen konnte. Ich habe gelernt, dass Arrays in PHP nicht vergleichbar mit Arrays aus anderen Sprachen sind. Sie sind eher eine ArrayList anstatt ein Array mit einer fixen L\u00e4nge. Beim schreiben des Sortieralgorithmus lernte ich, dass PHP standardm\u00e4ssig alle Attribute als Call-By-Value \u00fcbergeben werden. Zus\u00e4tzlich ist das \u00dcberladen von Methoden nicht m\u00f6glich. Merksatz: Numerisch und Assoziativ sind die zwei verschieden Arten von Arrays die PHP unterst\u00fctzt. In PHP muss jede Methode einen anderen Namen besitzend, da es keine Methoden\u00fcberschreibung gibt. In PHP muss & verwendet werden um Parameter als Call-By-Reference zu \u00fcbergeben. Ansonsten werden sie als Call-By-Value \u00fcbergeben. Mir ist aufgefallen, dass PHP sich als OOP-Sprache ausgibt, jedoch in Wirklichkeit gar keine ist. Sie hat zwar Klassen, welche vererbt werden k\u00f6nnen, jedoch keine der wichtigen Eigenschaften von Methoden.","title":"PHP Arrays"},{"location":"Reflexion/002_Woche/#http-parameter","text":"Was HTTP-Parameter sind und wie diese verwendet werden k\u00f6nnen, lernten wir in dieser Woche. Beim verwenden muss man beachten, dass man nicht vorhandene Schl\u00fcssel nicht abfragt. Die zwei Parameter GET und POST haben unterschiedliche Charakteristiken mit Vor- und Nachteilen. F\u00fcr eine schnelle \u00dcbersicht erstellte ich eine Tabelle . Je nach Anforderungen kann dann abgeglichen werden was f\u00fcr ein Parameter verwendet werden sollte. Das Anwenden lernten wir anhand von Beispielen , in welchen wir ein Formular erstellen mussten. Die Werte des Formulars werden beim Absenden ausgegeben. Mit Learning-By-Doing erlebten wir Hindernisse und wie diese behoben werden k\u00f6nnen. Die Eigenschaften der Parameter stammen aus dem Internet und von der Pr\u00e4sentation aus dem Unterricht. Ein Verst\u00e4ndnis \u00fcber HTTP-Parameter hatte ich bereits aus dem PHP-\u00dcK , in welchem wir diese verwendet haben. Die Unterschiede zwischen GET und POST habe ich nun besser verstanden. Die Unterschiede zwischen den beiden Parameter sind, dass GET die Parameter in der URL anzeigt und POST die Parameter im Body der HTTP-Anfrage. Beim GET-Parameter ist die L\u00e4nge der Parameter begrenzt, da diese in der URL angezeigt werden. Beim POST-Parameter ist die L\u00e4nge der Parameter nicht begrenzt, da diese im Body der HTTP-Anfrage angezeigt werden. Merksatz: Vor dem Zugreifen auf einen Parameter muss \u00fcberpr\u00fcft werden, ob dieser \u00fcberhaupt gesetzt wurde. GET und POST sind die zwei HTTP-Methoden, die in PHP verwendet werden k\u00f6nnen. Herausgestochen ist mir, dass nur zwei HTTP-Methoden unterst\u00fctzt werden. Es gibt noch viele weitere Methoden , welche aber nicht unterst\u00fctzt werden. Die HTTP-Methoden sind GET, POST, PUT, DELETE, HEAD, OPTIONS, CONNECT und TRACE. Sie k\u00f6nnen zwar \u00fcber die $_SERVER Variable abgefragt werden, jedoch nicht \u00fcber SuperGlobals.","title":"HTTP Parameter"},{"location":"Reflexion/003_Woche/","tags":["Reflexion"],"text":"3. Woche 01.09.2022 # Zusammenfassung Datentypen Vergleiche Schleifen Formular Datentypen # Es ist essentiell, dass man die Datentypen eine Programmiersprache kennt, damit man das richtige Werkzeug f\u00fcr den Anwendungsfall verwendet. Aus diesem Grund schauten wir in dieser Woche die Datentypen an. F\u00fcr die Datentypen erstellte ich eine Tabelle mit einer kurzen Beschreibung. Wie Typen konvertiert sind und wie man dieses Verhalten unterbindet dokumentierte ich auch. Im Unterricht schauten wir uns eine Pr\u00e4sentation \u00fcber die Datentypen an. Aus dieser erstellte ich die Tabelle . Im Internet sammelte ich weiteres Wissen um noch mehr Informationen zu den Datentypen zu erhalten. Datentypen waren nur eine beil\u00e4ufiges Thema, weswegen es auch nur im Appendix auftaucht. Ich habe gelernt, dass PHP auch Typisierung erlaubt. Das ist f\u00fcr mich neu, da ich bisher nur den Typ angegeben habe, dieser jedoch nicht \u00fcberpr\u00fcft wurde. Ich werde in Zukunft Typisierung verwenden, da es mir hilft, Fehler zu vermeiden. Zudem ist es f\u00fcr aussenstehende Personen leichter zu verstehen, was die Funktionen machen und ben\u00f6tigen. Merksatz: Das \u00fcberpr\u00fcfen von Typen muss explizit \u00fcber declare(strict_types=1); aktiviert werden. Datenstrukturen haben unterschiedliche Anwendungsf\u00e4lle, in welchen sie Vorteilhaft verwendet werden k\u00f6nnen. Wenn wir im Betrieb keine Typisierung verwenden w\u00fcrden, dann g\u00e4be es ein Chaos , da nicht klar ist was die Methoden machen und zur\u00fcckgeben. Zudem w\u00fcrde es zu Fehlern kommen, da die falschen Datentypen \u00fcbergeben werden. Genau aus diesem Grund hatten wir im letzten Semester das Modul 411 , in welchem wir Datenstrukturen anschauten. Dort lernten wir, was f\u00fcr eine Struktur f\u00fcr welchen Anwendungsfall am besten geeignet ist. Dieses Wissen kann ich nun in PHP anwenden. Vergleiche # In PHP gibt es verschiedene Vergleichsoperatoren . Dabei unterscheidet man auch zwischen logischen Operatoren . Mithilfe dieser kann der Fluss eines Programmes gezielt gesteuert werden. Dadurch k\u00f6nnen Codebl\u00f6cke nur durch das zutreffen einer Bedingung ausgef\u00fchrt werden. Dazu schrieb ich mir die Operatoren mit Beispielen auf. Ausserdem dokumentierte ich die verschiedenen Statements. Vergleiche mussten wir im Selbststudium als Hausaufgabe anschauen. Dazu verwendete ich mehrere Internetseiten aus welchen ich eine Zusammenfassung erstellte. Dabei war W3Schools mit Abstand am hilfreichsten, da dort bereits Beispiele gegeben waren. Ausserdem konnte ich dort die Vergleiche mit einem interaktiven Editor testen. Die anderen Seiten waren eher f\u00fcr die Theorie und die Erkl\u00e4rung der Vergleiche. An Statements kann man schwer etwas \u00c4ndern, weswegen auch diese in PHP gleich sind, wie in anderen Sprachen. Aus diesem Grund war es nichts neues f\u00fcr mich. Die zwei unterschiedlichen Gleichheitsoperatoren waren f\u00fcr mich neu. Ich habe gelernt, dass == nur den Wert vergleicht und === den Wert und den Typ. Das ist f\u00fcr mich wichtig, da ich nun weiss, dass ich bei der \u00dcberpr\u00fcfung von Variablen den Typ mit ber\u00fccksichtigen muss. Merksatz: F\u00fcr Wert vergleiche wird == verwendet, w\u00e4hrend === f\u00fcr Wert und Typ verwendet wird. Logische Operatoren verkn\u00fcpfen mehrere Vergleiche miteinander. Mehrere If -Statements k\u00f6nnen gegebenen Falls mit else if oder switch vereinfacht werden. Aufgefallen ist mir, dass PHP f\u00fcr die Zeichen ( && ) auch eine schriftliche Variante ( and ) hat. Das ist f\u00fcr mich neu, da ich bisher nur die Zeichen verwendet habe. Schriftlich ist f\u00fcr das lesen einfacher, jedoch ungew\u00f6hnlicher . Auch gibt es XOR was ich bisher noch in keiner Sprache gesehen habe. Schleifen # Schleifen werden verwendet um Code zu wiederholen . In PHP gibt es verschiedene Schleifen, welche alle ihre eigenen Vor- und Nachteile haben. In Folge dessen schaute ich mir die Schleifen genauer an, indem ich den Syntax aufschrieb und die Unterschiede aufzeigte. Die Schleifen sind in PHP gleich wie in anderen Sprachen . Gleich wie Vergleiche habe ich dieses Thema selbstst\u00e4ndig erarbeitet. Dabei war GitHub Copilot bei der Erstellung der Beispiele sehr hilfreich. Automatisch wurden die Beispiele erstellt und ich musste nur noch die Schleifen anpassen. Beim verwenden eines solchen Tools ist es wichtig, dass man das Prinzip versteht, da man ansonsten nicht weiss, ob die Ausgabe qualitativ ist. Aus dem Grund, dass das ganze Thema fast identisch zu anderen Sprachen ist, habe ich praktisch nichts neues gelernt. Die Arten und Anwendungsf\u00e4lle kannte ich bereits. Ich pers\u00f6nlich finde, dass ein Kurztest zu diesem Thema sinnvoller gewesen w\u00e4re als eine Dokumentation. Merksatz: for -Schleifen werden verwendet, wenn die Anzahl der Wiederholungen bekannt ist. F\u00fcr eine Sammlung von Elementen wird vorzugsweise eine foreach -Schleife verwendet. Bemerkt habe ich, dass Schleifen grunds\u00e4tzlich in allen Programmiersprachen gleich sind. Das ist f\u00fcr mich wichtig, da ich nun weiss, dass grundlegende Konzepte in allen Sprachen gleich sind. Der Vorteil davon ist, dass ich nun eine neue Hochschulsprache lernen k\u00f6nnte und weiss was f\u00fcr Schleifen existieren. Formular # Letzte Woche schauten wir und die HTTP-Parameter an. Um den Umgang damit zu \u00fcben, schrieb ich mir ein Formular auf. Dabei verwendete ich die GET- und POST-Parameter . Da bei Formularen auf Sicherheit geachtet werden muss erstellte ich eine Zusammenfassung von Sicherheitsl\u00fccken . Diese sind jedoch noch in Arbeit und werden in den n\u00e4chsten Wochen fertiggestellt. Wichtig war mir jedoch, dass Cross-Site-Scripting nicht \u00fcber mein Formular m\u00f6glich ist, was ich auch erfolgreich umsetzte. Bevor ich mit dem Auftrag begann, habe ich mir m\u00f6gliche Sicherheitsprobleme aufgeschrieben und mich dar\u00fcber informiert. Sobald ich wusste auf was ich achten muss wendete ich mich dem Formular. Von Herr Inauen hatten wir ein Beispiel bekommen, welches man umsetzen kann. Ich entschied mich jedoch ein etwas ausf\u00fchrlicheres zu machen, welche die gleichen Eingabefelder verwendet. Letzte Woche habe ich bereits HTTP-Parameter angeschaut und gelernt wie man mit diesen umgeht. Aus diesem Grund sind keine unerwarteten \u00dcberraschungen aufgetaucht. Neu war mir die Unterteilung von Formularen mit HTML und PHP getrennt oder zusammen. Ich pers\u00f6nlich finde, dass zusammen sch\u00f6ner ist, da es eine Komponente bildet, welche unabh\u00e4ngig von anderen Komponenten ist. Formulare werden in einer Webapplikation st\u00e4ndig verwendet. Deswegen ist es wichtig, dass man diese richtig beherrscht. Merksatz: Das HTML und PHP von Formularen kann unterteilt oder zusammengenommen werden. Formulare sollten mit einem CSRF Token gesch\u00fctzt werden, um sicherzustellen, dass der Benutzer die Anfrage gesendet hat. Eingaben sollten in HTML Charakter umgewandelt werden, um XSS zu verhindern. Als Fazit w\u00fcrde ich sagen, dass ich das Thema Formulare bereits gut beherrschte. Um es f\u00fcr mich selbst spannender zu machen vordere ich mich heraus, wie mit den Sicherheitsfeatures. Diese zu verstehen und auch zu implementieren ist f\u00fcr mich ein neues Thema. Ich bin gespannt wie es weitergeht.","title":"3. Woche"},{"location":"Reflexion/003_Woche/#3-woche-01092022","text":"Zusammenfassung Datentypen Vergleiche Schleifen Formular","title":"3. Woche 01.09.2022"},{"location":"Reflexion/003_Woche/#datentypen","text":"Es ist essentiell, dass man die Datentypen eine Programmiersprache kennt, damit man das richtige Werkzeug f\u00fcr den Anwendungsfall verwendet. Aus diesem Grund schauten wir in dieser Woche die Datentypen an. F\u00fcr die Datentypen erstellte ich eine Tabelle mit einer kurzen Beschreibung. Wie Typen konvertiert sind und wie man dieses Verhalten unterbindet dokumentierte ich auch. Im Unterricht schauten wir uns eine Pr\u00e4sentation \u00fcber die Datentypen an. Aus dieser erstellte ich die Tabelle . Im Internet sammelte ich weiteres Wissen um noch mehr Informationen zu den Datentypen zu erhalten. Datentypen waren nur eine beil\u00e4ufiges Thema, weswegen es auch nur im Appendix auftaucht. Ich habe gelernt, dass PHP auch Typisierung erlaubt. Das ist f\u00fcr mich neu, da ich bisher nur den Typ angegeben habe, dieser jedoch nicht \u00fcberpr\u00fcft wurde. Ich werde in Zukunft Typisierung verwenden, da es mir hilft, Fehler zu vermeiden. Zudem ist es f\u00fcr aussenstehende Personen leichter zu verstehen, was die Funktionen machen und ben\u00f6tigen. Merksatz: Das \u00fcberpr\u00fcfen von Typen muss explizit \u00fcber declare(strict_types=1); aktiviert werden. Datenstrukturen haben unterschiedliche Anwendungsf\u00e4lle, in welchen sie Vorteilhaft verwendet werden k\u00f6nnen. Wenn wir im Betrieb keine Typisierung verwenden w\u00fcrden, dann g\u00e4be es ein Chaos , da nicht klar ist was die Methoden machen und zur\u00fcckgeben. Zudem w\u00fcrde es zu Fehlern kommen, da die falschen Datentypen \u00fcbergeben werden. Genau aus diesem Grund hatten wir im letzten Semester das Modul 411 , in welchem wir Datenstrukturen anschauten. Dort lernten wir, was f\u00fcr eine Struktur f\u00fcr welchen Anwendungsfall am besten geeignet ist. Dieses Wissen kann ich nun in PHP anwenden.","title":"Datentypen"},{"location":"Reflexion/003_Woche/#vergleiche","text":"In PHP gibt es verschiedene Vergleichsoperatoren . Dabei unterscheidet man auch zwischen logischen Operatoren . Mithilfe dieser kann der Fluss eines Programmes gezielt gesteuert werden. Dadurch k\u00f6nnen Codebl\u00f6cke nur durch das zutreffen einer Bedingung ausgef\u00fchrt werden. Dazu schrieb ich mir die Operatoren mit Beispielen auf. Ausserdem dokumentierte ich die verschiedenen Statements. Vergleiche mussten wir im Selbststudium als Hausaufgabe anschauen. Dazu verwendete ich mehrere Internetseiten aus welchen ich eine Zusammenfassung erstellte. Dabei war W3Schools mit Abstand am hilfreichsten, da dort bereits Beispiele gegeben waren. Ausserdem konnte ich dort die Vergleiche mit einem interaktiven Editor testen. Die anderen Seiten waren eher f\u00fcr die Theorie und die Erkl\u00e4rung der Vergleiche. An Statements kann man schwer etwas \u00c4ndern, weswegen auch diese in PHP gleich sind, wie in anderen Sprachen. Aus diesem Grund war es nichts neues f\u00fcr mich. Die zwei unterschiedlichen Gleichheitsoperatoren waren f\u00fcr mich neu. Ich habe gelernt, dass == nur den Wert vergleicht und === den Wert und den Typ. Das ist f\u00fcr mich wichtig, da ich nun weiss, dass ich bei der \u00dcberpr\u00fcfung von Variablen den Typ mit ber\u00fccksichtigen muss. Merksatz: F\u00fcr Wert vergleiche wird == verwendet, w\u00e4hrend === f\u00fcr Wert und Typ verwendet wird. Logische Operatoren verkn\u00fcpfen mehrere Vergleiche miteinander. Mehrere If -Statements k\u00f6nnen gegebenen Falls mit else if oder switch vereinfacht werden. Aufgefallen ist mir, dass PHP f\u00fcr die Zeichen ( && ) auch eine schriftliche Variante ( and ) hat. Das ist f\u00fcr mich neu, da ich bisher nur die Zeichen verwendet habe. Schriftlich ist f\u00fcr das lesen einfacher, jedoch ungew\u00f6hnlicher . Auch gibt es XOR was ich bisher noch in keiner Sprache gesehen habe.","title":"Vergleiche"},{"location":"Reflexion/003_Woche/#schleifen","text":"Schleifen werden verwendet um Code zu wiederholen . In PHP gibt es verschiedene Schleifen, welche alle ihre eigenen Vor- und Nachteile haben. In Folge dessen schaute ich mir die Schleifen genauer an, indem ich den Syntax aufschrieb und die Unterschiede aufzeigte. Die Schleifen sind in PHP gleich wie in anderen Sprachen . Gleich wie Vergleiche habe ich dieses Thema selbstst\u00e4ndig erarbeitet. Dabei war GitHub Copilot bei der Erstellung der Beispiele sehr hilfreich. Automatisch wurden die Beispiele erstellt und ich musste nur noch die Schleifen anpassen. Beim verwenden eines solchen Tools ist es wichtig, dass man das Prinzip versteht, da man ansonsten nicht weiss, ob die Ausgabe qualitativ ist. Aus dem Grund, dass das ganze Thema fast identisch zu anderen Sprachen ist, habe ich praktisch nichts neues gelernt. Die Arten und Anwendungsf\u00e4lle kannte ich bereits. Ich pers\u00f6nlich finde, dass ein Kurztest zu diesem Thema sinnvoller gewesen w\u00e4re als eine Dokumentation. Merksatz: for -Schleifen werden verwendet, wenn die Anzahl der Wiederholungen bekannt ist. F\u00fcr eine Sammlung von Elementen wird vorzugsweise eine foreach -Schleife verwendet. Bemerkt habe ich, dass Schleifen grunds\u00e4tzlich in allen Programmiersprachen gleich sind. Das ist f\u00fcr mich wichtig, da ich nun weiss, dass grundlegende Konzepte in allen Sprachen gleich sind. Der Vorteil davon ist, dass ich nun eine neue Hochschulsprache lernen k\u00f6nnte und weiss was f\u00fcr Schleifen existieren.","title":"Schleifen"},{"location":"Reflexion/003_Woche/#formular","text":"Letzte Woche schauten wir und die HTTP-Parameter an. Um den Umgang damit zu \u00fcben, schrieb ich mir ein Formular auf. Dabei verwendete ich die GET- und POST-Parameter . Da bei Formularen auf Sicherheit geachtet werden muss erstellte ich eine Zusammenfassung von Sicherheitsl\u00fccken . Diese sind jedoch noch in Arbeit und werden in den n\u00e4chsten Wochen fertiggestellt. Wichtig war mir jedoch, dass Cross-Site-Scripting nicht \u00fcber mein Formular m\u00f6glich ist, was ich auch erfolgreich umsetzte. Bevor ich mit dem Auftrag begann, habe ich mir m\u00f6gliche Sicherheitsprobleme aufgeschrieben und mich dar\u00fcber informiert. Sobald ich wusste auf was ich achten muss wendete ich mich dem Formular. Von Herr Inauen hatten wir ein Beispiel bekommen, welches man umsetzen kann. Ich entschied mich jedoch ein etwas ausf\u00fchrlicheres zu machen, welche die gleichen Eingabefelder verwendet. Letzte Woche habe ich bereits HTTP-Parameter angeschaut und gelernt wie man mit diesen umgeht. Aus diesem Grund sind keine unerwarteten \u00dcberraschungen aufgetaucht. Neu war mir die Unterteilung von Formularen mit HTML und PHP getrennt oder zusammen. Ich pers\u00f6nlich finde, dass zusammen sch\u00f6ner ist, da es eine Komponente bildet, welche unabh\u00e4ngig von anderen Komponenten ist. Formulare werden in einer Webapplikation st\u00e4ndig verwendet. Deswegen ist es wichtig, dass man diese richtig beherrscht. Merksatz: Das HTML und PHP von Formularen kann unterteilt oder zusammengenommen werden. Formulare sollten mit einem CSRF Token gesch\u00fctzt werden, um sicherzustellen, dass der Benutzer die Anfrage gesendet hat. Eingaben sollten in HTML Charakter umgewandelt werden, um XSS zu verhindern. Als Fazit w\u00fcrde ich sagen, dass ich das Thema Formulare bereits gut beherrschte. Um es f\u00fcr mich selbst spannender zu machen vordere ich mich heraus, wie mit den Sicherheitsfeatures. Diese zu verstehen und auch zu implementieren ist f\u00fcr mich ein neues Thema. Ich bin gespannt wie es weitergeht.","title":"Formular"},{"location":"Reflexion/004_Woche/","tags":["Reflexion"],"text":"4. Woche 08.09.2022 # Zusammenfassung SSR vs CSR CSR Projekt Dateien Do's and Don'ts (PHP) SSR vs CSR # PHP ist eine Serverseitige Programmiersprache. Um zu verstehen was dieser Satz bedeutet , mussten wir zuerst verstehen was Serverseitig bedeutet und was f\u00fcr Alternativen es gibt. Wir schauten uns die Begriffe SSR und CSR an und besprachen die Vor- und Nachteile. Damit wir uns mit dem Aufbau der beiden Begriffe genau auseinandersetzen mussten wir ein Diagramm \u00fcber CSR machen. Die Unterschiede besprachen wir zusammen in der Klasse und schrieben die Eigenschaften an die Wandtafel. F\u00fcr vertieftes Wissen nahm ich mir die Webseite Toptal zur Hilfe. Dort wurde die Unterschiede nochmal genauer erkl\u00e4rt. Das Diagramm wurde von mir mit Mermaid erstellt, was eine Alternative zu PlantUML ist. Ich wusste, dass es unterschiedliche Renderarten gibt und habe mich auch schonmal damit auseinandergesetzt. Was aber die genauen Argumente f\u00fcr die einzelnen Renderarten sind, wusste ich nicht. Wenn ich das n\u00e4chste Mal ein Projekt starte, dann werde ich mir nun zuerst \u00fcberlegen welche Renderart sinnvoll ist. Je nach dem k\u00f6nnte es f\u00fcr den Anwender einfacher sein, wenn ich eine andere Renderart w\u00e4hle. Diagramme mit Mermaid zu erstellen war f\u00fcr mich komplett neu, weswegen ich mich dort auch zuerst einlesen musste. Die grosse Akzeptanz von Mermaid hat mich \u00fcberrascht, was der Grund daf\u00fcr ist, dass ich es nun \u00f6fters verwenden werde. Merksatz: Serverseitiges rendern (SSR) ist die Voraussetzung f\u00fcr eine gutes SEO . Clientseitig rendern (CSR) erm\u00f6glicht eine bessere Performance und bessere UX . MkDocs unterst\u00fctzt kein direktes verbauen von PlantUML als Codeschnipsel . F\u00fcr Diagramme wird auf Mermaid gesetzt, was andere grosse Firmen ( GitHub ) auch machen. Somit war ich gezwungen es einmal auszuprobieren. Es ist sehr einfach zu bedienen und hat die gleichen Funktionalit\u00e4ten wie PlantUML. CSR Erweiterung # Als Aufgabe mussten wir ein CSR-Projekt erstellen. Dieses sollte Daten aus einem Backend laden und in einer Liste darstellen. \u00dcber einen Hinzuf\u00fcgen Knopf k\u00f6nnen weitere Entit\u00e4ten zur Liste hinzugef\u00fcgt werden. Die Schwierigkeit bei der ganzen Aufgabe war, dass es \u00fcber Ajax funktionieren sollte. Das heisst, dass die Daten \u00fcber JavaScript geladen werden und nicht \u00fcber PHP. Um zu sehen wie Grunds\u00e4tzlich ein CSR-Projekt aufgebaut ist schauten wir in der Klasse ein Beispielprojekt an. Dort wurden die Abfragen bereits mit Ajax umgesetzt, es hatte jedoch nur statische Daten. Dazu mussten wir uns mit der Ajax-Funktion $.ajax() auseinandersetzen. Diese Funktion ist sehr m\u00e4chtig und kann viele verschiedene Parameter haben. F\u00fcr das Projekt nahm ich mein altes M307 Projekt und baute es, mit meinem neu gelernten Wissen aus diesem Modul, um. Nun sind alle Methoden dokumentiert und XSS sollte nicht mehr m\u00f6glich sein. Die Daten werden in einer SQLite Datenbank gespeichert, damit sie best\u00e4ndig bleiben. Mein Wissen \u00fcber Ajax habe ich aufgefrischt und vertieft. Ich weiss nun wie ich Abfragen machen kann und Werte \u00fcberliefere. Zus\u00e4tzlich habe ich gelernt wie ich PHP von JavaScript aus aufrufen kann. Das war f\u00fcr mich etwas neues, da ich bisher immer PHP von PHP aus aufgerufen habe. Merksatz: $.ajax() ist eine sehr m\u00e4chtige Funktion, die viele verschiedene Parameter hat. Mir ist aufgefallen, dass ich seit dem \u00dcK sehr viel neues dazugelernt habe und mittlerweile vieles sch\u00f6ner schreiben k\u00f6nnte. Ich werde mich nun darum bem\u00fchen, dass ich meine Projekte sauberer schreibe und kommentiere . Dateien # Wenn keine Datenbank verwendet wird, dann m\u00fcssen die Daten in einer anderen Art gespeichert werden. Meist ist der naheliegendste Weg das Schreiben in eine Datei. Wie dies in PHP funktioniert, haben wir als Hausaufgabe gelernt. Die wichtigsten Funktionen wie lesen , schreiben , umbenennen und l\u00f6schen hielt ich in der Dokumentation fest. Ich testete die Funktionen und erweiterte meine Unterlagen mit n\u00fctzlichen Beispielen . Als Vorlage f\u00fcr meine Dokumentation verwendete ich PHP-Einfach , welche eine solide Struktur gaben. Mit der Vollst\u00e4ndigkeit war ich nicht zufrieden, weswegen ich noch weitere Informationen hinzuf\u00fcgte. Daf\u00fcr schaute ich mich im Internet nach diversen anderen Tutorials um. Ich habe gelernt, dass sich Dateien in PHP nicht sonderlich komplizierter als in anderen Sprachen verhalten. Wenn ich mit Daten gearbeitet habe, dann verwendete ich auch immer gleich eine Datenbank und bin nicht auf die Idee gekommen, dass ich eine Datei verwenden k\u00f6nnte. Da ich nun aber den Umgang damit beherrsche werde ich Dateien f\u00fcr Prototypen verwenden. Merksatz: Funktionen, die etwas mit Dateien zu tun haben, geben einen bool zur\u00fcck, ob die Aktion erfolgreich war. Standardm\u00e4ssig wird beim beschrieben einer Datei der Inhalt \u00fcberschrieben. PHP hat f\u00fcr gewisse Anwendungsf\u00e4lle mehrere Methoden. Den genauen \u00dcberblick \u00fcber alle diese zu behalten ist sehr schwierig. In jedem Tutorial wird eine andere Methode f\u00fcr das Beschreiben verwendet. Wann ich welche verwenden sollte habe ich noch nicht herausgefunden. PHP - Do's and Don'ts # Als Repetition schauten wir an was der PHP- Syntax zul\u00e4sst und was f\u00fcr Ausgaben generiert werden k\u00f6nnen. Dabei ging es um die Anf\u00fchrungszeichen von Strings und was f\u00fcr eine Auswirkung diese auf den Inhalt haben. Zus\u00e4tzlich schauten wir uns an was f\u00fcr Zeichen Variablen nicht enthalten d\u00fcrfen und wie PHP mit Out-Of-Bound Abfragen in Arrays reagiert. Herr Inauen erstellte eine Pr\u00e4sentation , welche die Fragen beinhaltete. Diese Fragen wurden dann zuerst in kleineren Gruppen und sp\u00e4ter in der Klasse besprochen. Die L\u00f6sung der Aufgaben dokumentierte , damit ich sp\u00e4ter mein mein Wissen in k\u00fcrzester Zeit wieder aktivieren kann. Als ich heute lernte, dass PHP bei Zugreifen auf einen nicht belegten Platz im Array keine Fehlermeldung sondern nichts ausgegeben wird, war ich zu tiefst verwundert. F\u00fcr mich macht es keinen Sinn bei einem Programmierfehler keine Meldung auszugeben. Das Verhalten kann zwar in den Einstellungen ge\u00e4ndert werden, ist jedoch f\u00fcr mich als Standard inakzeptabel . Bis zum heutigen Tag dachte ich auch, dass PHP gleich wie Java keine Interpolation unterst\u00fctzt. Von nun an werde ich weniger mit dem Concatinator arbeiten und mehr gleich lesbare Strings erstellen. Als Hilfe sollten immer die einfachen Anf\u00fchrungszeichen verwendet werden und nur wenn das interpretieren von Variablen gew\u00fcnscht ist die Anderen. Merksatz: Variablen d\u00fcrfen nur ASCII-Zeichen , Zahlen am Ende und keine reservierten W\u00f6rter enthalten. Doppelte Anf\u00fchrungszeichen ( ) erm\u00f6glichen String Interpolation . Durch das Zusammenfassen des Syntaxes stellte ich fest, dass es immer noch Dinge in PHP gibt, welche mich verwundern . Ich werde mich nun darum bem\u00fchen, dass ich die Syntax besser beherrsche. Die meisten M\u00f6glichkeiten waren mir durch die seltene Benutzung von PHP nicht bekannt. Sobald ich aber intensiver damit arbeite werde ich sie automatisch verwenden.","title":"4. Woche"},{"location":"Reflexion/004_Woche/#4-woche-08092022","text":"Zusammenfassung SSR vs CSR CSR Projekt Dateien Do's and Don'ts (PHP)","title":"4. Woche 08.09.2022"},{"location":"Reflexion/004_Woche/#ssr-vs-csr","text":"PHP ist eine Serverseitige Programmiersprache. Um zu verstehen was dieser Satz bedeutet , mussten wir zuerst verstehen was Serverseitig bedeutet und was f\u00fcr Alternativen es gibt. Wir schauten uns die Begriffe SSR und CSR an und besprachen die Vor- und Nachteile. Damit wir uns mit dem Aufbau der beiden Begriffe genau auseinandersetzen mussten wir ein Diagramm \u00fcber CSR machen. Die Unterschiede besprachen wir zusammen in der Klasse und schrieben die Eigenschaften an die Wandtafel. F\u00fcr vertieftes Wissen nahm ich mir die Webseite Toptal zur Hilfe. Dort wurde die Unterschiede nochmal genauer erkl\u00e4rt. Das Diagramm wurde von mir mit Mermaid erstellt, was eine Alternative zu PlantUML ist. Ich wusste, dass es unterschiedliche Renderarten gibt und habe mich auch schonmal damit auseinandergesetzt. Was aber die genauen Argumente f\u00fcr die einzelnen Renderarten sind, wusste ich nicht. Wenn ich das n\u00e4chste Mal ein Projekt starte, dann werde ich mir nun zuerst \u00fcberlegen welche Renderart sinnvoll ist. Je nach dem k\u00f6nnte es f\u00fcr den Anwender einfacher sein, wenn ich eine andere Renderart w\u00e4hle. Diagramme mit Mermaid zu erstellen war f\u00fcr mich komplett neu, weswegen ich mich dort auch zuerst einlesen musste. Die grosse Akzeptanz von Mermaid hat mich \u00fcberrascht, was der Grund daf\u00fcr ist, dass ich es nun \u00f6fters verwenden werde. Merksatz: Serverseitiges rendern (SSR) ist die Voraussetzung f\u00fcr eine gutes SEO . Clientseitig rendern (CSR) erm\u00f6glicht eine bessere Performance und bessere UX . MkDocs unterst\u00fctzt kein direktes verbauen von PlantUML als Codeschnipsel . F\u00fcr Diagramme wird auf Mermaid gesetzt, was andere grosse Firmen ( GitHub ) auch machen. Somit war ich gezwungen es einmal auszuprobieren. Es ist sehr einfach zu bedienen und hat die gleichen Funktionalit\u00e4ten wie PlantUML.","title":"SSR vs CSR"},{"location":"Reflexion/004_Woche/#csr-erweiterung","text":"Als Aufgabe mussten wir ein CSR-Projekt erstellen. Dieses sollte Daten aus einem Backend laden und in einer Liste darstellen. \u00dcber einen Hinzuf\u00fcgen Knopf k\u00f6nnen weitere Entit\u00e4ten zur Liste hinzugef\u00fcgt werden. Die Schwierigkeit bei der ganzen Aufgabe war, dass es \u00fcber Ajax funktionieren sollte. Das heisst, dass die Daten \u00fcber JavaScript geladen werden und nicht \u00fcber PHP. Um zu sehen wie Grunds\u00e4tzlich ein CSR-Projekt aufgebaut ist schauten wir in der Klasse ein Beispielprojekt an. Dort wurden die Abfragen bereits mit Ajax umgesetzt, es hatte jedoch nur statische Daten. Dazu mussten wir uns mit der Ajax-Funktion $.ajax() auseinandersetzen. Diese Funktion ist sehr m\u00e4chtig und kann viele verschiedene Parameter haben. F\u00fcr das Projekt nahm ich mein altes M307 Projekt und baute es, mit meinem neu gelernten Wissen aus diesem Modul, um. Nun sind alle Methoden dokumentiert und XSS sollte nicht mehr m\u00f6glich sein. Die Daten werden in einer SQLite Datenbank gespeichert, damit sie best\u00e4ndig bleiben. Mein Wissen \u00fcber Ajax habe ich aufgefrischt und vertieft. Ich weiss nun wie ich Abfragen machen kann und Werte \u00fcberliefere. Zus\u00e4tzlich habe ich gelernt wie ich PHP von JavaScript aus aufrufen kann. Das war f\u00fcr mich etwas neues, da ich bisher immer PHP von PHP aus aufgerufen habe. Merksatz: $.ajax() ist eine sehr m\u00e4chtige Funktion, die viele verschiedene Parameter hat. Mir ist aufgefallen, dass ich seit dem \u00dcK sehr viel neues dazugelernt habe und mittlerweile vieles sch\u00f6ner schreiben k\u00f6nnte. Ich werde mich nun darum bem\u00fchen, dass ich meine Projekte sauberer schreibe und kommentiere .","title":"CSR Erweiterung"},{"location":"Reflexion/004_Woche/#dateien","text":"Wenn keine Datenbank verwendet wird, dann m\u00fcssen die Daten in einer anderen Art gespeichert werden. Meist ist der naheliegendste Weg das Schreiben in eine Datei. Wie dies in PHP funktioniert, haben wir als Hausaufgabe gelernt. Die wichtigsten Funktionen wie lesen , schreiben , umbenennen und l\u00f6schen hielt ich in der Dokumentation fest. Ich testete die Funktionen und erweiterte meine Unterlagen mit n\u00fctzlichen Beispielen . Als Vorlage f\u00fcr meine Dokumentation verwendete ich PHP-Einfach , welche eine solide Struktur gaben. Mit der Vollst\u00e4ndigkeit war ich nicht zufrieden, weswegen ich noch weitere Informationen hinzuf\u00fcgte. Daf\u00fcr schaute ich mich im Internet nach diversen anderen Tutorials um. Ich habe gelernt, dass sich Dateien in PHP nicht sonderlich komplizierter als in anderen Sprachen verhalten. Wenn ich mit Daten gearbeitet habe, dann verwendete ich auch immer gleich eine Datenbank und bin nicht auf die Idee gekommen, dass ich eine Datei verwenden k\u00f6nnte. Da ich nun aber den Umgang damit beherrsche werde ich Dateien f\u00fcr Prototypen verwenden. Merksatz: Funktionen, die etwas mit Dateien zu tun haben, geben einen bool zur\u00fcck, ob die Aktion erfolgreich war. Standardm\u00e4ssig wird beim beschrieben einer Datei der Inhalt \u00fcberschrieben. PHP hat f\u00fcr gewisse Anwendungsf\u00e4lle mehrere Methoden. Den genauen \u00dcberblick \u00fcber alle diese zu behalten ist sehr schwierig. In jedem Tutorial wird eine andere Methode f\u00fcr das Beschreiben verwendet. Wann ich welche verwenden sollte habe ich noch nicht herausgefunden.","title":"Dateien"},{"location":"Reflexion/004_Woche/#php-dos-and-donts","text":"Als Repetition schauten wir an was der PHP- Syntax zul\u00e4sst und was f\u00fcr Ausgaben generiert werden k\u00f6nnen. Dabei ging es um die Anf\u00fchrungszeichen von Strings und was f\u00fcr eine Auswirkung diese auf den Inhalt haben. Zus\u00e4tzlich schauten wir uns an was f\u00fcr Zeichen Variablen nicht enthalten d\u00fcrfen und wie PHP mit Out-Of-Bound Abfragen in Arrays reagiert. Herr Inauen erstellte eine Pr\u00e4sentation , welche die Fragen beinhaltete. Diese Fragen wurden dann zuerst in kleineren Gruppen und sp\u00e4ter in der Klasse besprochen. Die L\u00f6sung der Aufgaben dokumentierte , damit ich sp\u00e4ter mein mein Wissen in k\u00fcrzester Zeit wieder aktivieren kann. Als ich heute lernte, dass PHP bei Zugreifen auf einen nicht belegten Platz im Array keine Fehlermeldung sondern nichts ausgegeben wird, war ich zu tiefst verwundert. F\u00fcr mich macht es keinen Sinn bei einem Programmierfehler keine Meldung auszugeben. Das Verhalten kann zwar in den Einstellungen ge\u00e4ndert werden, ist jedoch f\u00fcr mich als Standard inakzeptabel . Bis zum heutigen Tag dachte ich auch, dass PHP gleich wie Java keine Interpolation unterst\u00fctzt. Von nun an werde ich weniger mit dem Concatinator arbeiten und mehr gleich lesbare Strings erstellen. Als Hilfe sollten immer die einfachen Anf\u00fchrungszeichen verwendet werden und nur wenn das interpretieren von Variablen gew\u00fcnscht ist die Anderen. Merksatz: Variablen d\u00fcrfen nur ASCII-Zeichen , Zahlen am Ende und keine reservierten W\u00f6rter enthalten. Doppelte Anf\u00fchrungszeichen ( ) erm\u00f6glichen String Interpolation . Durch das Zusammenfassen des Syntaxes stellte ich fest, dass es immer noch Dinge in PHP gibt, welche mich verwundern . Ich werde mich nun darum bem\u00fchen, dass ich die Syntax besser beherrsche. Die meisten M\u00f6glichkeiten waren mir durch die seltene Benutzung von PHP nicht bekannt. Sobald ich aber intensiver damit arbeite werde ich sie automatisch verwenden.","title":"PHP - Do's and Don'ts"},{"location":"Reflexion/005_Woche/","tags":["Reflexion"],"text":"5. Woche 15.09.2022 # Zusammenfassung Entwicklung vs Produktion MVC - Design Pattern Vortrag Objekt Orientierte Programmierung Entwicklung vs Produktion # In der heutigen Lektion, besprachen wir den Unterschied von Produktions- und Entwicklungsumgebung. Im ersten Fall m\u00f6chte man m\u00f6glich keine Fehlermeldungen und wenn, dann nur mit den essentiellen Details. Ganz im Gegenteil m\u00f6chte man w\u00e4hrend dem Entwickeln auch \u00fcber kleinere Fehler ausf\u00fchrlich informiert werden. Wie man dies umstellt dokumentierte ich unter der Installation . Wie man dies im Docker umstellt zeigte uns Herr Inauen in seiner Pr\u00e4sentation. Die Verhalten verglich ich und versuchte zu verstehen was f\u00fcr \u00c4nderungen gemacht werden. Die gegebenen Informationen reichten mir nicht aus, weswegen ich im Internet nachforschte. Im Basisprojekt wurde bereits die Einstellungen gemacht, was einfaches Verst\u00e4ndnis erm\u00f6glichte. F\u00fcr das n\u00e4chste Mal w\u00fcrde ich mir mehr Informationen als nur der Code w\u00fcnschen, um besser zu verstehen wieso welche \u00c4nderungen gemacht werden. Auch die Dokumentation ist nicht sehr hilfreich, da sie nur die Befehle erkl\u00e4rt und nicht die Gr\u00fcnde . Ich denke, dass es f\u00fcr mich hilfreich w\u00e4re, wenn ich die Gr\u00fcnde verstehen w\u00fcrde, da ich dann besser nachvollziehen kann, was ich tue. Wenn ich das n\u00e4chste Mal eine PHP-Applikation ver\u00f6ffentliche, dann werde ich darauf achten. Merksatz: Der Endkunde sollte nicht mit Fehlern konfrontiert werden und vor allem nicht, mit welchen die sensitiven Daten enthalten. Je nach Einstellungen wird unterschiedlich Stark auf Fehler reagiert. Andere Programmiersprachen wie Java oder C# haben auh unterschiedliche Umgebungen . In der Produktion wird der Code \u00fcberarbeitet und vereinfacht, damit er weniger Speicherplatz ben\u00f6tigt und effizienter ist. Dies ist nicht der Fall bei der Entwicklungsumgebung, da dort der Code w\u00e4hrend der Laufzeit inspiziert werden sollte. MVC - Design Pattern # Model View Component ist ein Design Pattern was die Benutzeroberfl\u00e4che und die Businesslogik unabh\u00e4ngig machen sollte. Es hilft bei der Wartbarkeit und wird sehr oft in der Webentwicklung verwendet. Im Unterricht schauten wir uns das Pattern an, um es sp\u00e4ter in unserem eigenen Projekt anzuwenden. Wir Applikationsentwickler haben bereits Grundkenntnisse \u00fcber MVC. Aus diesem Grund mussten wir einen Vortrag mit Demo erstellen, mit welcher wir den Betriebsinformatikern das Design Pattern erkl\u00e4ren. Meine Aufgabe war die Demo, da ich bereits einen Entwurf hatte. Wie das Pattern konzipiert ist lernten wir im Selbststudium auf YouTube. Wir bekamen Zeit, um Videos zu schauen und uns Notizen dazu zu machen. In der Lektion schrieben wir die einzelnen Folien der Pr\u00e4sentation auf und teilten diese zu. Im Verlauf der Woche sprachen wir uns genauer ab und schusterten eine Pr\u00e4sentation zusammen. Die Grundkonzepte f\u00fcr die Trennung von Code und UI habe ich bereits im Betrieb genauer untersucht. Dort verwenden wir jedoch Model-View-ViewModel ( MVVM ), was vergleichbar aber pr\u00e4ferierter von Microsoft ist. Neu war mir, wie das Konzept am besten in PHP umgesetzt wird, was ich beim erstellen der Demo lernte. Merksatz: MVC hilft die Businesslogik und Benutzeroberfl\u00e4che unabh\u00e4ngig zu entwickeln. Mir ist aufgefallen, dass Design Patterns beim Strukturieren vom Code behilflich sind und durchaus ihre Existenz berechtigt ist. Wenn man sie als Richtwert anwendet und nur das beste herauspickt, dann bekommt eine einfache und \u00fcbersichtliche L\u00f6sung. Zus\u00e4tzlich habe ich gemerkt, dass Patterns oft auch in einander verlaufen. Objekt Orientierte Programmierung # PHP war anf\u00e4nglich eine funktionale Programmiersprache. Sie haben jedoch die Objekt Orientierung eingef\u00fchrt, um die Entwicklung zu vereinfachen. In der heutigen Lektion lernten wir die Grundlagen von OOP in PHP, welche nicht sehr unterschiedlich zu anderen Sprachen sind. Wir schauten uns die Klassen und Objekte an und lernten \u00fcber die Konstruktor und Methoden . F\u00fcr die Erstellung der Dokumentation nutzte ich meine eigenes Vorwissen aus den vorherigen Modulen und \u00dcKs. Ich schrieb die Grundlagen auf und recherchierte im Internet, um die Informationen zu vervollst\u00e4ndigen. Die Klassen und Objekte sind mir bereits bekannt, da ich sie bereits in Java und C# verwendet habe. Die Konstruktoren und Methoden sind mir neu, da sie einen anderen Syntax verwenden. Beim Schreiben habe ich gelernt wie Klassen aufgebaut sind und OOP umgesetzt wurde. Dies war neu f\u00fcr mich, da \u00dcberladen und \u00dcberschreiben von Methoden nicht gleich funktioniert wie in Java. Alle anderen Konzepte sind mir bekannt und ich konnte sie in PHP anwenden. Ich habe auch gelernt, dass PHP eine Mischung aus funktionalem und objektorientiertem Programmieren ist. Merksatz: Klassen sind die Grundlage f\u00fcr Objekte. Objekte sind Instanzen einer Klasse. Konstruktoren sind Methoden, welche beim erstellen eines Objektes ausgef\u00fchrt werden. Methoden sind Funktionen, welche in einer Klasse definiert sind. Mir ist aufgefallen, dass die Objekt Orientierung in PHP nicht so stark ausgepr\u00e4gt ist, wie in anderen Sprachen. PHP gibt sich als OOP-Sprache aus, ist jedoch eine Mischung aus funktionalem und objektorientiertem Programmieren. Die Konzepte sind jedoch sehr \u00e4hnlich und k\u00f6nnen meistens problemlos angewendet werden. Leider sind nicht alle Konzepte gleich, wie zum Beispiel das \u00dcberladen von Methoden.","title":"5. Woche"},{"location":"Reflexion/005_Woche/#5-woche-15092022","text":"Zusammenfassung Entwicklung vs Produktion MVC - Design Pattern Vortrag Objekt Orientierte Programmierung","title":"5. Woche 15.09.2022"},{"location":"Reflexion/005_Woche/#entwicklung-vs-produktion","text":"In der heutigen Lektion, besprachen wir den Unterschied von Produktions- und Entwicklungsumgebung. Im ersten Fall m\u00f6chte man m\u00f6glich keine Fehlermeldungen und wenn, dann nur mit den essentiellen Details. Ganz im Gegenteil m\u00f6chte man w\u00e4hrend dem Entwickeln auch \u00fcber kleinere Fehler ausf\u00fchrlich informiert werden. Wie man dies umstellt dokumentierte ich unter der Installation . Wie man dies im Docker umstellt zeigte uns Herr Inauen in seiner Pr\u00e4sentation. Die Verhalten verglich ich und versuchte zu verstehen was f\u00fcr \u00c4nderungen gemacht werden. Die gegebenen Informationen reichten mir nicht aus, weswegen ich im Internet nachforschte. Im Basisprojekt wurde bereits die Einstellungen gemacht, was einfaches Verst\u00e4ndnis erm\u00f6glichte. F\u00fcr das n\u00e4chste Mal w\u00fcrde ich mir mehr Informationen als nur der Code w\u00fcnschen, um besser zu verstehen wieso welche \u00c4nderungen gemacht werden. Auch die Dokumentation ist nicht sehr hilfreich, da sie nur die Befehle erkl\u00e4rt und nicht die Gr\u00fcnde . Ich denke, dass es f\u00fcr mich hilfreich w\u00e4re, wenn ich die Gr\u00fcnde verstehen w\u00fcrde, da ich dann besser nachvollziehen kann, was ich tue. Wenn ich das n\u00e4chste Mal eine PHP-Applikation ver\u00f6ffentliche, dann werde ich darauf achten. Merksatz: Der Endkunde sollte nicht mit Fehlern konfrontiert werden und vor allem nicht, mit welchen die sensitiven Daten enthalten. Je nach Einstellungen wird unterschiedlich Stark auf Fehler reagiert. Andere Programmiersprachen wie Java oder C# haben auh unterschiedliche Umgebungen . In der Produktion wird der Code \u00fcberarbeitet und vereinfacht, damit er weniger Speicherplatz ben\u00f6tigt und effizienter ist. Dies ist nicht der Fall bei der Entwicklungsumgebung, da dort der Code w\u00e4hrend der Laufzeit inspiziert werden sollte.","title":"Entwicklung vs Produktion"},{"location":"Reflexion/005_Woche/#mvc-design-pattern","text":"Model View Component ist ein Design Pattern was die Benutzeroberfl\u00e4che und die Businesslogik unabh\u00e4ngig machen sollte. Es hilft bei der Wartbarkeit und wird sehr oft in der Webentwicklung verwendet. Im Unterricht schauten wir uns das Pattern an, um es sp\u00e4ter in unserem eigenen Projekt anzuwenden. Wir Applikationsentwickler haben bereits Grundkenntnisse \u00fcber MVC. Aus diesem Grund mussten wir einen Vortrag mit Demo erstellen, mit welcher wir den Betriebsinformatikern das Design Pattern erkl\u00e4ren. Meine Aufgabe war die Demo, da ich bereits einen Entwurf hatte. Wie das Pattern konzipiert ist lernten wir im Selbststudium auf YouTube. Wir bekamen Zeit, um Videos zu schauen und uns Notizen dazu zu machen. In der Lektion schrieben wir die einzelnen Folien der Pr\u00e4sentation auf und teilten diese zu. Im Verlauf der Woche sprachen wir uns genauer ab und schusterten eine Pr\u00e4sentation zusammen. Die Grundkonzepte f\u00fcr die Trennung von Code und UI habe ich bereits im Betrieb genauer untersucht. Dort verwenden wir jedoch Model-View-ViewModel ( MVVM ), was vergleichbar aber pr\u00e4ferierter von Microsoft ist. Neu war mir, wie das Konzept am besten in PHP umgesetzt wird, was ich beim erstellen der Demo lernte. Merksatz: MVC hilft die Businesslogik und Benutzeroberfl\u00e4che unabh\u00e4ngig zu entwickeln. Mir ist aufgefallen, dass Design Patterns beim Strukturieren vom Code behilflich sind und durchaus ihre Existenz berechtigt ist. Wenn man sie als Richtwert anwendet und nur das beste herauspickt, dann bekommt eine einfache und \u00fcbersichtliche L\u00f6sung. Zus\u00e4tzlich habe ich gemerkt, dass Patterns oft auch in einander verlaufen.","title":"MVC - Design Pattern"},{"location":"Reflexion/005_Woche/#objekt-orientierte-programmierung","text":"PHP war anf\u00e4nglich eine funktionale Programmiersprache. Sie haben jedoch die Objekt Orientierung eingef\u00fchrt, um die Entwicklung zu vereinfachen. In der heutigen Lektion lernten wir die Grundlagen von OOP in PHP, welche nicht sehr unterschiedlich zu anderen Sprachen sind. Wir schauten uns die Klassen und Objekte an und lernten \u00fcber die Konstruktor und Methoden . F\u00fcr die Erstellung der Dokumentation nutzte ich meine eigenes Vorwissen aus den vorherigen Modulen und \u00dcKs. Ich schrieb die Grundlagen auf und recherchierte im Internet, um die Informationen zu vervollst\u00e4ndigen. Die Klassen und Objekte sind mir bereits bekannt, da ich sie bereits in Java und C# verwendet habe. Die Konstruktoren und Methoden sind mir neu, da sie einen anderen Syntax verwenden. Beim Schreiben habe ich gelernt wie Klassen aufgebaut sind und OOP umgesetzt wurde. Dies war neu f\u00fcr mich, da \u00dcberladen und \u00dcberschreiben von Methoden nicht gleich funktioniert wie in Java. Alle anderen Konzepte sind mir bekannt und ich konnte sie in PHP anwenden. Ich habe auch gelernt, dass PHP eine Mischung aus funktionalem und objektorientiertem Programmieren ist. Merksatz: Klassen sind die Grundlage f\u00fcr Objekte. Objekte sind Instanzen einer Klasse. Konstruktoren sind Methoden, welche beim erstellen eines Objektes ausgef\u00fchrt werden. Methoden sind Funktionen, welche in einer Klasse definiert sind. Mir ist aufgefallen, dass die Objekt Orientierung in PHP nicht so stark ausgepr\u00e4gt ist, wie in anderen Sprachen. PHP gibt sich als OOP-Sprache aus, ist jedoch eine Mischung aus funktionalem und objektorientiertem Programmieren. Die Konzepte sind jedoch sehr \u00e4hnlich und k\u00f6nnen meistens problemlos angewendet werden. Leider sind nicht alle Konzepte gleich, wie zum Beispiel das \u00dcberladen von Methoden.","title":"Objekt Orientierte Programmierung"},{"location":"Reflexion/006_Woche/","tags":["Reflexion"],"text":"6. Woche 22.09.2022 # Zusammenfassung Eigenes Framework Aufbau Auto hinzuf\u00fcgen Framework # Um PHP besser kennen zu lernen und zu verstehen wie Frameworks aufgebaut sind, erstellten wir heute unser eigenes Framework . Dabei wird aus der URL der Controller und die Methode mit den Parametern gelesen. Die Controllers und Views werden automatisch instanziiert. In der Lektion erstellten wir die Dateistruktur . Von Herr Inauen haben wir ein bereits konfiguriertes Projekt erhalten, welches den groben Aufbau bereits enth\u00e4lt. Wir mussten lediglich verstehen wof\u00fcr die einzelnen Dateien und Ordner sind und wie sie funktionieren. Das bei half es eigene Endpunkte zu erstellen und mit diesen zu experimentieren . Ich habe gelernt, dass Frameworks sehr oft \u00e4hnlich aufgebaut sind. Sobald man ein Framework versteht sollte es nicht allzu schwer sein ein anderes zu verstehen. Aus dem eigenen Framework habe ich zudem verstanden wie die URL aufrufe in Klasseninstanzen resultieren k\u00f6nnen. Mir war zuvor nicht bewusst, dass aus einem String eine Klasse erstellt werden kann. Merksatz: Die URL wird in Controller und Methode mit Parametern aufgeteilt. UMLs sind sehr hilfreich um den Aufbau zu verstehen. Besonders fasziniert hat mich, die Einfachheit der Frameworks. Es ist erstaunlich wie viel Arbeit Frameworks abnehmen k\u00f6nnen. Ich habe mich gefragt, ob es nicht m\u00f6glich w\u00e4re selbst ein Framework zu erstellen, welches Objekte in die Datenbank spiegelt ( ORM ), da dies ja auch ein sehr repetitiver Prozess ist. Aufbau # Sich in ein komplett neues Projekt einzuarbeiten ist nicht ganz einfach. Deswegen schauten wir uns den Aufbau der Ordner und Dateien genauer an. Es gibt Router ( .htaccess ), Controller und Views. Die Controller werden automatisch instanziiert und die Views werden automatisch geladen. Die Views k\u00f6nnen mit den Daten der Controller bef\u00fcllt werden. Die Daten werden in der URL \u00fcbergeben. Den Aufbau des Frameworks haben wir mit einem UML-Diagramm dargestellt. Dieses Diagramm zeigt die Beziehungen zwischen den einzelnen Klassen. Es ist sehr hilfreich um den Aufbau zu verstehen und zu visualisieren. Auch nicht Informatiker k\u00f6nnen so die Verbindungen verstehen. Neu waren f\u00fcr mich die .htaccess Dateien. Diese informieren den Server wie er die URL aufl\u00f6sen soll. Dort k\u00f6nnen Endungen entfernt werden oder die URL umgeleitet werden. Die .htaccess Dateien sind sehr n\u00fctzlich um die URL aufzur\u00e4umen. So k\u00f6nnen zum Beispiel die Dateiendungen entfernt oder die URL als Parameter \u00fcbergeben werden. Merksatz: .htaccess Dateien sind sehr n\u00fctzlich um die URL aufzur\u00e4umen. Die Strukturen von Frameworks sind oft vergleichbar. Verwundert hat mich, dass die URL als Parameter \u00fcbergeben wird. Ich h\u00e4tte erwartet, dass die URL in der .htaccess Datei aufgel\u00f6st wird und die Werte direkt an den Controller \u00fcbergeben werden. Wenn ich irgendwann selbst eine Webseite erstelle, werde weiss ich nun, wie ich die URL aufbereiten kann. Hinzuf\u00fcgen # Eines der wichtigsten Aufgaben beim Entwickeln ist das Hinzuf\u00fcgen von neuen Dateien. Wie dies mit Beachtung auf das MVC-Pattern funktioniert, haben wir heute gelernt. Dabei muss beachtet werden in welchen Ordner die Datei geh\u00f6rt, da sie ansonsten nicht gefunden werden kann. Wir f\u00fcgten ein neues Model Auto hinzu und die dazugeh\u00f6rigen Dateien f\u00fcr das MVC-Pattern. Zuerst schauten wir uns an wie die bestehenden Models verwendet und angezeigt werden. Danach schrieb ich eine Zusammenfassung der bestehenden Dateien. Anhand der gewonnenen Erkenntnisse erstellte ich die neuen Dateien. Dabei musste ich keine bestehenden Dateien \u00e4ndern, da diese sch\u00f6n getrennt waren. Wie ein neues Model hinzugef\u00fcgt wird, habe ich w\u00e4hrend dieser Aufgabenstellung gelernt. Ich kann nun selbstst\u00e4ndig ein Model verwenden und dieses in die View einbinden. Ich habe gelernt, dass es wichtig ist die bestehenden Dateien zu verstehen, da diese die Grundlage f\u00fcr die Erweiterung bilden. Merksatz: Es ist wichtig die bestehenden Dateien zu verstehen, da diese die Grundlage f\u00fcr die Erweiterung bilden. Getrennter Code ist f\u00fcr die Wartung und Erweiterung extrem wichtig. Ein neues Model hinzuzuf\u00fcgen war f\u00fcr mich nur eine Kleinigkeit , weswegen ich dies in wenigen Minuten hatte. Die Zusammenfassung hingegen dauerte wesentlich l\u00e4nger, da ich genau recherchierte was der Grund hinter dem Aufbau ist und was f\u00fcr Vor- oder auch Nachteile dieser Ansatz mit sich bringt.","title":"6. Woche"},{"location":"Reflexion/006_Woche/#6-woche-22092022","text":"Zusammenfassung Eigenes Framework Aufbau Auto hinzuf\u00fcgen","title":"6. Woche 22.09.2022"},{"location":"Reflexion/006_Woche/#framework","text":"Um PHP besser kennen zu lernen und zu verstehen wie Frameworks aufgebaut sind, erstellten wir heute unser eigenes Framework . Dabei wird aus der URL der Controller und die Methode mit den Parametern gelesen. Die Controllers und Views werden automatisch instanziiert. In der Lektion erstellten wir die Dateistruktur . Von Herr Inauen haben wir ein bereits konfiguriertes Projekt erhalten, welches den groben Aufbau bereits enth\u00e4lt. Wir mussten lediglich verstehen wof\u00fcr die einzelnen Dateien und Ordner sind und wie sie funktionieren. Das bei half es eigene Endpunkte zu erstellen und mit diesen zu experimentieren . Ich habe gelernt, dass Frameworks sehr oft \u00e4hnlich aufgebaut sind. Sobald man ein Framework versteht sollte es nicht allzu schwer sein ein anderes zu verstehen. Aus dem eigenen Framework habe ich zudem verstanden wie die URL aufrufe in Klasseninstanzen resultieren k\u00f6nnen. Mir war zuvor nicht bewusst, dass aus einem String eine Klasse erstellt werden kann. Merksatz: Die URL wird in Controller und Methode mit Parametern aufgeteilt. UMLs sind sehr hilfreich um den Aufbau zu verstehen. Besonders fasziniert hat mich, die Einfachheit der Frameworks. Es ist erstaunlich wie viel Arbeit Frameworks abnehmen k\u00f6nnen. Ich habe mich gefragt, ob es nicht m\u00f6glich w\u00e4re selbst ein Framework zu erstellen, welches Objekte in die Datenbank spiegelt ( ORM ), da dies ja auch ein sehr repetitiver Prozess ist.","title":"Framework"},{"location":"Reflexion/006_Woche/#aufbau","text":"Sich in ein komplett neues Projekt einzuarbeiten ist nicht ganz einfach. Deswegen schauten wir uns den Aufbau der Ordner und Dateien genauer an. Es gibt Router ( .htaccess ), Controller und Views. Die Controller werden automatisch instanziiert und die Views werden automatisch geladen. Die Views k\u00f6nnen mit den Daten der Controller bef\u00fcllt werden. Die Daten werden in der URL \u00fcbergeben. Den Aufbau des Frameworks haben wir mit einem UML-Diagramm dargestellt. Dieses Diagramm zeigt die Beziehungen zwischen den einzelnen Klassen. Es ist sehr hilfreich um den Aufbau zu verstehen und zu visualisieren. Auch nicht Informatiker k\u00f6nnen so die Verbindungen verstehen. Neu waren f\u00fcr mich die .htaccess Dateien. Diese informieren den Server wie er die URL aufl\u00f6sen soll. Dort k\u00f6nnen Endungen entfernt werden oder die URL umgeleitet werden. Die .htaccess Dateien sind sehr n\u00fctzlich um die URL aufzur\u00e4umen. So k\u00f6nnen zum Beispiel die Dateiendungen entfernt oder die URL als Parameter \u00fcbergeben werden. Merksatz: .htaccess Dateien sind sehr n\u00fctzlich um die URL aufzur\u00e4umen. Die Strukturen von Frameworks sind oft vergleichbar. Verwundert hat mich, dass die URL als Parameter \u00fcbergeben wird. Ich h\u00e4tte erwartet, dass die URL in der .htaccess Datei aufgel\u00f6st wird und die Werte direkt an den Controller \u00fcbergeben werden. Wenn ich irgendwann selbst eine Webseite erstelle, werde weiss ich nun, wie ich die URL aufbereiten kann.","title":"Aufbau"},{"location":"Reflexion/006_Woche/#hinzufugen","text":"Eines der wichtigsten Aufgaben beim Entwickeln ist das Hinzuf\u00fcgen von neuen Dateien. Wie dies mit Beachtung auf das MVC-Pattern funktioniert, haben wir heute gelernt. Dabei muss beachtet werden in welchen Ordner die Datei geh\u00f6rt, da sie ansonsten nicht gefunden werden kann. Wir f\u00fcgten ein neues Model Auto hinzu und die dazugeh\u00f6rigen Dateien f\u00fcr das MVC-Pattern. Zuerst schauten wir uns an wie die bestehenden Models verwendet und angezeigt werden. Danach schrieb ich eine Zusammenfassung der bestehenden Dateien. Anhand der gewonnenen Erkenntnisse erstellte ich die neuen Dateien. Dabei musste ich keine bestehenden Dateien \u00e4ndern, da diese sch\u00f6n getrennt waren. Wie ein neues Model hinzugef\u00fcgt wird, habe ich w\u00e4hrend dieser Aufgabenstellung gelernt. Ich kann nun selbstst\u00e4ndig ein Model verwenden und dieses in die View einbinden. Ich habe gelernt, dass es wichtig ist die bestehenden Dateien zu verstehen, da diese die Grundlage f\u00fcr die Erweiterung bilden. Merksatz: Es ist wichtig die bestehenden Dateien zu verstehen, da diese die Grundlage f\u00fcr die Erweiterung bilden. Getrennter Code ist f\u00fcr die Wartung und Erweiterung extrem wichtig. Ein neues Model hinzuzuf\u00fcgen war f\u00fcr mich nur eine Kleinigkeit , weswegen ich dies in wenigen Minuten hatte. Die Zusammenfassung hingegen dauerte wesentlich l\u00e4nger, da ich genau recherchierte was der Grund hinter dem Aufbau ist und was f\u00fcr Vor- oder auch Nachteile dieser Ansatz mit sich bringt.","title":"Hinzuf\u00fcgen"},{"location":"Reflexion/007_Woche/","tags":["Reflexion"],"text":"7. Woche 29.09.2022 # Zusammenfassung Twig Allgemein Twig Design Twig Logik Twig Allgemein # Unser selbst programmiertes Framework sollte mithilfe einer Template Engine ausgestattet werden. Diese sollte Repetitive Aufgaben abl\u00f6sen und das Bauen von Komponenten erlauben. Wir haben uns f\u00fcr Twig entschieden, da es eine sehr gute Dokumentation hat und es sehr einfach ist, eigene Funktionen zu erstellen. Wir schauten und den Nutzen und Anwendungsf\u00e4lle an. Um Twig \u00fcberhaupt benutzen zu k\u00f6nnen schauten wir und auch den Installationsprozess an, welcher mithilfe von Composer und Docker sehr einfach ist. Im Unterricht schauten wir uns anhand eines Beispiels an, wie Twig angewendet wird. In diesem wurde der Umgang mit Komponenten und einzelne Funktionen gezeigt. Mir pers\u00f6nlich war dies nicht gen\u00fcgend ausf\u00fchrlich, weswegen ich zu Hause die Twig Dokumentation durchgegangen bin. Dabei habe ich alle wichtigen Funktionen und Konzepte verstanden und konnte diese auch anwenden. Meine gewonnenen Erkenntnisse hielt ich in der Dokumentation fest. Ich lernte was eine Template Engine ist und was f\u00fcr Vorteile sie mit sich bringt. Nun weiss ich, dass es m\u00f6glich ist wiederholende UI-T\u00e4tigkeiten zu automatisieren und Komponenten daraus zu erstellen. Die Installation und Anwendung von Twig konnte ich in einem Beispielprojekt nachvollziehen. Das ganze Thema war f\u00fcr mich neu, was mir sehr viel Spass bereitet hat. Merksatz: Eine Template Engine erleichtert das Erstellen von Komponenten und das Wiederverwenden von Code. Twig ist eine Template Engine, welche es erm\u00f6glicht, HTML zu generieren. N\u00e4chstes Mal, wenn ich ein Projekt mit PHP starte, welches ein UI ben\u00f6tigt, werde ich Twig verwenden, damit ich zuvor erstellte Komponenten wiederverwenden kann. Die Installation von Twig war m\u00fchsam, da die Dokumentation von Composer sehr knapp beschrieben ist. Zudem gab es keine richtige Suche oder Output, welcher ich als Anhaltspunkt benutzen konnte. Ich war froh, dass ich ein Projekt hatte, welches bereits mit Twig ausgestattet war. Die Handhabung von Twig hat mich begeistert, da es einfach ist. Twig-Auftrag (Design) # Wie bereits angemerkt haben wir Twig kennengelernt und damit ein UI gebaut. Die Aufgabe war es, dass wir dieses Projekt genauer anschauen und den Aufbau verstehen, damit wir wissen wo \u00c4nderungen ben\u00f6tigt sind, um ein HTML-Element zu ver\u00e4ndern. Die Dokumentation von Twig ist sehr ausf\u00fchrlich und f\u00fcr das schnelle Nachlesen nicht geeignet. Aus diesem Grund schrieb ich mir eine eigene Dokumentation. Darin beschrieb ich wie Bereiche \u00fcberschrieben werden k\u00f6nnen, \u00dcberpr\u00fcfungen funktionieren und Schleifen definiert sind. Durch die Kombination der Information aus dem Unterricht und der praktischen Anwendung konnte ich Twig sehr gut verstehen und anwenden. Das selbstst\u00e4ndige Nachforschen half mir beim verstehen, damit ich nun ein UI mit Twig bauen kann, welches nach dem DRY-Prinzip aufgebaut werden. Merksatz: Eine bestehende Dokumentation in eigene Worte zu \u00fcbersetzen hilft beim Verstehen und schnelleren Navigation. Dokumentationen sind nicht immer f\u00fcr das schnelle Nachlesen geeignet. Mir ist aufgefallen, dass manchmal weniger Informationen mehr ist. Wenn ich eine Dokumentation lese, m\u00f6chte ich nicht alles verstehen, sondern nur das, was ich ben\u00f6tige. Wenn ich selbst etwas schreibe, dann neige ich dazu m\u00f6glichst viele Informationen zur Verf\u00fcgung zu stellen und auch auf Sonderf\u00e4lle einzugehen. Meist ist aber ein abstract besser. Twig-Auftrag (Logik) # Der zweite Auftrag war es, die Logik von Twig zu verstehen. Dazu mussten wir das Beispielprojekt aus dem Unterricht analysieren und die Logik verstehen. Anschliessend sollten wir es mit einer eigenen Logik erweitern, welch ein Dropdown-Men\u00fc enth\u00e4lt. Das Dropdown sollte wiederverwendbar sein und die Daten aus dem Controller beziehen. In der Twig Dokumentation suchte ich nach einer Funktion, welche Dropdown erstellt. Leider war ich dabei erfolglos. Daf\u00fcr fand ich aber Makros , welche meine Erwartungen erf\u00fcllten. Mit diesen konnte ich ein Dropdown erstellen, welches die Daten aus dem Controller bezieht. Das Dropdown ist wiederverwendbar und kann in jedem Template verwendet werden. Das Dropdown selbst ist sehr einfach gehalten. Es enth\u00e4lt nur die Logik, welche f\u00fcr ein Dropdown ben\u00f6tigt wird. Die Logik f\u00fcr die Daten, welche in das Dropdown geladen werden, ist in einem separaten Controller. Ein Dropdown alleine ist nicht sehr n\u00fctzlich, weswegen ich es mit einem Formular kombinierte. Im Formular habe ich gelernt wie Daten in Twig dargestellt und Escaped werden, damit XSS verhindert wird. Das Gesp\u00fcr f\u00fcr den Umgang mit Twig habe ich sehr schnell bekommen. Ich kann nun Komponenten einbinden und selbst Funktionen mithilfe von Makros programmieren. Das Dropdown ist ein Beispiel daf\u00fcr. Merksatz: Twig ist f\u00fcr das schnelle Erstellen von Komponenten geeignet, jedoch nicht f\u00fcr das Erstellen von komplexen Funktionen und Sicherheitsmechanismen . Makros erlauben es eigene Funktionen zu erstellen, welche in Twig verwendet werden k\u00f6nnen. Gut strukturierter Code l\u00e4sst sich aufteilen und wiederverwenden. Mit Twig konnte ich mich im Grunde anfreunden. Ob ich es endg\u00fcltig in meinem Repertoire aufnehme, wird sich zeigen. Ich bin mir aber sicher, dass ich Twig in Zukunft \u00f6fters verwenden werde, da es f\u00fcr Schulprojekte sehr einfach ist. Mir fehlen die Sicherheitsaspekte und Quality-Of-Life Features, welche ich anderen Frameworks kenne.","title":"7. Woche"},{"location":"Reflexion/007_Woche/#7-woche-29092022","text":"Zusammenfassung Twig Allgemein Twig Design Twig Logik","title":"7. Woche 29.09.2022"},{"location":"Reflexion/007_Woche/#twig-allgemein","text":"Unser selbst programmiertes Framework sollte mithilfe einer Template Engine ausgestattet werden. Diese sollte Repetitive Aufgaben abl\u00f6sen und das Bauen von Komponenten erlauben. Wir haben uns f\u00fcr Twig entschieden, da es eine sehr gute Dokumentation hat und es sehr einfach ist, eigene Funktionen zu erstellen. Wir schauten und den Nutzen und Anwendungsf\u00e4lle an. Um Twig \u00fcberhaupt benutzen zu k\u00f6nnen schauten wir und auch den Installationsprozess an, welcher mithilfe von Composer und Docker sehr einfach ist. Im Unterricht schauten wir uns anhand eines Beispiels an, wie Twig angewendet wird. In diesem wurde der Umgang mit Komponenten und einzelne Funktionen gezeigt. Mir pers\u00f6nlich war dies nicht gen\u00fcgend ausf\u00fchrlich, weswegen ich zu Hause die Twig Dokumentation durchgegangen bin. Dabei habe ich alle wichtigen Funktionen und Konzepte verstanden und konnte diese auch anwenden. Meine gewonnenen Erkenntnisse hielt ich in der Dokumentation fest. Ich lernte was eine Template Engine ist und was f\u00fcr Vorteile sie mit sich bringt. Nun weiss ich, dass es m\u00f6glich ist wiederholende UI-T\u00e4tigkeiten zu automatisieren und Komponenten daraus zu erstellen. Die Installation und Anwendung von Twig konnte ich in einem Beispielprojekt nachvollziehen. Das ganze Thema war f\u00fcr mich neu, was mir sehr viel Spass bereitet hat. Merksatz: Eine Template Engine erleichtert das Erstellen von Komponenten und das Wiederverwenden von Code. Twig ist eine Template Engine, welche es erm\u00f6glicht, HTML zu generieren. N\u00e4chstes Mal, wenn ich ein Projekt mit PHP starte, welches ein UI ben\u00f6tigt, werde ich Twig verwenden, damit ich zuvor erstellte Komponenten wiederverwenden kann. Die Installation von Twig war m\u00fchsam, da die Dokumentation von Composer sehr knapp beschrieben ist. Zudem gab es keine richtige Suche oder Output, welcher ich als Anhaltspunkt benutzen konnte. Ich war froh, dass ich ein Projekt hatte, welches bereits mit Twig ausgestattet war. Die Handhabung von Twig hat mich begeistert, da es einfach ist.","title":"Twig Allgemein"},{"location":"Reflexion/007_Woche/#twig-auftrag-design","text":"Wie bereits angemerkt haben wir Twig kennengelernt und damit ein UI gebaut. Die Aufgabe war es, dass wir dieses Projekt genauer anschauen und den Aufbau verstehen, damit wir wissen wo \u00c4nderungen ben\u00f6tigt sind, um ein HTML-Element zu ver\u00e4ndern. Die Dokumentation von Twig ist sehr ausf\u00fchrlich und f\u00fcr das schnelle Nachlesen nicht geeignet. Aus diesem Grund schrieb ich mir eine eigene Dokumentation. Darin beschrieb ich wie Bereiche \u00fcberschrieben werden k\u00f6nnen, \u00dcberpr\u00fcfungen funktionieren und Schleifen definiert sind. Durch die Kombination der Information aus dem Unterricht und der praktischen Anwendung konnte ich Twig sehr gut verstehen und anwenden. Das selbstst\u00e4ndige Nachforschen half mir beim verstehen, damit ich nun ein UI mit Twig bauen kann, welches nach dem DRY-Prinzip aufgebaut werden. Merksatz: Eine bestehende Dokumentation in eigene Worte zu \u00fcbersetzen hilft beim Verstehen und schnelleren Navigation. Dokumentationen sind nicht immer f\u00fcr das schnelle Nachlesen geeignet. Mir ist aufgefallen, dass manchmal weniger Informationen mehr ist. Wenn ich eine Dokumentation lese, m\u00f6chte ich nicht alles verstehen, sondern nur das, was ich ben\u00f6tige. Wenn ich selbst etwas schreibe, dann neige ich dazu m\u00f6glichst viele Informationen zur Verf\u00fcgung zu stellen und auch auf Sonderf\u00e4lle einzugehen. Meist ist aber ein abstract besser.","title":"Twig-Auftrag (Design)"},{"location":"Reflexion/007_Woche/#twig-auftrag-logik","text":"Der zweite Auftrag war es, die Logik von Twig zu verstehen. Dazu mussten wir das Beispielprojekt aus dem Unterricht analysieren und die Logik verstehen. Anschliessend sollten wir es mit einer eigenen Logik erweitern, welch ein Dropdown-Men\u00fc enth\u00e4lt. Das Dropdown sollte wiederverwendbar sein und die Daten aus dem Controller beziehen. In der Twig Dokumentation suchte ich nach einer Funktion, welche Dropdown erstellt. Leider war ich dabei erfolglos. Daf\u00fcr fand ich aber Makros , welche meine Erwartungen erf\u00fcllten. Mit diesen konnte ich ein Dropdown erstellen, welches die Daten aus dem Controller bezieht. Das Dropdown ist wiederverwendbar und kann in jedem Template verwendet werden. Das Dropdown selbst ist sehr einfach gehalten. Es enth\u00e4lt nur die Logik, welche f\u00fcr ein Dropdown ben\u00f6tigt wird. Die Logik f\u00fcr die Daten, welche in das Dropdown geladen werden, ist in einem separaten Controller. Ein Dropdown alleine ist nicht sehr n\u00fctzlich, weswegen ich es mit einem Formular kombinierte. Im Formular habe ich gelernt wie Daten in Twig dargestellt und Escaped werden, damit XSS verhindert wird. Das Gesp\u00fcr f\u00fcr den Umgang mit Twig habe ich sehr schnell bekommen. Ich kann nun Komponenten einbinden und selbst Funktionen mithilfe von Makros programmieren. Das Dropdown ist ein Beispiel daf\u00fcr. Merksatz: Twig ist f\u00fcr das schnelle Erstellen von Komponenten geeignet, jedoch nicht f\u00fcr das Erstellen von komplexen Funktionen und Sicherheitsmechanismen . Makros erlauben es eigene Funktionen zu erstellen, welche in Twig verwendet werden k\u00f6nnen. Gut strukturierter Code l\u00e4sst sich aufteilen und wiederverwenden. Mit Twig konnte ich mich im Grunde anfreunden. Ob ich es endg\u00fcltig in meinem Repertoire aufnehme, wird sich zeigen. Ich bin mir aber sicher, dass ich Twig in Zukunft \u00f6fters verwenden werde, da es f\u00fcr Schulprojekte sehr einfach ist. Mir fehlen die Sicherheitsaspekte und Quality-Of-Life Features, welche ich anderen Frameworks kenne.","title":"Twig-Auftrag (Logik)"},{"location":"Reflexion/008_Woche/","tags":["Reflexion"],"text":"8. Woche 06.10.2022 # Zusammenfassung 1. Abgabe Besprochen Ideenfindung Concept Map Absenz / \u00dcK-Nachholung Diese Woche habe ich den \u00dcK 335 nachgeholt, weswegen ich nicht am Unterricht teilnehmen konnte. Ich habe mir die Aufgaben der Woche angesehen und versucht diese nachzuholen. Bitte beachten Sie, dass ich die Aufgaben nur anhand der Unterlagen nachvollzogen wurden und m\u00fcndliche Erkl\u00e4rungen nicht aufgef\u00fchrt sind. 1. Abgabe Besprochen # Nun fangen die LB-Abgaben an, weshalb nun alle neuen Inhalte unter LB1 zu finden sind. Wir besprachen die Lernziele und Anforderungen f\u00fcr die LB1, welche wir schon bald abgeben m\u00fcssen. Bei der ersten Abgabe geht es vor allem um das Konzept und die Anforderungen . Anhand diverser PDF wurden Beispiele gezeigt, damit man weiss, wie das Endprodukt aussehen sollte. Aus anderen Projekten hatte ich bereits Testf\u00e4lle, welche ich teilweise in dieses Projekt \u00fcbernehmen konnte. Ich habe gelernt was Use-Cases und Testszenarios sind und wie diese Beschrieben werden. Zuvor wusste ich nicht, dass ein Use-Case mit einem Diagramm visualisiert werden kann. Bisher habe ich immer nur Testf\u00e4lle ohne viel zu \u00fcberlegen geschrieben. Durch die Zugeh\u00f6rigkeit zu einem Use-Case konnte ich viel genauer ins Detail. Merksatz: Beispiele zu Anforderungen helfen um Unklarheiten zu beseitigen Ein Use-Case ist eine Kurz-Beschreibung was ein System leisten soll (und nicht wie) Die PDFs waren sehr n\u00fctzlich, da ich so nachvollziehen konnte was ich machen muss. Ich habe mir die PDFs auch heruntergeladen, damit ich sie mir sp\u00e4ter nochmals anschauen kann. Der Inhalt sprach jedoch manchmal nicht f\u00fcr sich, weswegen trotzdem Fragen auftauchten. Sonderf\u00e4lle und Einzelheiten wurden nicht immer beschrieben, weswegen ich mich an Herr Inauen wenden musste. Ideenfindung # Ich habe mir \u00fcberlegt, wie ich die LB1 angehen werde. Das Ziel ist es ein Gesch\u00e4ftsprozess zu automatisieren und digitalisieren. In meinem Betrieb gibt es keine Gesch\u00e4ftsprozess, welche nicht bereits automatisiert sind. Ich habe mir die Anforderungen angeschaut und versucht diese zu verstehen . Dadurch konnte ich bereits meine Ideensammlung begrenzen. Zuerst habe ich in meinem Betrieb die Augen aufgemacht und nach repetitiven Aufgaben gesucht. Leider war ich dabei erfolglos, weswegen ich mich in der Schule nach Prozessen auf die Suche machte. Beim Schreiben dieser Doku ist mir aufgefallen, dass das Aufsetzen von MkDocs immer sehr lange dauert und meist mit Problemen versehen ist. Ich habe mir \u00fcberlegt, ob ich nicht einen Prozess automatisieren k\u00f6nnte, welcher die Dokumentation erstellt. Ich habe mich mit Herrn Inauen in Verbindung gesetzt und best\u00e4tigen lassen, dass dies m\u00f6glich ist. Aus dieser Suche habe ich gelernt, dass es unz\u00e4hlige Prozesse gibt, welche man automatisieren kann. Meist ist es nur eine Frage der Zeit und Motivation . Gelernt habe ich, dass kleinere Betriebe die Implementation von Automatisierungen sehr viel schneller und einfacher machen k\u00f6nne, als Softwaregiganten . Merksatz: Etwas bestehendes Nachzubauen hilft um Konzepte zu verstehen Im Internet gibt es unz\u00e4hlig viele Beispiele f\u00fcr Ideen Das Schwierigste war f\u00fcr mich, dass es einen Bewilligungsprozess enthalten muss. Somit konnte ich einige meiner Ideen gleich vergessen. F\u00fcr das n\u00e4chste Mal w\u00fcrde ich mir flexiblere Anforderungen w\u00fcnschen, damit ich nicht so viel Zeit f\u00fcr die Ideenfindung verbrauche. Concept Map # In der ersten Abgabe m\u00fcssen wir ein Concept Map abgeben. Das ist ein Mindmap \u00e4hnliches Diagramm, welches Begriffe semantisch aufzeigt. Ich habe mir im Internet ein paar Beispiele angeschaut und versucht diese nachzubauen. Dieses versah ich dann mit Links zu den entsprechenden Kapiteln. Im Unterricht haben wir acht verschiedene Begriffe besprochen, welche wir in unserem Diagramm verwenden m\u00fcssen. Ich habe mir die Begriffe notiert und versucht diese zu verstehen. Die Begriffe waren teilweise sehr komplex und konnten nur schwer knapp beschrieben werden. Ein Concept Map habe ich bisher noch nie erstellt, weswegen dies neu f\u00fcr mich war. Die Erstellung mit PlantUML kannte ich auch nicht, weswegen ich mich dort einarbeiten musste. Eine wirkliche Anleitung zur Erstellung fand ich leider nicht, weswegen ich mich an die Beispiele gehalten habe. Die Erstellung war nicht sehr kompliziert aber Zeitaufw\u00e4ndig . Merksatz: Ein Concept Map ist eine Art Mindmap, das in der Lage ist, die Beziehungen zwischen den einzelnen Begriffen zu visualisieren. Ich w\u00fcrde ein Concept Map nicht freiwillig verwenden, da es mir zu abstrakt ist und ich es nicht wirklich n\u00fctzlich finde. Ich habe es aber trotzdem gemacht, da es in der Abgabe gefordert wurde. M\u00f6glicherweise werde ich es in Zukunft verwenden, wenn ich es f\u00fcr n\u00fctzlich halte.","title":"8. Woche"},{"location":"Reflexion/008_Woche/#8-woche-06102022","text":"Zusammenfassung 1. Abgabe Besprochen Ideenfindung Concept Map Absenz / \u00dcK-Nachholung Diese Woche habe ich den \u00dcK 335 nachgeholt, weswegen ich nicht am Unterricht teilnehmen konnte. Ich habe mir die Aufgaben der Woche angesehen und versucht diese nachzuholen. Bitte beachten Sie, dass ich die Aufgaben nur anhand der Unterlagen nachvollzogen wurden und m\u00fcndliche Erkl\u00e4rungen nicht aufgef\u00fchrt sind.","title":"8. Woche 06.10.2022"},{"location":"Reflexion/008_Woche/#1-abgabe-besprochen","text":"Nun fangen die LB-Abgaben an, weshalb nun alle neuen Inhalte unter LB1 zu finden sind. Wir besprachen die Lernziele und Anforderungen f\u00fcr die LB1, welche wir schon bald abgeben m\u00fcssen. Bei der ersten Abgabe geht es vor allem um das Konzept und die Anforderungen . Anhand diverser PDF wurden Beispiele gezeigt, damit man weiss, wie das Endprodukt aussehen sollte. Aus anderen Projekten hatte ich bereits Testf\u00e4lle, welche ich teilweise in dieses Projekt \u00fcbernehmen konnte. Ich habe gelernt was Use-Cases und Testszenarios sind und wie diese Beschrieben werden. Zuvor wusste ich nicht, dass ein Use-Case mit einem Diagramm visualisiert werden kann. Bisher habe ich immer nur Testf\u00e4lle ohne viel zu \u00fcberlegen geschrieben. Durch die Zugeh\u00f6rigkeit zu einem Use-Case konnte ich viel genauer ins Detail. Merksatz: Beispiele zu Anforderungen helfen um Unklarheiten zu beseitigen Ein Use-Case ist eine Kurz-Beschreibung was ein System leisten soll (und nicht wie) Die PDFs waren sehr n\u00fctzlich, da ich so nachvollziehen konnte was ich machen muss. Ich habe mir die PDFs auch heruntergeladen, damit ich sie mir sp\u00e4ter nochmals anschauen kann. Der Inhalt sprach jedoch manchmal nicht f\u00fcr sich, weswegen trotzdem Fragen auftauchten. Sonderf\u00e4lle und Einzelheiten wurden nicht immer beschrieben, weswegen ich mich an Herr Inauen wenden musste.","title":"1. Abgabe Besprochen"},{"location":"Reflexion/008_Woche/#ideenfindung","text":"Ich habe mir \u00fcberlegt, wie ich die LB1 angehen werde. Das Ziel ist es ein Gesch\u00e4ftsprozess zu automatisieren und digitalisieren. In meinem Betrieb gibt es keine Gesch\u00e4ftsprozess, welche nicht bereits automatisiert sind. Ich habe mir die Anforderungen angeschaut und versucht diese zu verstehen . Dadurch konnte ich bereits meine Ideensammlung begrenzen. Zuerst habe ich in meinem Betrieb die Augen aufgemacht und nach repetitiven Aufgaben gesucht. Leider war ich dabei erfolglos, weswegen ich mich in der Schule nach Prozessen auf die Suche machte. Beim Schreiben dieser Doku ist mir aufgefallen, dass das Aufsetzen von MkDocs immer sehr lange dauert und meist mit Problemen versehen ist. Ich habe mir \u00fcberlegt, ob ich nicht einen Prozess automatisieren k\u00f6nnte, welcher die Dokumentation erstellt. Ich habe mich mit Herrn Inauen in Verbindung gesetzt und best\u00e4tigen lassen, dass dies m\u00f6glich ist. Aus dieser Suche habe ich gelernt, dass es unz\u00e4hlige Prozesse gibt, welche man automatisieren kann. Meist ist es nur eine Frage der Zeit und Motivation . Gelernt habe ich, dass kleinere Betriebe die Implementation von Automatisierungen sehr viel schneller und einfacher machen k\u00f6nne, als Softwaregiganten . Merksatz: Etwas bestehendes Nachzubauen hilft um Konzepte zu verstehen Im Internet gibt es unz\u00e4hlig viele Beispiele f\u00fcr Ideen Das Schwierigste war f\u00fcr mich, dass es einen Bewilligungsprozess enthalten muss. Somit konnte ich einige meiner Ideen gleich vergessen. F\u00fcr das n\u00e4chste Mal w\u00fcrde ich mir flexiblere Anforderungen w\u00fcnschen, damit ich nicht so viel Zeit f\u00fcr die Ideenfindung verbrauche.","title":"Ideenfindung"},{"location":"Reflexion/008_Woche/#concept-map","text":"In der ersten Abgabe m\u00fcssen wir ein Concept Map abgeben. Das ist ein Mindmap \u00e4hnliches Diagramm, welches Begriffe semantisch aufzeigt. Ich habe mir im Internet ein paar Beispiele angeschaut und versucht diese nachzubauen. Dieses versah ich dann mit Links zu den entsprechenden Kapiteln. Im Unterricht haben wir acht verschiedene Begriffe besprochen, welche wir in unserem Diagramm verwenden m\u00fcssen. Ich habe mir die Begriffe notiert und versucht diese zu verstehen. Die Begriffe waren teilweise sehr komplex und konnten nur schwer knapp beschrieben werden. Ein Concept Map habe ich bisher noch nie erstellt, weswegen dies neu f\u00fcr mich war. Die Erstellung mit PlantUML kannte ich auch nicht, weswegen ich mich dort einarbeiten musste. Eine wirkliche Anleitung zur Erstellung fand ich leider nicht, weswegen ich mich an die Beispiele gehalten habe. Die Erstellung war nicht sehr kompliziert aber Zeitaufw\u00e4ndig . Merksatz: Ein Concept Map ist eine Art Mindmap, das in der Lage ist, die Beziehungen zwischen den einzelnen Begriffen zu visualisieren. Ich w\u00fcrde ein Concept Map nicht freiwillig verwenden, da es mir zu abstrakt ist und ich es nicht wirklich n\u00fctzlich finde. Ich habe es aber trotzdem gemacht, da es in der Abgabe gefordert wurde. M\u00f6glicherweise werde ich es in Zukunft verwenden, wenn ich es f\u00fcr n\u00fctzlich halte.","title":"Concept Map"},{"location":"Reflexion/009_Woche/","tags":["Reflexion"],"text":"9. Woche 27.10.2022 # Zusammenfassung 2. Abgabe Besprochen Validierung UI Mockup 2. Abgabe Besprochen # Letzte Woche haben wir zwar gerade erst die LB1 besprochen, jedoch ist die zweite Abgabe bereits in der n\u00e4chsten Woche. Daher haben wir uns entschieden, die zweite Abgabe bereits zu besprechen. Dort m\u00fcssen wir mit Mock-Daten bereits das UI und die Grundfunktionalit\u00e4ten umsetzen. Die Datenbank wird erst in der dritten Abgabe ben\u00f6tigt. Wie das letzte Mal gab es diverse Fragen , die wir besprochen haben. Zudem gab es wieder PDF , welche die Anforderungen beschrieben. Dies habe ich mir genau durchgelesen und bereits im Unterricht fragen gestellt. Ich habe gelernt, dass die erste Umsetzung ohne eine Datenbank viel einfacher ist, da nur auf das Verhalten geachtet werden muss. Bisher habe ich immer gleichzeitig die Daten und das UI umgesetzt. Daher ist es f\u00fcr mich neu, dass ich erst Mal nur das UI umsetzen muss. Der Vorteil davon ist, dass ich so bereits Mocks habe, welche ich f\u00fcr Tests wiederverwenden kann. Merksatz: Mocks sind Daten, welche nur f\u00fcr Tests verwendet werden. Sie sind nicht f\u00fcr die Produktion gedacht. Mir ist aufgefallen, dass in unserer Klasse sehr viel Wissensdifferenz besteht. F\u00fcr die einen Ist eine Aufgabe zu schwer, f\u00fcr die anderen zu leicht. Dasher ist das setzen von Anforderungen sehr schwierig und nicht immer f\u00fcr alle Verst\u00e4ndlich. Validierung # Das wichtigste wenn man ein Formular hat ist, dass die Daten darin validiert werden. Dies m\u00fcssen wir auch bei der 2. Abgabe umsetzten, weswegen wir uns mit dem Thema Validierung besch\u00e4ftigt haben. Es braucht immer eine serverseitige Validation, da der Client sie ansonsten umgehen kann. Da PHP nur auf dem Server l\u00e4uft ist die Validierung etwas aufw\u00e4ndiger. Wie immer, wenn wir etwas neues Beginnen hat Herr Inauen uns ein Beispielprojekt erstellt. In diesem wurde bereits die Validation mit Fehlermeldungen umgesetzt. Somit mussten wir nur den Aufbau und Art der Validierung verstehen. Dies war f\u00fcr mich nicht schwer, da ich HTTP-Methoden kenne und weiss welche f\u00fcr was zust\u00e4ndig ist. Mit dem Thema Validierung habe ich mich zuvor schon sehr intensiv besch\u00e4ftigt, weswegen ich dabei nicht sehr viel lernte. Wie die aber in PHP aussieht und was f\u00fcr Tricks es gibt kannte ich nicht. Daher war es f\u00fcr mich sehr interessant. In meinem Projekt werde ich die Validierung auch so verbauen. Merksatz: GET ist f\u00fcr das Laden des Formulars zust\u00e4ndig. POST validiert das Formular und gibt die Fehlermeldungen zur\u00fcck. Es wird immer eine serverseitige Validierung ben\u00f6tigt. Von Blazor kenne ich die Validierung bereits. Mir ist jedoch aufgefallen, dass erst beim Senden die Fehlermeldungen angezeigt werden, was ich \u00fcberhaupt nicht toll finde. So muss immer zuerst auf den Button geklickt werden, um zu sehen, ob alles korrekt ist. Daher habe ich mich nach einer anderen L\u00f6sung umgeschaut. Bin aber bisher noch nicht f\u00fcndig geworden. UI Mockup # F\u00fcr das UI des Projektes mussten wir eine Skizze zeichnen. Diese sollte aufzeigen was f\u00fcr Elemente wir verwenden und wie diese zusammenh\u00e4ngen . Im Internet suchte ich nach Farbpaletten , anhand welchen ich mein UI gestalten wollte. Dabei fand ich eine Farbpalette welche mir sehr gut gefiel. Diese habe ich dann in meinem UI verwendet. Das Mockup versehrte ich mit Logik, damit es wie ein richtiger Prototyp benutzt werden kann. Die Mockups wurden mit Figma erstellt. Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Es ist kostenlos und auf allen Ger\u00e4ten benutzt werden. Die Mockups sind \u00f6ffentlich und k\u00f6nnen hier eingesehen werden. Die Mockups sind in drei Bereiche unterteilt: Start , User und Admin . Der Startbereich ist die Startseite der Website, auf welcher die Anmeldung passiert. Der Userbereich ist die Seite, die der User sieht, wenn er sich angemeldet hat. Dort kann er seine Vorlagen herunterladen und Neue erstellen. Der Adminbereich ist die Seite, die nur die Administratoren sehen. Dort k\u00f6nnen sie die Antr\u00e4ge der User best\u00e4tigen oder ablehnen. Figma habe ich bisher f\u00fcr einige Mockups verwendet. Dieses Mal habe ich aber Logik zur Navigation hinzugef\u00fcgt, was das Ganze noch etwas komplexer machte. Wenn ich von Anfang an gewusst h\u00e4tte, dass das UI so aufwendig wird, dann h\u00e4tte ich minimaler gearbeitet. In meinem Berufsleben kann ich das Wissen sehr gut benutzen, da ich \u00f6fters Mockups erstellen muss. Merksatz: Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Figma erlaubt es ein Mockup mit Logik zu versehen. Ich merke wie mein Wissen immer gr\u00f6sser wird und ich immer mehr F\u00e4higkeiten erlerne. Dies ist f\u00fcr mich sehr wichtig, da ich so effizienter werde und somit gr\u00f6ssere Projekte umsetzen kann. Ich bin sehr froh, dass ich die M\u00f6glichkeit habe, mich in diesem Bereich weiterzuentwickeln .","title":"9. Woche"},{"location":"Reflexion/009_Woche/#9-woche-27102022","text":"Zusammenfassung 2. Abgabe Besprochen Validierung UI Mockup","title":"9. Woche 27.10.2022"},{"location":"Reflexion/009_Woche/#2-abgabe-besprochen","text":"Letzte Woche haben wir zwar gerade erst die LB1 besprochen, jedoch ist die zweite Abgabe bereits in der n\u00e4chsten Woche. Daher haben wir uns entschieden, die zweite Abgabe bereits zu besprechen. Dort m\u00fcssen wir mit Mock-Daten bereits das UI und die Grundfunktionalit\u00e4ten umsetzen. Die Datenbank wird erst in der dritten Abgabe ben\u00f6tigt. Wie das letzte Mal gab es diverse Fragen , die wir besprochen haben. Zudem gab es wieder PDF , welche die Anforderungen beschrieben. Dies habe ich mir genau durchgelesen und bereits im Unterricht fragen gestellt. Ich habe gelernt, dass die erste Umsetzung ohne eine Datenbank viel einfacher ist, da nur auf das Verhalten geachtet werden muss. Bisher habe ich immer gleichzeitig die Daten und das UI umgesetzt. Daher ist es f\u00fcr mich neu, dass ich erst Mal nur das UI umsetzen muss. Der Vorteil davon ist, dass ich so bereits Mocks habe, welche ich f\u00fcr Tests wiederverwenden kann. Merksatz: Mocks sind Daten, welche nur f\u00fcr Tests verwendet werden. Sie sind nicht f\u00fcr die Produktion gedacht. Mir ist aufgefallen, dass in unserer Klasse sehr viel Wissensdifferenz besteht. F\u00fcr die einen Ist eine Aufgabe zu schwer, f\u00fcr die anderen zu leicht. Dasher ist das setzen von Anforderungen sehr schwierig und nicht immer f\u00fcr alle Verst\u00e4ndlich.","title":"2. Abgabe Besprochen"},{"location":"Reflexion/009_Woche/#validierung","text":"Das wichtigste wenn man ein Formular hat ist, dass die Daten darin validiert werden. Dies m\u00fcssen wir auch bei der 2. Abgabe umsetzten, weswegen wir uns mit dem Thema Validierung besch\u00e4ftigt haben. Es braucht immer eine serverseitige Validation, da der Client sie ansonsten umgehen kann. Da PHP nur auf dem Server l\u00e4uft ist die Validierung etwas aufw\u00e4ndiger. Wie immer, wenn wir etwas neues Beginnen hat Herr Inauen uns ein Beispielprojekt erstellt. In diesem wurde bereits die Validation mit Fehlermeldungen umgesetzt. Somit mussten wir nur den Aufbau und Art der Validierung verstehen. Dies war f\u00fcr mich nicht schwer, da ich HTTP-Methoden kenne und weiss welche f\u00fcr was zust\u00e4ndig ist. Mit dem Thema Validierung habe ich mich zuvor schon sehr intensiv besch\u00e4ftigt, weswegen ich dabei nicht sehr viel lernte. Wie die aber in PHP aussieht und was f\u00fcr Tricks es gibt kannte ich nicht. Daher war es f\u00fcr mich sehr interessant. In meinem Projekt werde ich die Validierung auch so verbauen. Merksatz: GET ist f\u00fcr das Laden des Formulars zust\u00e4ndig. POST validiert das Formular und gibt die Fehlermeldungen zur\u00fcck. Es wird immer eine serverseitige Validierung ben\u00f6tigt. Von Blazor kenne ich die Validierung bereits. Mir ist jedoch aufgefallen, dass erst beim Senden die Fehlermeldungen angezeigt werden, was ich \u00fcberhaupt nicht toll finde. So muss immer zuerst auf den Button geklickt werden, um zu sehen, ob alles korrekt ist. Daher habe ich mich nach einer anderen L\u00f6sung umgeschaut. Bin aber bisher noch nicht f\u00fcndig geworden.","title":"Validierung"},{"location":"Reflexion/009_Woche/#ui-mockup","text":"F\u00fcr das UI des Projektes mussten wir eine Skizze zeichnen. Diese sollte aufzeigen was f\u00fcr Elemente wir verwenden und wie diese zusammenh\u00e4ngen . Im Internet suchte ich nach Farbpaletten , anhand welchen ich mein UI gestalten wollte. Dabei fand ich eine Farbpalette welche mir sehr gut gefiel. Diese habe ich dann in meinem UI verwendet. Das Mockup versehrte ich mit Logik, damit es wie ein richtiger Prototyp benutzt werden kann. Die Mockups wurden mit Figma erstellt. Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Es ist kostenlos und auf allen Ger\u00e4ten benutzt werden. Die Mockups sind \u00f6ffentlich und k\u00f6nnen hier eingesehen werden. Die Mockups sind in drei Bereiche unterteilt: Start , User und Admin . Der Startbereich ist die Startseite der Website, auf welcher die Anmeldung passiert. Der Userbereich ist die Seite, die der User sieht, wenn er sich angemeldet hat. Dort kann er seine Vorlagen herunterladen und Neue erstellen. Der Adminbereich ist die Seite, die nur die Administratoren sehen. Dort k\u00f6nnen sie die Antr\u00e4ge der User best\u00e4tigen oder ablehnen. Figma habe ich bisher f\u00fcr einige Mockups verwendet. Dieses Mal habe ich aber Logik zur Navigation hinzugef\u00fcgt, was das Ganze noch etwas komplexer machte. Wenn ich von Anfang an gewusst h\u00e4tte, dass das UI so aufwendig wird, dann h\u00e4tte ich minimaler gearbeitet. In meinem Berufsleben kann ich das Wissen sehr gut benutzen, da ich \u00f6fters Mockups erstellen muss. Merksatz: Figma ist eine Webanwendung, die es erm\u00f6glicht, gemeinsam an einem Projekt zu arbeiten. Figma erlaubt es ein Mockup mit Logik zu versehen. Ich merke wie mein Wissen immer gr\u00f6sser wird und ich immer mehr F\u00e4higkeiten erlerne. Dies ist f\u00fcr mich sehr wichtig, da ich so effizienter werde und somit gr\u00f6ssere Projekte umsetzen kann. Ich bin sehr froh, dass ich die M\u00f6glichkeit habe, mich in diesem Bereich weiterzuentwickeln .","title":"UI Mockup"},{"location":"Reflexion/010_Woche/","tags":["Reflexion"],"text":"10. Woche 03.11.2022 # Zusammenfassung Struktur 404 Landing Page Klassen ELK-Stack Monolog Kibana Einbindung Tailwind CSS DaisyUI Sinn und Zweck Einbindung Struktur # Das Projekt wurde letzte Woche fertig geplant, weswegen ich nun mit der Umsetzung beginnen konnte. Ich habe vor allem die Dateien organisiert und die Vorlage nach meinen Vorlieben angepasst. Danach habe ich die einfachsten Seiten umgesetzt, damit ich sehen kann, ob alles funktioniert. Die Seiten waren 404 und Loading . Die Seiten zu erstellen waren eigentlich nicht schwierig. Das Styling mit Tailwind CSS war zu beginn jedoch etwas schwierig, da ich noch nicht so viel Erfahrung mit Tailwind hatte. Die Klassen durften nat\u00fcrlich auch nicht fehlen, welche ich zur Zeit noch nicht benutze. Diese kommen vor allem in der n\u00e4chsten Woche zum Einsatz. F\u00fcr die Struktur aus der Planung zur Hilfe genommen. Es ist nach dem MVC-Pattern aufgebaut und hat die Ordner in Kategorien eingeteilt. Diese sind: Core Models Controller Repositories View Die Klassen aus den Models habe ich vom PlantUML abgeleitet. Dazu habe ich vor allem Copy-Paste die Klassennamen \u00fcbernommen und in PHP-Variablen umgeschrieben. Beim erstellen der Struktur habe ich gemerkt, dass eine gute Planung extrem hilfreich ist und viel Zeit spart. Dies war das erste Mal, dass ich so viel Zeit in die Planung investiert habe und ich muss sagen, dass es sich gelohnt hat. Die Konzepte hatte ich alle schon und musste sie nur noch anwenden. Dies werde ich wieder so machen. Merksatz: Mit einfachen UIs anfangen und auf diesen Aufbauen ist immer die beste L\u00f6sung. PlantUML ist eine gute Hilfe f\u00fcr die Struktur. Auch die beste Planung kann nicht mit Unwissenheit rechnen. Einiges war noch nicht klar, was sich sp\u00e4ter als komplizierter als gedacht herausstellte, wie z.B. die ELK-Stack Einbindung. Dies ist aber nicht weiter schlimm, da ich es jetzt weiss und es in Zukunft besser machen kann. ELK-Stack # Der ELK-Stack ist ein Log-Management-System . Es besteht aus drei Teilen: Elasticsearch Kibana Logstash in PHP kommt dazu noch Monolog , was die Logs erfasst und an den ELK-Stack weiterleitet. ELK ist sehr kompliziert und f\u00fcr grosse Systeme gebaut. Ich habe den Logger aufgebaut, sodass ich von PHP \u00fcber eine einfache Methode eine Meldung an Logstash senden kann. Den ELK-Stack habe ich mithilfe von Docker eingebunden. Dazu habe ich .env -Dateien verwendet, damit die Variablen alle an einem Ort sind. Mithilfe von Verbindungen ( depends_on ) habe ich die Container miteinander verbunden und ein spezielles Netzwerk erstellt. Dieses Netzwerk wird von allen Containern verwendet, damit sie sich untereinander finden k\u00f6nnen. So grenzte ich die Sicherheit ein und k\u00f6nnte konfigurieren. dass die Container auch von aussen nicht erreichbar sind. Ich habe gelernt wie der ELK-Stack aufgebaut ist und wie man ihn einsetzt und einrichtet. Nun weiss ich wie Logs strukturiert versendet werden k\u00f6nnen und logging im allgemeinen in PHP funktioniert. Zudem lernte ich wie man Konfigurationen in Docker schreibt und diese an die Container \u00fcbergibt. Merksatz: Docker ist eine gute M\u00f6glichkeit, um den Entwicklungsstacks einzubinden ohne alles zu installieren. ELK ist sehr kompliziert und f\u00fcr grosse Systeme gebaut. Mir ist aufgefallen, dass die Einrichtung von ELK-Stack ohne Vorwissen sehr kompliziert ist und ich daf\u00fcr deutlich mehr Zeit einplanen h\u00e4tte m\u00fcssen. Im gesammten habe ich \u00fcber 26 Stunden nur f\u00fcr die Einrichtung ben\u00f6tigt. Spass machte es mir aber trotzdem. Tailwind CSS # Tailwind ist ein UI Framework, welches mithilfe von Klassen das Styling erm\u00f6glicht. Normalerweise w\u00fcrde man es mit Node.js verwenden und so ein sehr komprimiertes CSS generieren. Dieses ist dann sehr performant und leicht zu erweitern. Ich habe es aber ohne Node.js verwendet, da ich es nicht installieren musste. Ich habe es einfach in den Ordner kopiert und mit einem <link> eingebunden. Dies hat den Nachteil , dass das CSS sehr gross ist und nicht komprimiert ist. Merksatz: Tailwind CSS ist performant und leicht zu erweitern. Tailwind CSS ist f\u00fcr grosse Projekte mit mehreren Entwicklern gedacht. Breit gef\u00e4chertes Wissen ist unglaublich hilfreich um neue Technologien zu lernen. Dies war das erste Mal, dass ich Tailwind verwendete und bin mit dem Ergebnis sehr zufrieden. Zuvor habe ich immer Bootstrap ben\u00fctzt, was mir zu definiert war. \u00c4nderungen waren nur schwer zu erreichen. Durch mein CSS-Vorwissen konnte ich mich schnell einarbeiten.","title":"10. Woche"},{"location":"Reflexion/010_Woche/#10-woche-03112022","text":"Zusammenfassung Struktur 404 Landing Page Klassen ELK-Stack Monolog Kibana Einbindung Tailwind CSS DaisyUI Sinn und Zweck Einbindung","title":"10. Woche 03.11.2022"},{"location":"Reflexion/010_Woche/#struktur","text":"Das Projekt wurde letzte Woche fertig geplant, weswegen ich nun mit der Umsetzung beginnen konnte. Ich habe vor allem die Dateien organisiert und die Vorlage nach meinen Vorlieben angepasst. Danach habe ich die einfachsten Seiten umgesetzt, damit ich sehen kann, ob alles funktioniert. Die Seiten waren 404 und Loading . Die Seiten zu erstellen waren eigentlich nicht schwierig. Das Styling mit Tailwind CSS war zu beginn jedoch etwas schwierig, da ich noch nicht so viel Erfahrung mit Tailwind hatte. Die Klassen durften nat\u00fcrlich auch nicht fehlen, welche ich zur Zeit noch nicht benutze. Diese kommen vor allem in der n\u00e4chsten Woche zum Einsatz. F\u00fcr die Struktur aus der Planung zur Hilfe genommen. Es ist nach dem MVC-Pattern aufgebaut und hat die Ordner in Kategorien eingeteilt. Diese sind: Core Models Controller Repositories View Die Klassen aus den Models habe ich vom PlantUML abgeleitet. Dazu habe ich vor allem Copy-Paste die Klassennamen \u00fcbernommen und in PHP-Variablen umgeschrieben. Beim erstellen der Struktur habe ich gemerkt, dass eine gute Planung extrem hilfreich ist und viel Zeit spart. Dies war das erste Mal, dass ich so viel Zeit in die Planung investiert habe und ich muss sagen, dass es sich gelohnt hat. Die Konzepte hatte ich alle schon und musste sie nur noch anwenden. Dies werde ich wieder so machen. Merksatz: Mit einfachen UIs anfangen und auf diesen Aufbauen ist immer die beste L\u00f6sung. PlantUML ist eine gute Hilfe f\u00fcr die Struktur. Auch die beste Planung kann nicht mit Unwissenheit rechnen. Einiges war noch nicht klar, was sich sp\u00e4ter als komplizierter als gedacht herausstellte, wie z.B. die ELK-Stack Einbindung. Dies ist aber nicht weiter schlimm, da ich es jetzt weiss und es in Zukunft besser machen kann.","title":"Struktur"},{"location":"Reflexion/010_Woche/#elk-stack","text":"Der ELK-Stack ist ein Log-Management-System . Es besteht aus drei Teilen: Elasticsearch Kibana Logstash in PHP kommt dazu noch Monolog , was die Logs erfasst und an den ELK-Stack weiterleitet. ELK ist sehr kompliziert und f\u00fcr grosse Systeme gebaut. Ich habe den Logger aufgebaut, sodass ich von PHP \u00fcber eine einfache Methode eine Meldung an Logstash senden kann. Den ELK-Stack habe ich mithilfe von Docker eingebunden. Dazu habe ich .env -Dateien verwendet, damit die Variablen alle an einem Ort sind. Mithilfe von Verbindungen ( depends_on ) habe ich die Container miteinander verbunden und ein spezielles Netzwerk erstellt. Dieses Netzwerk wird von allen Containern verwendet, damit sie sich untereinander finden k\u00f6nnen. So grenzte ich die Sicherheit ein und k\u00f6nnte konfigurieren. dass die Container auch von aussen nicht erreichbar sind. Ich habe gelernt wie der ELK-Stack aufgebaut ist und wie man ihn einsetzt und einrichtet. Nun weiss ich wie Logs strukturiert versendet werden k\u00f6nnen und logging im allgemeinen in PHP funktioniert. Zudem lernte ich wie man Konfigurationen in Docker schreibt und diese an die Container \u00fcbergibt. Merksatz: Docker ist eine gute M\u00f6glichkeit, um den Entwicklungsstacks einzubinden ohne alles zu installieren. ELK ist sehr kompliziert und f\u00fcr grosse Systeme gebaut. Mir ist aufgefallen, dass die Einrichtung von ELK-Stack ohne Vorwissen sehr kompliziert ist und ich daf\u00fcr deutlich mehr Zeit einplanen h\u00e4tte m\u00fcssen. Im gesammten habe ich \u00fcber 26 Stunden nur f\u00fcr die Einrichtung ben\u00f6tigt. Spass machte es mir aber trotzdem.","title":"ELK-Stack"},{"location":"Reflexion/010_Woche/#tailwind-css","text":"Tailwind ist ein UI Framework, welches mithilfe von Klassen das Styling erm\u00f6glicht. Normalerweise w\u00fcrde man es mit Node.js verwenden und so ein sehr komprimiertes CSS generieren. Dieses ist dann sehr performant und leicht zu erweitern. Ich habe es aber ohne Node.js verwendet, da ich es nicht installieren musste. Ich habe es einfach in den Ordner kopiert und mit einem <link> eingebunden. Dies hat den Nachteil , dass das CSS sehr gross ist und nicht komprimiert ist. Merksatz: Tailwind CSS ist performant und leicht zu erweitern. Tailwind CSS ist f\u00fcr grosse Projekte mit mehreren Entwicklern gedacht. Breit gef\u00e4chertes Wissen ist unglaublich hilfreich um neue Technologien zu lernen. Dies war das erste Mal, dass ich Tailwind verwendete und bin mit dem Ergebnis sehr zufrieden. Zuvor habe ich immer Bootstrap ben\u00fctzt, was mir zu definiert war. \u00c4nderungen waren nur schwer zu erreichen. Durch mein CSS-Vorwissen konnte ich mich schnell einarbeiten.","title":"Tailwind CSS"},{"location":"Reflexion/011_Woche/","tags":["Reflexion"],"text":"11. Woche 10.11.2022 # Zusammenfassung User Seiten Sign In Sign Up Profile Projekt Erstellen Bearbeiten Dashboard Regex User Seiten # In dieser Woche habe ich die User Seiten erstellt, damit man sich anmelden oder registrieren kann. Nach der Registration kommt ein Popup, welches darauf hinweist, dass die Email verifiziert werden muss. Das Email wird leider noch nicht versendet. Bei der Anmeldung kann man sich mit einem Mock-Benutzer anmelden. Die Daten werden dann in die Session gespeichert. Wenn die Applikation ohne eine g\u00fcltige Anmeldung gemacht wurde, dann wird man auf die Login-Seite weitergeleitet , damit man sich anmelden kann. Damit die Anmeldung gespeichert bleibt habe ich die Session-Handling-Wrapper verbaut. Dazu habe ich im Internet nach unz\u00e4hligen Tutorials gesucht und diese dann in meinem Projekt eingebaut. Das die Daten immer aktuell sind war durch die nicht vorhandene Datenbank eine Herausforderung . Ich habe gelernt wie man Variablen \u00fcber Abfragen hinweg in die Session speichert. Merksatz: Die Anmeldung muss in einer Session gespeichert werden. F\u00fcr mich war das Session Handling das erste Mal, dass ich mit PHP gearbeitet habe. Zu verstehen wo das session_start stehen muss war f\u00fcr mich eine Herausforderung, da es keinen Sinn macht die Session immer zu starten. Als ich es dann verstanden habe, war es relativ einfach. Projekt # Das Projekt braucht nat\u00fcrlich auch eine Seite, wor\u00fcber eine Vorlage erstellt werden kann. Dazu musste ich mir ein Konzept f\u00fcr die Erstellung und Bearbeitung realisieren. Es sollte ein Prozess geben, welcher \u00fcber mehrere Seiten hinweg l\u00e4uft. Dies war schwieriger als ich mir vorstellte, da ich nicht wusste wie ich die Daten zwischen den Seiten hin und her bekomme. Provisorisch habe ich mich f\u00fcr das visuelle ausblenden der Felder entschieden. Wirklich sch\u00f6n ist dies aber nicht. Sobald ich die Datenbank habe werde ich es \u00fcber Sessions realisieren, da ich so die Daten zwischen den Seiten hin und her bekomme. Die Daten werden dann in der Session gespeichert und beim n\u00e4chsten Aufruf der Seite wieder ausgelesen. Ich habe zuerst die einzelnen Abfragen mithilfe von Mocks simuliert und so die einzelnen Funktionen getestet. Danach habe ich die Funktionen in die Controller eingebaut. Dabei war die Dokumentation von Daisy UI sehr hilfreich, da ich so schnell die richtigen Klassen f\u00fcr die Buttons und Felder gefunden habe. Ich habe gelernt wie man mehrere Endpunkte miteinander verbindet und sie so zug\u00e4nglich f\u00fcr andere Methoden macht. Mit diesem Wissen kann ich nun Werte \u00fcber Abfragen hinweg speichern und so ein gutes User-Experience bieten. Zudem lernte ich wie ich Daten \u00fcber Anfragen hinweg speichern und validieren kann. Merksatz: Zuerst sollten alle Hilf-Funktionen programmiert werden, bevor der Rest umgesetzt wird. Mir ist aufgefallen, dass ich die Controller nicht so gut getestet habe, wie ich es eigentlich wollte. Ich habe mich darauf konzentriert, dass die Funktionen funktionieren und nicht, dass sie auch richtig funktionieren. Im ganzen habe ich f\u00fcr die Umsetzung der Funktionen 3 Arbeitstage ( 73h ) gebraucht. Regex # Heute haben wir in der Lektion Regex angeschaut. Es wird ben\u00f6tigt um Eingaben nach einer Struktur zu validieren. So kann sichergestellt werden, dass ein String die richtigen Zeichenabfolgen enth\u00e4lt. Im Unterricht haben wir uns angeschaut wie Regex in PHP geschrieben wird, da es in jeder Sprache anders ist. Wir schauten uns bekannte Muster an und was f\u00fcr Zeichen es gibt. Mithilfe von a-zA-Z kann man nur nach Buchstaben suchen. Regex kenne ich schon seit meinem ersten Lehrjahr, da es f\u00fcr Validierungen ein wichtiges Werkzeug ist. Ich habe es aber noch nie in PHP verwendet, weswegen ich mich dort in die Dokumentation eingelesen habe. Grunds\u00e4tzlich ist es aber sehr \u00e4hnlich zu anderen Dialekten . Merksatz: Regex wird verwendet um Eingaben nach einer Struktur zu validieren. Selbst ein gutes Regex-Muster zu schreiben ist sehr komplex und braucht viel \u00dcberlegungen. Viel schneller ist man da mit einer Suche im Internet oder am besten auf StackOverflow .","title":"11. Woche"},{"location":"Reflexion/011_Woche/#11-woche-10112022","text":"Zusammenfassung User Seiten Sign In Sign Up Profile Projekt Erstellen Bearbeiten Dashboard Regex","title":"11. Woche 10.11.2022"},{"location":"Reflexion/011_Woche/#user-seiten","text":"In dieser Woche habe ich die User Seiten erstellt, damit man sich anmelden oder registrieren kann. Nach der Registration kommt ein Popup, welches darauf hinweist, dass die Email verifiziert werden muss. Das Email wird leider noch nicht versendet. Bei der Anmeldung kann man sich mit einem Mock-Benutzer anmelden. Die Daten werden dann in die Session gespeichert. Wenn die Applikation ohne eine g\u00fcltige Anmeldung gemacht wurde, dann wird man auf die Login-Seite weitergeleitet , damit man sich anmelden kann. Damit die Anmeldung gespeichert bleibt habe ich die Session-Handling-Wrapper verbaut. Dazu habe ich im Internet nach unz\u00e4hligen Tutorials gesucht und diese dann in meinem Projekt eingebaut. Das die Daten immer aktuell sind war durch die nicht vorhandene Datenbank eine Herausforderung . Ich habe gelernt wie man Variablen \u00fcber Abfragen hinweg in die Session speichert. Merksatz: Die Anmeldung muss in einer Session gespeichert werden. F\u00fcr mich war das Session Handling das erste Mal, dass ich mit PHP gearbeitet habe. Zu verstehen wo das session_start stehen muss war f\u00fcr mich eine Herausforderung, da es keinen Sinn macht die Session immer zu starten. Als ich es dann verstanden habe, war es relativ einfach.","title":"User Seiten"},{"location":"Reflexion/011_Woche/#projekt","text":"Das Projekt braucht nat\u00fcrlich auch eine Seite, wor\u00fcber eine Vorlage erstellt werden kann. Dazu musste ich mir ein Konzept f\u00fcr die Erstellung und Bearbeitung realisieren. Es sollte ein Prozess geben, welcher \u00fcber mehrere Seiten hinweg l\u00e4uft. Dies war schwieriger als ich mir vorstellte, da ich nicht wusste wie ich die Daten zwischen den Seiten hin und her bekomme. Provisorisch habe ich mich f\u00fcr das visuelle ausblenden der Felder entschieden. Wirklich sch\u00f6n ist dies aber nicht. Sobald ich die Datenbank habe werde ich es \u00fcber Sessions realisieren, da ich so die Daten zwischen den Seiten hin und her bekomme. Die Daten werden dann in der Session gespeichert und beim n\u00e4chsten Aufruf der Seite wieder ausgelesen. Ich habe zuerst die einzelnen Abfragen mithilfe von Mocks simuliert und so die einzelnen Funktionen getestet. Danach habe ich die Funktionen in die Controller eingebaut. Dabei war die Dokumentation von Daisy UI sehr hilfreich, da ich so schnell die richtigen Klassen f\u00fcr die Buttons und Felder gefunden habe. Ich habe gelernt wie man mehrere Endpunkte miteinander verbindet und sie so zug\u00e4nglich f\u00fcr andere Methoden macht. Mit diesem Wissen kann ich nun Werte \u00fcber Abfragen hinweg speichern und so ein gutes User-Experience bieten. Zudem lernte ich wie ich Daten \u00fcber Anfragen hinweg speichern und validieren kann. Merksatz: Zuerst sollten alle Hilf-Funktionen programmiert werden, bevor der Rest umgesetzt wird. Mir ist aufgefallen, dass ich die Controller nicht so gut getestet habe, wie ich es eigentlich wollte. Ich habe mich darauf konzentriert, dass die Funktionen funktionieren und nicht, dass sie auch richtig funktionieren. Im ganzen habe ich f\u00fcr die Umsetzung der Funktionen 3 Arbeitstage ( 73h ) gebraucht.","title":"Projekt"},{"location":"Reflexion/011_Woche/#regex","text":"Heute haben wir in der Lektion Regex angeschaut. Es wird ben\u00f6tigt um Eingaben nach einer Struktur zu validieren. So kann sichergestellt werden, dass ein String die richtigen Zeichenabfolgen enth\u00e4lt. Im Unterricht haben wir uns angeschaut wie Regex in PHP geschrieben wird, da es in jeder Sprache anders ist. Wir schauten uns bekannte Muster an und was f\u00fcr Zeichen es gibt. Mithilfe von a-zA-Z kann man nur nach Buchstaben suchen. Regex kenne ich schon seit meinem ersten Lehrjahr, da es f\u00fcr Validierungen ein wichtiges Werkzeug ist. Ich habe es aber noch nie in PHP verwendet, weswegen ich mich dort in die Dokumentation eingelesen habe. Grunds\u00e4tzlich ist es aber sehr \u00e4hnlich zu anderen Dialekten . Merksatz: Regex wird verwendet um Eingaben nach einer Struktur zu validieren. Selbst ein gutes Regex-Muster zu schreiben ist sehr komplex und braucht viel \u00dcberlegungen. Viel schneller ist man da mit einer Suche im Internet oder am besten auf StackOverflow .","title":"Regex"},{"location":"Reflexion/012_Woche/","tags":["Reflexion"],"text":"12. Woche 17.11.2022 # Zusammenfassung Datenbank Datei Viewer Datenbank # Im Unterricht haben wir angeschaut, wie die Datenbankverbindung mithilfe von PDO gemacht wird. Wir schauten uns Prepared Statements an und was diese f\u00fcr Vorteile hingegen den traditionellen Abfragen hat. Zudem lernten wir wie ein Wrapper aufgebaut ist und was f\u00fcr einen Zweck dieser hat. Wir haben wieder eine Vorlage erhalten, die wir bearbeiten mussten. Dort war bereits eine Verbindung zur Datenbank vorhanden und wir mussten verstehen was genau passiert. Dazu gab es einen Wrapper , namens Database.php , der die Verbindung zur Datenbank herstellt und die Datenbankabfragen ausf\u00fchrt. So konnten gewisse Abfragen vor dem Ausf\u00fchren bearbeitet werden. Zudem gab es Methoden , welche die Abfragen erleichterten. Dabei habe ich gelernt, wie man in PHP SQL-Injection sichere Abfrage mithilfe von Prepared Statements ausf\u00fchrt. Aus dem \u00dcK und Tutorials kannte ich den Umgang bereits, jedoch habe ich mich noch nie tief damit besch\u00e4ftigt wie die Abfragen escaped werden. Merksatz: Prepared Statements sind SQL-Injection sichere Abfragen PDO wird zur Verbindung zu relationalen Datenbanken verwendet Das Schreiben eines Wrappers um PDO fand ich eine geniale Idee, da so wiederkehrende Methoden vereinfacht werden konnten. Aus meiner Arbeit bin ich bereits stark auf Injections sensibilisiert , weswegen mir gar nicht in den Sinn kommen w\u00fcrde keine Prepared Statements zu verwenden. Datei Viewer # Der Datei Viewer, welcher die Bearbeitung der Struktur erm\u00f6glichen sollte, habe ich aus der letzten Abgabe in diese verschoben, da es einige Probleme mit jsTree gab. Die Arbeit mit dem JSON ist schwieriger als ich dachte, da es nicht strukturiert ist. Zudem sind die Beispiele nicht komplett oder haben gar keinen Code dazu. So war es f\u00fcr mich sehr schwierig eine laufende L\u00f6sung zu bauen, da alles aus dem Kopf heraus gemacht werden musste. Ich durchst\u00f6berte die Dokumentation und unz\u00e4hlige StackOverflow Fragen, bis ich herausfand was f\u00fcr Dateien ich ben\u00f6tigte. Diese konnte ich konnte ich konditional laden, sodass ich die Dateien nur dann laden musste, wenn sie ben\u00f6tigt wurden. Zudem habe ich die CSS und JS Dateien in die Assets verschoben, damit diese nicht mehr im HTML sind. Der Nachteil ist, dass jsTree auf jQuery basiert und deswegen extrem viel geladen werden muss. Ich habe es nicht geschafft die Dateien zu optimieren, es ein zu grosses Durcheinander ist. Ich habe gelernt, dass eine gute Dokumentation einige Stunden Arbeit ersparen kann. Merksatz: jsTree ist ein JS Plugin, welches eine Baumstruktur darstellt jsTree ist auf jQuery basiert und ben\u00f6tigt viel JS und CSS Eine gute Dokumentation kann viel Zeit sparen Beim Planen des Projektes dachte ich, dass die Bearbeitung der Struktur ohne Probleme gemacht werden kann. Nun weiss ich aber, dass dies ganz und gar nicht der Fall ist. Es ist wichtig auch bei der Planung kleinere Tests zu machen, um sicherzustellen, dass die Schnittstelle kompatibel und lauff\u00e4hig ist.","title":"12. Woche"},{"location":"Reflexion/012_Woche/#12-woche-17112022","text":"Zusammenfassung Datenbank Datei Viewer","title":"12. Woche 17.11.2022"},{"location":"Reflexion/012_Woche/#datenbank","text":"Im Unterricht haben wir angeschaut, wie die Datenbankverbindung mithilfe von PDO gemacht wird. Wir schauten uns Prepared Statements an und was diese f\u00fcr Vorteile hingegen den traditionellen Abfragen hat. Zudem lernten wir wie ein Wrapper aufgebaut ist und was f\u00fcr einen Zweck dieser hat. Wir haben wieder eine Vorlage erhalten, die wir bearbeiten mussten. Dort war bereits eine Verbindung zur Datenbank vorhanden und wir mussten verstehen was genau passiert. Dazu gab es einen Wrapper , namens Database.php , der die Verbindung zur Datenbank herstellt und die Datenbankabfragen ausf\u00fchrt. So konnten gewisse Abfragen vor dem Ausf\u00fchren bearbeitet werden. Zudem gab es Methoden , welche die Abfragen erleichterten. Dabei habe ich gelernt, wie man in PHP SQL-Injection sichere Abfrage mithilfe von Prepared Statements ausf\u00fchrt. Aus dem \u00dcK und Tutorials kannte ich den Umgang bereits, jedoch habe ich mich noch nie tief damit besch\u00e4ftigt wie die Abfragen escaped werden. Merksatz: Prepared Statements sind SQL-Injection sichere Abfragen PDO wird zur Verbindung zu relationalen Datenbanken verwendet Das Schreiben eines Wrappers um PDO fand ich eine geniale Idee, da so wiederkehrende Methoden vereinfacht werden konnten. Aus meiner Arbeit bin ich bereits stark auf Injections sensibilisiert , weswegen mir gar nicht in den Sinn kommen w\u00fcrde keine Prepared Statements zu verwenden.","title":"Datenbank"},{"location":"Reflexion/012_Woche/#datei-viewer","text":"Der Datei Viewer, welcher die Bearbeitung der Struktur erm\u00f6glichen sollte, habe ich aus der letzten Abgabe in diese verschoben, da es einige Probleme mit jsTree gab. Die Arbeit mit dem JSON ist schwieriger als ich dachte, da es nicht strukturiert ist. Zudem sind die Beispiele nicht komplett oder haben gar keinen Code dazu. So war es f\u00fcr mich sehr schwierig eine laufende L\u00f6sung zu bauen, da alles aus dem Kopf heraus gemacht werden musste. Ich durchst\u00f6berte die Dokumentation und unz\u00e4hlige StackOverflow Fragen, bis ich herausfand was f\u00fcr Dateien ich ben\u00f6tigte. Diese konnte ich konnte ich konditional laden, sodass ich die Dateien nur dann laden musste, wenn sie ben\u00f6tigt wurden. Zudem habe ich die CSS und JS Dateien in die Assets verschoben, damit diese nicht mehr im HTML sind. Der Nachteil ist, dass jsTree auf jQuery basiert und deswegen extrem viel geladen werden muss. Ich habe es nicht geschafft die Dateien zu optimieren, es ein zu grosses Durcheinander ist. Ich habe gelernt, dass eine gute Dokumentation einige Stunden Arbeit ersparen kann. Merksatz: jsTree ist ein JS Plugin, welches eine Baumstruktur darstellt jsTree ist auf jQuery basiert und ben\u00f6tigt viel JS und CSS Eine gute Dokumentation kann viel Zeit sparen Beim Planen des Projektes dachte ich, dass die Bearbeitung der Struktur ohne Probleme gemacht werden kann. Nun weiss ich aber, dass dies ganz und gar nicht der Fall ist. Es ist wichtig auch bei der Planung kleinere Tests zu machen, um sicherzustellen, dass die Schnittstelle kompatibel und lauff\u00e4hig ist.","title":"Datei Viewer"},{"location":"Reflexion/013_Woche/","tags":["Reflexion"],"text":"13. Woche 24.11.2022 # Zusammenfassung Download Email Download # Ein wichtiger Bestandteil meines Projektes ist, dass aus der Konfiguration eine Vorlage generiert werden kann. Aus diesem Grund habe ich diese Woche mich an die Umsetzung des Downloads gewagt. Dazu musste ich zum einen das Projekt aus der Datenbank laden und zum anderen die Vorlage generieren. Zum Schluss sollte ein ZIP-Archiv mit allen Dateien erstellt werden. Mit dem aufsetzen einer MkDocs-Dokumentation hatte ich bereits Erfahrung , weswegen ich zuerst eine Mustervorlage erstellte. Diese hatte bereits Texte und Konfigurationen darin. Die Werte ersetzte ich dann durch Platzhalter , welche konditional ersetzt werden. Damit alle Methoden an einem zentralen Punkt zu finden sind erstellte ich einen Service . Dieser Service enth\u00e4lt alle Methoden, welche f\u00fcr den Download ben\u00f6tigt werden. Dieser Kopiert alle ben\u00f6tigten Dateien in ein tempor\u00e4res Verzeichnis und ersetzt die Platzhalter. Somit habe ich eigentlich eine eigene Template Engine geschrieben. Zum Abschluss wird das Verzeichnis als ZIP-Archiv komprimiert und zum Download angeboten. Dabei habe ich gelernt, wie man strukturiert eine Aufgabe l\u00f6st und so Schritt f\u00fcr Schritt eine Anforderung erf\u00fcllt. Zudem habe ich gelernt, dass Design Patterns nicht nur f\u00fcr die Programmierung wichtig sind, sondern auch f\u00fcr die Strukturierung von Code. Merksatz: Design Patterns sind nicht nur f\u00fcr die Programmierung wichtig, sondern auch f\u00fcr die Strukturierung von Code. Services sind isoliert und enthalten nur die Methoden, welche f\u00fcr die Aufgabe ben\u00f6tigt werden. Das Schwierigste an der ganzen Sache war, dass ZIP zu erstellen. Im Internet fand man dazu fast keine L\u00f6sung, die ein Verzeichnis zippt. Rekursiv musste ich mir selbst eine L\u00f6sung basteln, welche leider nicht immer funktioniert. Auch wenn der Service nicht kompliziert ist dauerte das Schreiben mehrere Tage und musste mehrmals \u00fcberarbeitet werden. Email # Wenn der Status eines Projektes ge\u00e4ndert wird, dann sollte der Benutzer dar\u00fcber Informiert werden, damit er weiss was er verbessern muss oder das Projekt zum Download bereit steht. F\u00fcr die Emails kann PHP verwendet werden, was \u00fcber SMTP Mails versendet. Ich fand dies L\u00f6sung jedoch unsch\u00f6n und unsicher, weswegen ich mich f\u00fcr SendGrid entschied. SendGrid ist ein Email Service Provider , welcher eine API anbietet. Diese API kann verwendet werden, um Emails zu versenden. Dazu muss nur ein Composer Packet installiert werden. Im Web UI kann eine Vorlage mit Platzhaltern erstellt werden. Diese Vorlage kann dann mit der API verwendet werden. Die API ist sehr einfach und kann mit wenigen Zeilen Code verwendet werden. In meinem Betrieb verwenden wir diese L\u00f6sung bereits, weswegen ich hier einen doppelten Lerneffekt hatte. Auf f\u00fcr diese Aufgabe erstellte ich einen Service , welche die Daten f\u00fcr die Email zusammenstellt und diese an die API sendet. Dabei musste ich beachten, dass Fehler gut abgefangen werden, da ich keine Kontrolle \u00fcber die API habe. Ich habe gelernt, dass APIs sehr einfach zu bedien sind, wenn die Dokumentation ausf\u00fchrlich ist. Zudem lernte ich wie man Emails mittels SendGrid versendet. Dies habe ich zuvor noch nie gemacht, was ich nun aber beherrsche. Merksatz: APIs sind sehr einfach zu bedienen, wenn die Dokumentation ausf\u00fchrlich ist. SendGrid ist ein Email Service Provider, welcher eine API anbietet. Viele andere Anbieter verlangen ein Konto und eine Kreditkarte . SendGrid ist kostenlos und bietet eine API an, die bis zu 100 Anfragen pro Tag erlaubt. Dies ist f\u00fcr mich ein Vorteil gegen\u00fcber anderen Anbietern. Zudem ist die API sehr einfach zu bedienen und die Dokumentation ist ausf\u00fchrlich.","title":"13. Woche"},{"location":"Reflexion/013_Woche/#13-woche-24112022","text":"Zusammenfassung Download Email","title":"13. Woche 24.11.2022"},{"location":"Reflexion/013_Woche/#download","text":"Ein wichtiger Bestandteil meines Projektes ist, dass aus der Konfiguration eine Vorlage generiert werden kann. Aus diesem Grund habe ich diese Woche mich an die Umsetzung des Downloads gewagt. Dazu musste ich zum einen das Projekt aus der Datenbank laden und zum anderen die Vorlage generieren. Zum Schluss sollte ein ZIP-Archiv mit allen Dateien erstellt werden. Mit dem aufsetzen einer MkDocs-Dokumentation hatte ich bereits Erfahrung , weswegen ich zuerst eine Mustervorlage erstellte. Diese hatte bereits Texte und Konfigurationen darin. Die Werte ersetzte ich dann durch Platzhalter , welche konditional ersetzt werden. Damit alle Methoden an einem zentralen Punkt zu finden sind erstellte ich einen Service . Dieser Service enth\u00e4lt alle Methoden, welche f\u00fcr den Download ben\u00f6tigt werden. Dieser Kopiert alle ben\u00f6tigten Dateien in ein tempor\u00e4res Verzeichnis und ersetzt die Platzhalter. Somit habe ich eigentlich eine eigene Template Engine geschrieben. Zum Abschluss wird das Verzeichnis als ZIP-Archiv komprimiert und zum Download angeboten. Dabei habe ich gelernt, wie man strukturiert eine Aufgabe l\u00f6st und so Schritt f\u00fcr Schritt eine Anforderung erf\u00fcllt. Zudem habe ich gelernt, dass Design Patterns nicht nur f\u00fcr die Programmierung wichtig sind, sondern auch f\u00fcr die Strukturierung von Code. Merksatz: Design Patterns sind nicht nur f\u00fcr die Programmierung wichtig, sondern auch f\u00fcr die Strukturierung von Code. Services sind isoliert und enthalten nur die Methoden, welche f\u00fcr die Aufgabe ben\u00f6tigt werden. Das Schwierigste an der ganzen Sache war, dass ZIP zu erstellen. Im Internet fand man dazu fast keine L\u00f6sung, die ein Verzeichnis zippt. Rekursiv musste ich mir selbst eine L\u00f6sung basteln, welche leider nicht immer funktioniert. Auch wenn der Service nicht kompliziert ist dauerte das Schreiben mehrere Tage und musste mehrmals \u00fcberarbeitet werden.","title":"Download"},{"location":"Reflexion/013_Woche/#email","text":"Wenn der Status eines Projektes ge\u00e4ndert wird, dann sollte der Benutzer dar\u00fcber Informiert werden, damit er weiss was er verbessern muss oder das Projekt zum Download bereit steht. F\u00fcr die Emails kann PHP verwendet werden, was \u00fcber SMTP Mails versendet. Ich fand dies L\u00f6sung jedoch unsch\u00f6n und unsicher, weswegen ich mich f\u00fcr SendGrid entschied. SendGrid ist ein Email Service Provider , welcher eine API anbietet. Diese API kann verwendet werden, um Emails zu versenden. Dazu muss nur ein Composer Packet installiert werden. Im Web UI kann eine Vorlage mit Platzhaltern erstellt werden. Diese Vorlage kann dann mit der API verwendet werden. Die API ist sehr einfach und kann mit wenigen Zeilen Code verwendet werden. In meinem Betrieb verwenden wir diese L\u00f6sung bereits, weswegen ich hier einen doppelten Lerneffekt hatte. Auf f\u00fcr diese Aufgabe erstellte ich einen Service , welche die Daten f\u00fcr die Email zusammenstellt und diese an die API sendet. Dabei musste ich beachten, dass Fehler gut abgefangen werden, da ich keine Kontrolle \u00fcber die API habe. Ich habe gelernt, dass APIs sehr einfach zu bedien sind, wenn die Dokumentation ausf\u00fchrlich ist. Zudem lernte ich wie man Emails mittels SendGrid versendet. Dies habe ich zuvor noch nie gemacht, was ich nun aber beherrsche. Merksatz: APIs sind sehr einfach zu bedienen, wenn die Dokumentation ausf\u00fchrlich ist. SendGrid ist ein Email Service Provider, welcher eine API anbietet. Viele andere Anbieter verlangen ein Konto und eine Kreditkarte . SendGrid ist kostenlos und bietet eine API an, die bis zu 100 Anfragen pro Tag erlaubt. Dies ist f\u00fcr mich ein Vorteil gegen\u00fcber anderen Anbietern. Zudem ist die API sehr einfach zu bedienen und die Dokumentation ist ausf\u00fchrlich.","title":"Email"},{"location":"Reflexion/014_Woche/","tags":["Reflexion"],"text":"14. Woche 01.12.2022 # Zusammenfassung Sessions Cookies Sessions # Im Unterricht schauten wir uns an was Sessions sind und wie sie sich mit Cookies unterschieden . Den Unterschied zwischen den beiden zu kennen ist wichtig, da sie fundamental eine andere Funktionsweise besitzen. In einer Dokumentation schrieb ich mir alle wichtigen Informationen auf, welche ich f\u00fcr die Reflexion ben\u00f6tige. Auf PHP-Einfach lasen wir uns die Dokumentation zu Sessions durch. Dort wurde uns erkl\u00e4rt, wie wir Sessions in PHP verwenden k\u00f6nnen. Wir haben uns die Dokumentation durchgelesen und die wichtigsten Punkte zusammengefasst . Herr Inauen zeigte uns in einer Vorlage wie man eine Session erstellt. Das Sessions und Cookies nicht dasselbe sind wusste ich. Jedoch war mir die Anwendung neu. Ich wusste, dass sie auf dem Server gespeichert werden und dass sie eine Identifikation erm\u00f6glichen. Jedoch wusste ich nicht, dass sie verschl\u00fcsselt werden k\u00f6nnen. Das ist ein wichtiger Punkt, da so die Daten gesch\u00fctzt sind. Merksatz: Sessions & Cookies sind nicht dasselbe Sessions sind eine M\u00f6glichkeit, um Daten zwischen mehreren Seitenaufrufen zu speichern. Sessions werden in der $_SESSION -Variable gespeichert. Sessions werden mit der Funktion session_start() gestartet. Sessions werden mit der Funktion session_destroy() beendet. Mir ist aufgefallen, dass ich mich mit Sessions noch nicht richtig besch\u00e4ftigt habe. Ich habe mich mit Cookies besch\u00e4ftigt, jedoch nicht mit Sessions. Ich werde mir Sessions noch genauer anschauen und mich mit der Anwendung auseinandersetzen . Cookies # Zum Thema Cookies haben wir w\u00e4hrend den Lektionen nicht sehr viel gemacht. Wir unterhielten uns nur \u00fcber die Anwendung und das Sessions Cookies benutzen. Als Hausaufgabe mussten wir uns die Dokumentation zu Cookies durchlesen und die wichtigsten Punkte zusammenfassen . Zudem mussten wir eine Applikation schreiben, welche einzigartige Benutzer identifiziert. Um auch \u00fcber Sessions hinweg diese zu identifizieren, mussten wir Cookies verwenden. Als Unterlagen bekamen wir die Dokumentation von PHP-Einfach . Diese waren mir jedoch zu oberfl\u00e4chlich, weswegen ich mir die MSDN-Dokumentation zu Cookies durchlas. Dort wurde mir erkl\u00e4rt, wie ich Cookies erstellen kann und wie ich sie verwenden kann. Zudem wurde mir erkl\u00e4rt, wie ich Cookies l\u00f6schen kann. Durch die Dokumentation lernte ich, dass Cookies \u00fcber das setzten der Lebenszeit gel\u00f6scht werden k\u00f6nnen. Zudem lernte ich, dass sie \u00fcber den Header Set-Cookie gesetzt werden. Ich dachte zuvor, dass sie \u00fcber JavaScript gesetzt werden m\u00fcssen. Ich habe bereits Mal einen Vortrag \u00fcber Cookies gehalten, was mir einen grossen Vorteil verschaffte. Merksatz: Cookies sind kleine Textdateien , die von einer Webseite auf dem Computer des Benutzers gespeichert werden. Cookies werden mit der Funktion setcookie() erstellt. Cookies werden mit der Funktion $_COOKIE ausgelesen. Cookies werden mit der Funktion setcookie() gel\u00f6scht. Cookies werden \u00fcber HTTP-Header gesendet. Durch das Schreiben der Zusammenfassung merkte ich, dass ich bereits ein grosses Basiswissen erlangte und so schnell mich in neue Inhalte einarbeiten kann. Zudem ist es meist einfacher als man denkt, wenn man einfach beginnt und schaut wie es sich entwickelt.","title":"14. Woche"},{"location":"Reflexion/014_Woche/#14-woche-01122022","text":"Zusammenfassung Sessions Cookies","title":"14. Woche 01.12.2022"},{"location":"Reflexion/014_Woche/#sessions","text":"Im Unterricht schauten wir uns an was Sessions sind und wie sie sich mit Cookies unterschieden . Den Unterschied zwischen den beiden zu kennen ist wichtig, da sie fundamental eine andere Funktionsweise besitzen. In einer Dokumentation schrieb ich mir alle wichtigen Informationen auf, welche ich f\u00fcr die Reflexion ben\u00f6tige. Auf PHP-Einfach lasen wir uns die Dokumentation zu Sessions durch. Dort wurde uns erkl\u00e4rt, wie wir Sessions in PHP verwenden k\u00f6nnen. Wir haben uns die Dokumentation durchgelesen und die wichtigsten Punkte zusammengefasst . Herr Inauen zeigte uns in einer Vorlage wie man eine Session erstellt. Das Sessions und Cookies nicht dasselbe sind wusste ich. Jedoch war mir die Anwendung neu. Ich wusste, dass sie auf dem Server gespeichert werden und dass sie eine Identifikation erm\u00f6glichen. Jedoch wusste ich nicht, dass sie verschl\u00fcsselt werden k\u00f6nnen. Das ist ein wichtiger Punkt, da so die Daten gesch\u00fctzt sind. Merksatz: Sessions & Cookies sind nicht dasselbe Sessions sind eine M\u00f6glichkeit, um Daten zwischen mehreren Seitenaufrufen zu speichern. Sessions werden in der $_SESSION -Variable gespeichert. Sessions werden mit der Funktion session_start() gestartet. Sessions werden mit der Funktion session_destroy() beendet. Mir ist aufgefallen, dass ich mich mit Sessions noch nicht richtig besch\u00e4ftigt habe. Ich habe mich mit Cookies besch\u00e4ftigt, jedoch nicht mit Sessions. Ich werde mir Sessions noch genauer anschauen und mich mit der Anwendung auseinandersetzen .","title":"Sessions"},{"location":"Reflexion/014_Woche/#cookies","text":"Zum Thema Cookies haben wir w\u00e4hrend den Lektionen nicht sehr viel gemacht. Wir unterhielten uns nur \u00fcber die Anwendung und das Sessions Cookies benutzen. Als Hausaufgabe mussten wir uns die Dokumentation zu Cookies durchlesen und die wichtigsten Punkte zusammenfassen . Zudem mussten wir eine Applikation schreiben, welche einzigartige Benutzer identifiziert. Um auch \u00fcber Sessions hinweg diese zu identifizieren, mussten wir Cookies verwenden. Als Unterlagen bekamen wir die Dokumentation von PHP-Einfach . Diese waren mir jedoch zu oberfl\u00e4chlich, weswegen ich mir die MSDN-Dokumentation zu Cookies durchlas. Dort wurde mir erkl\u00e4rt, wie ich Cookies erstellen kann und wie ich sie verwenden kann. Zudem wurde mir erkl\u00e4rt, wie ich Cookies l\u00f6schen kann. Durch die Dokumentation lernte ich, dass Cookies \u00fcber das setzten der Lebenszeit gel\u00f6scht werden k\u00f6nnen. Zudem lernte ich, dass sie \u00fcber den Header Set-Cookie gesetzt werden. Ich dachte zuvor, dass sie \u00fcber JavaScript gesetzt werden m\u00fcssen. Ich habe bereits Mal einen Vortrag \u00fcber Cookies gehalten, was mir einen grossen Vorteil verschaffte. Merksatz: Cookies sind kleine Textdateien , die von einer Webseite auf dem Computer des Benutzers gespeichert werden. Cookies werden mit der Funktion setcookie() erstellt. Cookies werden mit der Funktion $_COOKIE ausgelesen. Cookies werden mit der Funktion setcookie() gel\u00f6scht. Cookies werden \u00fcber HTTP-Header gesendet. Durch das Schreiben der Zusammenfassung merkte ich, dass ich bereits ein grosses Basiswissen erlangte und so schnell mich in neue Inhalte einarbeiten kann. Zudem ist es meist einfacher als man denkt, wenn man einfach beginnt und schaut wie es sich entwickelt.","title":"Cookies"},{"location":"Reflexion/015_Woche/","tags":["Reflexion"],"text":"15. Woche 08.12.2022 # Zusammenfassung Benutzer Counter PHP Login Benutzer Counter # F\u00fcr den Benutzerz\u00e4hler von letzter Woche habe ich nun eine Zusammenfassung geschrieben, in welcher ich die wichtigsten Punkte notierte. Anhand dieser Notizen k\u00f6nnte nun jemand mit wenig Wissen Sessions und Cookies verwenden. F\u00fcr eine klare Struktur habe ich die Notizen in Abschnitte unterteilt und diese mit einer \u00dcberschrift versehen. Zuerst beschrieb ich den Aufbau der Dateien. Als n\u00e4chstes Beschrieb ich das Programm mit kleineren Codeausschnitten. Mithilfe von Kommentaren habe ich die einzelnen Schritte erkl\u00e4rt. Zum Schluss habe ich noch einige Kleinigkeiten beschrieben, die ich nicht in den Code eingef\u00fcgt habe. Der Benutzerz\u00e4hler ist ein einfaches Beispiel, welches zeigt, wie Sessions und Cookies miteinander verbunden werden k\u00f6nnen. Es ist sozusagen das Hello World Beispiel f\u00fcr Sessions und Cookies. Jedoch ist es nicht das einzige Beispiel. Es gibt noch viele andere Anwendungsf\u00e4lle, in welchen Sessions und Cookies verwendet werden k\u00f6nnen. Merksatz: Kommentare sind wichtig, um den Code zu verstehen. Zusammenfassungen helfen zur Reflexion und Vertiefung des Wissens. Kleinere Beispiele aus dem Internet sind oft nicht ausreichend, um das Wissen zu vertiefen. Daher ist es wichtig, dass man sich die Zeit nimmt, um das Wissen zu vertiefen. Dazu geh\u00f6rt auch, dass die eigenen Projekte dokumentiert werden. PHP Login # Bei meinem Projekt habe ich bereits vor einigen Wochen die Anmeldung realisiert. Dabei funktionierten alle Tests ohne Probleme. Nun habe ich die Anmeldung auf einem anderen Rechner getestet und festgestellt, dass die Anmeldung nicht funktioniert. Nach einigen Stunden habe ich den Fehler gefunden. Der Hashwert des Passwords war zu lange, sodass die Verschl\u00fcsselung nicht mehr funktioniert hat. Das Ende des Passwortes wurde abgeschnitten, was dazu f\u00fchrte, dass das Passwort nicht richtig validiert wurde. Ich habe den Hashwert nun auf 32 Zeichen verk\u00fcrzt und die Anmeldung funktioniert wieder. Da ich mit dieser L\u00f6sung nicht wirklich zufrieden bin habe ich mich im Internet schlau gemacht, was die Ursache davon ist. Der Verschl\u00fcsselungsalgorithmus hat eine maximale L\u00e4nge von 72 Zeichen. Es gibt andere Algorithmen, jedoch haben diese ein \u00e4hnliches Verhalten. Durch die Recherche habe ich auch herausgefunden wie die Verschl\u00fcsselungen intern funktionieren und weshalb dieses Limit existiert. Die Verschl\u00fcsselung wird durch einen Hashwert dargestellt. Dieser besteht aus einem Algorithmus und einem Salt. Der Salt ist ein zuf\u00e4llig generierter Wert, der dem Passwort vorangestellt wird. Dadurch wird das Passwort unabh\u00e4ngig vom Algorithmus. Der Salt wird bei jedem Versuch neu generiert. Der Salt wird nicht gespeichert, da er nur dazu dient, dass das Passwort unabh\u00e4ngig vom Algorithmus ist. Der Salt wird nur bei der Verschl\u00fcsselung verwendet. Wenn die Hashwerte \u00fcbereinstimmen ist das Passwort korrekt. Merksatz: Algorithmen verwenden einen Salt, um das Passwort unabh\u00e4ngig vom Algorithmus zu machen. Der Salt ist ein zuf\u00e4llig generierter Wert , der dem Passwort vorangestellt wird. Wenn ein Passwort zu lang ist, wird es abgeschnitten. Dies halte ich f\u00fcr ein Sicherheitsproblem , da keine Warnung oder sonstiges angezeigt wird. Der Benutzer wird nicht dar\u00fcber informiert, dass sein Passwort zu lang ist. Jedoch wird er gewarnt , wenn eine Position in einem Array nicht existiert.","title":"15. Woche"},{"location":"Reflexion/015_Woche/#15-woche-08122022","text":"Zusammenfassung Benutzer Counter PHP Login","title":"15. Woche 08.12.2022"},{"location":"Reflexion/015_Woche/#benutzer-counter","text":"F\u00fcr den Benutzerz\u00e4hler von letzter Woche habe ich nun eine Zusammenfassung geschrieben, in welcher ich die wichtigsten Punkte notierte. Anhand dieser Notizen k\u00f6nnte nun jemand mit wenig Wissen Sessions und Cookies verwenden. F\u00fcr eine klare Struktur habe ich die Notizen in Abschnitte unterteilt und diese mit einer \u00dcberschrift versehen. Zuerst beschrieb ich den Aufbau der Dateien. Als n\u00e4chstes Beschrieb ich das Programm mit kleineren Codeausschnitten. Mithilfe von Kommentaren habe ich die einzelnen Schritte erkl\u00e4rt. Zum Schluss habe ich noch einige Kleinigkeiten beschrieben, die ich nicht in den Code eingef\u00fcgt habe. Der Benutzerz\u00e4hler ist ein einfaches Beispiel, welches zeigt, wie Sessions und Cookies miteinander verbunden werden k\u00f6nnen. Es ist sozusagen das Hello World Beispiel f\u00fcr Sessions und Cookies. Jedoch ist es nicht das einzige Beispiel. Es gibt noch viele andere Anwendungsf\u00e4lle, in welchen Sessions und Cookies verwendet werden k\u00f6nnen. Merksatz: Kommentare sind wichtig, um den Code zu verstehen. Zusammenfassungen helfen zur Reflexion und Vertiefung des Wissens. Kleinere Beispiele aus dem Internet sind oft nicht ausreichend, um das Wissen zu vertiefen. Daher ist es wichtig, dass man sich die Zeit nimmt, um das Wissen zu vertiefen. Dazu geh\u00f6rt auch, dass die eigenen Projekte dokumentiert werden.","title":"Benutzer Counter"},{"location":"Reflexion/015_Woche/#php-login","text":"Bei meinem Projekt habe ich bereits vor einigen Wochen die Anmeldung realisiert. Dabei funktionierten alle Tests ohne Probleme. Nun habe ich die Anmeldung auf einem anderen Rechner getestet und festgestellt, dass die Anmeldung nicht funktioniert. Nach einigen Stunden habe ich den Fehler gefunden. Der Hashwert des Passwords war zu lange, sodass die Verschl\u00fcsselung nicht mehr funktioniert hat. Das Ende des Passwortes wurde abgeschnitten, was dazu f\u00fchrte, dass das Passwort nicht richtig validiert wurde. Ich habe den Hashwert nun auf 32 Zeichen verk\u00fcrzt und die Anmeldung funktioniert wieder. Da ich mit dieser L\u00f6sung nicht wirklich zufrieden bin habe ich mich im Internet schlau gemacht, was die Ursache davon ist. Der Verschl\u00fcsselungsalgorithmus hat eine maximale L\u00e4nge von 72 Zeichen. Es gibt andere Algorithmen, jedoch haben diese ein \u00e4hnliches Verhalten. Durch die Recherche habe ich auch herausgefunden wie die Verschl\u00fcsselungen intern funktionieren und weshalb dieses Limit existiert. Die Verschl\u00fcsselung wird durch einen Hashwert dargestellt. Dieser besteht aus einem Algorithmus und einem Salt. Der Salt ist ein zuf\u00e4llig generierter Wert, der dem Passwort vorangestellt wird. Dadurch wird das Passwort unabh\u00e4ngig vom Algorithmus. Der Salt wird bei jedem Versuch neu generiert. Der Salt wird nicht gespeichert, da er nur dazu dient, dass das Passwort unabh\u00e4ngig vom Algorithmus ist. Der Salt wird nur bei der Verschl\u00fcsselung verwendet. Wenn die Hashwerte \u00fcbereinstimmen ist das Passwort korrekt. Merksatz: Algorithmen verwenden einen Salt, um das Passwort unabh\u00e4ngig vom Algorithmus zu machen. Der Salt ist ein zuf\u00e4llig generierter Wert , der dem Passwort vorangestellt wird. Wenn ein Passwort zu lang ist, wird es abgeschnitten. Dies halte ich f\u00fcr ein Sicherheitsproblem , da keine Warnung oder sonstiges angezeigt wird. Der Benutzer wird nicht dar\u00fcber informiert, dass sein Passwort zu lang ist. Jedoch wird er gewarnt , wenn eine Position in einem Array nicht existiert.","title":"PHP Login"},{"location":"Reflexion/016_Woche/","tags":["Reflexion"],"text":"16. Woche 15.12.2022 # Zusammenfassung Redis Testf\u00e4lle Redis # Redis ist eine in Memory Datenbank, welche f\u00fcr Cache und Session verwendet wird. Der Vorteil liegt darin, dass es sehr schnell ist. Die Daten werden in einem Key-Value Format gespeichert, was eine schnelle Suche erm\u00f6glicht. Ich wollte, dass die Session Daten in Redis gespeichert werden, damit ich eine dezentrale Verwaltung habe. Im Internet suchte ich nach bestehenden Beispielen, welche mir zeigten wie der Aufbau sein sollte. Leider fand ich nur alte Versionen, welche nicht funktionieren oder nicht mehr aktuell sind. Ich entschied mich, die Datenbank von Hand aufsetzen und so sicherzustellen, dass alles funktioniert. Beim Aufsetzten habe ich gelernt, dass eine aktuelle Dokumentation sehr wichtig ist. Das n\u00e4chste Mal w\u00fcrde ich zuerst ein kleines Projekt ohne alle anderen Abh\u00e4ngigkeiten aufsetzen, um zu sehen ob es funktioniert. So k\u00f6nnte ich sichergehen, dass das Problem nicht an einer anderen Stelle liegt. Ich habe gelernt wie man Redis aufsetzt und mithilfe von Docker konfiguriert. Merksatz: Redis ist eine In Memory Datenbank die als Cache und Session verwendet wird. Die Daten werden in einem Key-Value Format gespeichert. Mir ist aufgefallen, dass ich mich nicht genug mit der Dokumentation besch\u00e4ftigt habe. Ich habe mich auf die Suche nach einem Beispiel gemacht, welches mir zeigt wie ich die Datenbank aufsetze. Leider habe ich nur alte Versionen gefunden, welche nicht mehr funktionieren. Testf\u00e4lle # In der n\u00e4chsten Abgabe m\u00fcssen wir Testf\u00e4lle schreiben, welche dann durchlaufen werden. Anhand der Testf\u00e4lle wird gepr\u00fcft, ob die Software sich richtig verh\u00e4lt. Mithilfe eines Testplans k\u00f6nnte automatisch \u00fcberpr\u00fcft werden, dass alles wie erwartet l\u00e4uft. Im Modul 226B haben wir bereits f\u00fcr das Projekt ein Testprotokoll mit Testf\u00e4llen geschrieben. Davon hatte ich bereits eine Vorlage , welche mir erlaubte, dass ich nicht von vorne anfangen musste. Ich habe die Testf\u00e4lle aus dem Testprotokoll \u00fcbernommen und in das neue Projekt \u00fcbertragen. Ich habe gelernt, wie ich effizient F\u00e4lle definiere und wie ich diese in einem Testplan verwende. Ich habe gelernt, wie ich Testf\u00e4lle schreibe und wie ich diese in einem Testplan verwende. Merksatz: Testf\u00e4lle sind eine Beschreibung, wie die Software sich in einem spezifischen Scenario verhalten soll. Testf\u00e4lle werden in einem Testplan verwendet. Testf\u00e4lle erst am Ende des Projektes zu schreiben ist sehr einfach und effizient. Jedoch ist so nicht vorgeschrieben wie die Applikation sich verhalten soll. Aus diesem Grund finde ich es besser sich bereits zu Beginn \u00fcber die Testf\u00e4lle Gedanken zu machen, damit klar ist was der normale Ablauf ist.","title":"16. Woche"},{"location":"Reflexion/016_Woche/#16-woche-15122022","text":"Zusammenfassung Redis Testf\u00e4lle","title":"16. Woche 15.12.2022"},{"location":"Reflexion/016_Woche/#redis","text":"Redis ist eine in Memory Datenbank, welche f\u00fcr Cache und Session verwendet wird. Der Vorteil liegt darin, dass es sehr schnell ist. Die Daten werden in einem Key-Value Format gespeichert, was eine schnelle Suche erm\u00f6glicht. Ich wollte, dass die Session Daten in Redis gespeichert werden, damit ich eine dezentrale Verwaltung habe. Im Internet suchte ich nach bestehenden Beispielen, welche mir zeigten wie der Aufbau sein sollte. Leider fand ich nur alte Versionen, welche nicht funktionieren oder nicht mehr aktuell sind. Ich entschied mich, die Datenbank von Hand aufsetzen und so sicherzustellen, dass alles funktioniert. Beim Aufsetzten habe ich gelernt, dass eine aktuelle Dokumentation sehr wichtig ist. Das n\u00e4chste Mal w\u00fcrde ich zuerst ein kleines Projekt ohne alle anderen Abh\u00e4ngigkeiten aufsetzen, um zu sehen ob es funktioniert. So k\u00f6nnte ich sichergehen, dass das Problem nicht an einer anderen Stelle liegt. Ich habe gelernt wie man Redis aufsetzt und mithilfe von Docker konfiguriert. Merksatz: Redis ist eine In Memory Datenbank die als Cache und Session verwendet wird. Die Daten werden in einem Key-Value Format gespeichert. Mir ist aufgefallen, dass ich mich nicht genug mit der Dokumentation besch\u00e4ftigt habe. Ich habe mich auf die Suche nach einem Beispiel gemacht, welches mir zeigt wie ich die Datenbank aufsetze. Leider habe ich nur alte Versionen gefunden, welche nicht mehr funktionieren.","title":"Redis"},{"location":"Reflexion/016_Woche/#testfalle","text":"In der n\u00e4chsten Abgabe m\u00fcssen wir Testf\u00e4lle schreiben, welche dann durchlaufen werden. Anhand der Testf\u00e4lle wird gepr\u00fcft, ob die Software sich richtig verh\u00e4lt. Mithilfe eines Testplans k\u00f6nnte automatisch \u00fcberpr\u00fcft werden, dass alles wie erwartet l\u00e4uft. Im Modul 226B haben wir bereits f\u00fcr das Projekt ein Testprotokoll mit Testf\u00e4llen geschrieben. Davon hatte ich bereits eine Vorlage , welche mir erlaubte, dass ich nicht von vorne anfangen musste. Ich habe die Testf\u00e4lle aus dem Testprotokoll \u00fcbernommen und in das neue Projekt \u00fcbertragen. Ich habe gelernt, wie ich effizient F\u00e4lle definiere und wie ich diese in einem Testplan verwende. Ich habe gelernt, wie ich Testf\u00e4lle schreibe und wie ich diese in einem Testplan verwende. Merksatz: Testf\u00e4lle sind eine Beschreibung, wie die Software sich in einem spezifischen Scenario verhalten soll. Testf\u00e4lle werden in einem Testplan verwendet. Testf\u00e4lle erst am Ende des Projektes zu schreiben ist sehr einfach und effizient. Jedoch ist so nicht vorgeschrieben wie die Applikation sich verhalten soll. Aus diesem Grund finde ich es besser sich bereits zu Beginn \u00fcber die Testf\u00e4lle Gedanken zu machen, damit klar ist was der normale Ablauf ist.","title":"Testf\u00e4lle"},{"location":"Reflexion/017_Woche/","tags":["Reflexion"],"text":"17. Woche 22.12.2022 # Zusammenfassung Sicherheitsl\u00fccken Concept Map Ausfall Diese Woche hatten die Applikationsentwickler eine Pr\u00fcfung im Modul 326, in welchem wir ein Projekt von Beginn bis Ende realisieren mussten. Der Verpasste Inhalt wurde dennoch im Selbststudium nachgeholt. Sicherheitsl\u00fccken # In letzter Zeit gab es wieder viele Sicherheitsl\u00fccken , welche f\u00fcr Unruhe sorgten. Die bekanntesten waren Citrix und das FBI . Das FBI hat auf einem nicht gen\u00fcgen gesicherten Server wichtige personenbezogene Daten gespeichert. Angreifer konnte sich so Zugang zu den Daten verschaffen und diese ver\u00f6ffentlichen. Citrix hat eine Sicherheitsl\u00fccke in der Software, welche die Kommunikation zwischen den Clients und dem Server erm\u00f6glicht ( RCE ). Diese L\u00fccke erm\u00f6glichte es Angreifern, sich Zugang zu den Servern zu verschaffen und diese zu \u00fcbernehmen. Anhand von Internetartikeln habe ich die Sicherheitsl\u00fccken analysiert und versucht zu verstehen, wie diese entstanden sind. Solche L\u00fccken treten immer wieder auf und bleiben meist lange offen, bis sie entdeckt werden. Mithilfe von CVE - Listen kann nachgeschaut werden, welche Sicherheitsl\u00fccken es gibt und wie diese behoben werden k\u00f6nnen. Ich habe gelernt, dass es wichtig ist Sicherheitsl\u00fccken zu kennen und zu verstehen wie sie auftreten. Durch dieses Wissen kann ich selbst nach L\u00fccken suchen und diese fr\u00fchzeitig vermeiden. F\u00fcr die Software, welche ich selbst programmiere, ist es wichtig, dass ich die Sicherheitsl\u00fccken kenne und diese vermeide. Durch das Vermeiden von Sicherheitsl\u00fccken kann ich die Sicherheit meiner Software erh\u00f6hen und somit die Sicherheit der Daten, welche mit meiner Software verarbeitet werden. Merksatz: Sicherheitsl\u00fccken sind Schwachstellen in Software, welche es Angreifern erm\u00f6glichen, sich Zugang zu Daten zu verschaffen. CVE-Listen sind Listen, welche Sicherheitsl\u00fccken aufzeigen und wie diese behoben werden k\u00f6nnen. Wissen \u00fcber Sicherheitsl\u00fccken ist wichtig, um diese fr\u00fchzeitig zu vermeiden. Mir ist aufgefallen, dass gewisse Firmen die Sicherheitsl\u00fccken nicht schnell genug beheben oder dies gar nicht \u00f6ffentlich machen. Dies ist sehr gef\u00e4hrlich, da Angreifer so lange Zeit haben, um sich Zugang zu den Daten zu verschaffen. Es ist wichtig, dass die L\u00fccken \u00f6ffentlich gemacht werden, da gewisse Firmen ansonsten keine Updates durchf\u00fchren. Concept Map # Bei dieser Abgabe mussten wir wieder ein Concept Map erstellen. Dieses Mal ging es um Sessions , Cookies und Authorisierungen . Die Begriffe sind sehr einfach zu verkn\u00fcpfen, da sie alle zusammenh\u00e4ngen. Danach schrieb ich das UML Diagramm und die Notizen zu den Schl\u00fcsselw\u00f6rtern. Wie das letzte Mal habe ich zuerst mich \u00fcber alle Begriffe informiert und m\u00f6glichst viel Wissen dar\u00fcber aufgebaut. Durch meine Zusammenfassung hatte ich bereit eine grosse Erfahrung, welche mir half. Danach habe ich die Zusammenh\u00e4nge analysiert und eingeteilt. Ich habe die Begriffe in 3 Kategorien eingeteilt: Server , Client und Daten . Danach habe ich die Begriffe mit den Kategorien verkn\u00fcpft und die Notizen geschrieben. Merksatz: Sessions sind tempor\u00e4re Daten, welche auf dem Server gespeichert werden. Cookies sind tempor\u00e4re Daten, welche auf dem Client gespeichert werden. Dies ist das letzte Mal, dass wir eine Concept Map erstellen m\u00fcssen. Ich habe gelernt, dass es wichtig ist, sich vorher gut zu informieren und m\u00f6glichst viel Wissen aufzubauen. Durch das Aufbauen von Wissen kann ich die Zusammenh\u00e4nge besser verstehen und diese besser erkl\u00e4ren.","title":"17. Woche"},{"location":"Reflexion/017_Woche/#17-woche-22122022","text":"Zusammenfassung Sicherheitsl\u00fccken Concept Map Ausfall Diese Woche hatten die Applikationsentwickler eine Pr\u00fcfung im Modul 326, in welchem wir ein Projekt von Beginn bis Ende realisieren mussten. Der Verpasste Inhalt wurde dennoch im Selbststudium nachgeholt.","title":"17. Woche 22.12.2022"},{"location":"Reflexion/017_Woche/#sicherheitslucken","text":"In letzter Zeit gab es wieder viele Sicherheitsl\u00fccken , welche f\u00fcr Unruhe sorgten. Die bekanntesten waren Citrix und das FBI . Das FBI hat auf einem nicht gen\u00fcgen gesicherten Server wichtige personenbezogene Daten gespeichert. Angreifer konnte sich so Zugang zu den Daten verschaffen und diese ver\u00f6ffentlichen. Citrix hat eine Sicherheitsl\u00fccke in der Software, welche die Kommunikation zwischen den Clients und dem Server erm\u00f6glicht ( RCE ). Diese L\u00fccke erm\u00f6glichte es Angreifern, sich Zugang zu den Servern zu verschaffen und diese zu \u00fcbernehmen. Anhand von Internetartikeln habe ich die Sicherheitsl\u00fccken analysiert und versucht zu verstehen, wie diese entstanden sind. Solche L\u00fccken treten immer wieder auf und bleiben meist lange offen, bis sie entdeckt werden. Mithilfe von CVE - Listen kann nachgeschaut werden, welche Sicherheitsl\u00fccken es gibt und wie diese behoben werden k\u00f6nnen. Ich habe gelernt, dass es wichtig ist Sicherheitsl\u00fccken zu kennen und zu verstehen wie sie auftreten. Durch dieses Wissen kann ich selbst nach L\u00fccken suchen und diese fr\u00fchzeitig vermeiden. F\u00fcr die Software, welche ich selbst programmiere, ist es wichtig, dass ich die Sicherheitsl\u00fccken kenne und diese vermeide. Durch das Vermeiden von Sicherheitsl\u00fccken kann ich die Sicherheit meiner Software erh\u00f6hen und somit die Sicherheit der Daten, welche mit meiner Software verarbeitet werden. Merksatz: Sicherheitsl\u00fccken sind Schwachstellen in Software, welche es Angreifern erm\u00f6glichen, sich Zugang zu Daten zu verschaffen. CVE-Listen sind Listen, welche Sicherheitsl\u00fccken aufzeigen und wie diese behoben werden k\u00f6nnen. Wissen \u00fcber Sicherheitsl\u00fccken ist wichtig, um diese fr\u00fchzeitig zu vermeiden. Mir ist aufgefallen, dass gewisse Firmen die Sicherheitsl\u00fccken nicht schnell genug beheben oder dies gar nicht \u00f6ffentlich machen. Dies ist sehr gef\u00e4hrlich, da Angreifer so lange Zeit haben, um sich Zugang zu den Daten zu verschaffen. Es ist wichtig, dass die L\u00fccken \u00f6ffentlich gemacht werden, da gewisse Firmen ansonsten keine Updates durchf\u00fchren.","title":"Sicherheitsl\u00fccken"},{"location":"Reflexion/017_Woche/#concept-map","text":"Bei dieser Abgabe mussten wir wieder ein Concept Map erstellen. Dieses Mal ging es um Sessions , Cookies und Authorisierungen . Die Begriffe sind sehr einfach zu verkn\u00fcpfen, da sie alle zusammenh\u00e4ngen. Danach schrieb ich das UML Diagramm und die Notizen zu den Schl\u00fcsselw\u00f6rtern. Wie das letzte Mal habe ich zuerst mich \u00fcber alle Begriffe informiert und m\u00f6glichst viel Wissen dar\u00fcber aufgebaut. Durch meine Zusammenfassung hatte ich bereit eine grosse Erfahrung, welche mir half. Danach habe ich die Zusammenh\u00e4nge analysiert und eingeteilt. Ich habe die Begriffe in 3 Kategorien eingeteilt: Server , Client und Daten . Danach habe ich die Begriffe mit den Kategorien verkn\u00fcpft und die Notizen geschrieben. Merksatz: Sessions sind tempor\u00e4re Daten, welche auf dem Server gespeichert werden. Cookies sind tempor\u00e4re Daten, welche auf dem Client gespeichert werden. Dies ist das letzte Mal, dass wir eine Concept Map erstellen m\u00fcssen. Ich habe gelernt, dass es wichtig ist, sich vorher gut zu informieren und m\u00f6glichst viel Wissen aufzubauen. Durch das Aufbauen von Wissen kann ich die Zusammenh\u00e4nge besser verstehen und diese besser erkl\u00e4ren.","title":"Concept Map"},{"location":"Tags/","text":"Tags # Diese Webseite verf\u00fcgt \u00fcber folgende Tags: Anforderung # Akteure Daten Funktionale Testszenario Use Cases Anleitung # GitHub Pages Installation Installation Aufgaben # OOP Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Beispiele # Aufgaben Basics Anwendung Cheatsheet # Array Funktionen PHP-Cheatsheet Do's and Don'ts Regex Concept Map # 1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map Datenbank # Adminer Init-Scripts Prepared-Statements \u00dcbersicht Docker # Aufgaben \u00dcbersicht Framework # Aufbau Hinzuf\u00fcgen Validation Konzept # MVC-Konzept Mockup Twig-Konzept LB1 # Adminer Init-Scripts Prepared-Statements \u00dcbersicht \u00dcbersicht Akteure Daten Funktionale Testszenario Use Cases MVC-Konzept Mockup Twig-Konzept MVC Rendering Twig LB2 # 1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map Nicht zugeteilt # Struktur PHP # Sicherheit Twig Basics Installation OOP \u00dcbersicht Array Funktionen PHP-Cheatsheet Datentypen Do's and Don'ts Regex Sortieren Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Aufbau Hinzuf\u00fcgen Validation Anwendung Cookies Sessions Design Installation Logik Reflexion # 1. Woche 2. Woche 3. Woche 4. Woche 5. Woche 6. Woche 7. Woche 8. Woche 9. Woche 10. Woche 11. Woche 12. Woche 13. Woche 14. Woche 15. Woche 16. Woche 17. Woche Sessions & Cookies # Anwendung Cookies Sessions Twig # Twig Design Installation Logik","title":"Tags"},{"location":"Tags/#tags","text":"Diese Webseite verf\u00fcgt \u00fcber folgende Tags:","title":"Tags"},{"location":"Tags/#anforderung","text":"Akteure Daten Funktionale Testszenario Use Cases","title":"Anforderung"},{"location":"Tags/#anleitung","text":"GitHub Pages Installation Installation","title":"Anleitung"},{"location":"Tags/#aufgaben","text":"OOP Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche","title":"Aufgaben"},{"location":"Tags/#beispiele","text":"Aufgaben Basics Anwendung","title":"Beispiele"},{"location":"Tags/#cheatsheet","text":"Array Funktionen PHP-Cheatsheet Do's and Don'ts Regex","title":"Cheatsheet"},{"location":"Tags/#concept-map","text":"1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map","title":"Concept Map"},{"location":"Tags/#datenbank","text":"Adminer Init-Scripts Prepared-Statements \u00dcbersicht","title":"Datenbank"},{"location":"Tags/#docker","text":"Aufgaben \u00dcbersicht","title":"Docker"},{"location":"Tags/#framework","text":"Aufbau Hinzuf\u00fcgen Validation","title":"Framework"},{"location":"Tags/#konzept","text":"MVC-Konzept Mockup Twig-Konzept","title":"Konzept"},{"location":"Tags/#lb1","text":"Adminer Init-Scripts Prepared-Statements \u00dcbersicht \u00dcbersicht Akteure Daten Funktionale Testszenario Use Cases MVC-Konzept Mockup Twig-Konzept MVC Rendering Twig","title":"LB1"},{"location":"Tags/#lb2","text":"1. Concept Map 2. Concept Map 3. Concept Map 4. Concept Map","title":"LB2"},{"location":"Tags/#nicht-zugeteilt","text":"Struktur","title":"Nicht zugeteilt"},{"location":"Tags/#php","text":"Sicherheit Twig Basics Installation OOP \u00dcbersicht Array Funktionen PHP-Cheatsheet Datentypen Do's and Don'ts Regex Sortieren Arrays Dateien Formular HTTP-Parameter Rechnen mit Variablen Schleifen Vergleiche Aufbau Hinzuf\u00fcgen Validation Anwendung Cookies Sessions Design Installation Logik","title":"PHP"},{"location":"Tags/#reflexion","text":"1. Woche 2. Woche 3. Woche 4. Woche 5. Woche 6. Woche 7. Woche 8. Woche 9. Woche 10. Woche 11. Woche 12. Woche 13. Woche 14. Woche 15. Woche 16. Woche 17. Woche","title":"Reflexion"},{"location":"Tags/#sessions-cookies","text":"Anwendung Cookies Sessions","title":"Sessions &amp; Cookies"},{"location":"Tags/#twig","text":"Twig Design Installation Logik","title":"Twig"}]}